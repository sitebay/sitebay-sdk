/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SiteLiveCreate
    /// </summary>
    [DataContract]
    public partial class SiteLiveCreate :  IEquatable<SiteLiveCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLiveCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SiteLiveCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLiveCreate" /> class.
        /// </summary>
        /// <param name="fqdn">fqdn (required).</param>
        /// <param name="gitUrl">gitUrl.</param>
        /// <param name="regionId">regionId (default to 1).</param>
        /// <param name="teamId">teamId (required).</param>
        /// <param name="templateName">templateName.</param>
        /// <param name="wordpressBlogName">wordpressBlogName (required).</param>
        /// <param name="wordpressEmail">wordpressEmail (required).</param>
        /// <param name="wordpressFirstName">wordpressFirstName (required).</param>
        /// <param name="wordpressLastName">wordpressLastName (required).</param>
        /// <param name="wordpressPassword">wordpressPassword (required).</param>
        /// <param name="wordpressUsername">wordpressUsername (required).</param>
        public SiteLiveCreate(string fqdn = default(string), string gitUrl = default(string), int regionId = 1, string teamId = default(string), string templateName = default(string), string wordpressBlogName = default(string), string wordpressEmail = default(string), string wordpressFirstName = default(string), string wordpressLastName = default(string), string wordpressPassword = default(string), string wordpressUsername = default(string))
        {
            // to ensure "fqdn" is required (not null)
            if (fqdn == null)
            {
                throw new InvalidDataException("fqdn is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.Fqdn = fqdn;
            }

            // to ensure "teamId" is required (not null)
            if (teamId == null)
            {
                throw new InvalidDataException("teamId is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.TeamId = teamId;
            }

            // to ensure "wordpressBlogName" is required (not null)
            if (wordpressBlogName == null)
            {
                throw new InvalidDataException("wordpressBlogName is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.WordpressBlogName = wordpressBlogName;
            }

            // to ensure "wordpressEmail" is required (not null)
            if (wordpressEmail == null)
            {
                throw new InvalidDataException("wordpressEmail is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.WordpressEmail = wordpressEmail;
            }

            // to ensure "wordpressFirstName" is required (not null)
            if (wordpressFirstName == null)
            {
                throw new InvalidDataException("wordpressFirstName is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.WordpressFirstName = wordpressFirstName;
            }

            // to ensure "wordpressLastName" is required (not null)
            if (wordpressLastName == null)
            {
                throw new InvalidDataException("wordpressLastName is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.WordpressLastName = wordpressLastName;
            }

            // to ensure "wordpressPassword" is required (not null)
            if (wordpressPassword == null)
            {
                throw new InvalidDataException("wordpressPassword is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.WordpressPassword = wordpressPassword;
            }

            // to ensure "wordpressUsername" is required (not null)
            if (wordpressUsername == null)
            {
                throw new InvalidDataException("wordpressUsername is a required property for SiteLiveCreate and cannot be null");
            }
            else
            {
                this.WordpressUsername = wordpressUsername;
            }

            this.GitUrl = gitUrl;
            // use default value if no "regionId" provided
            if (regionId == null)
            {
                this.RegionId = 1;
            }
            else
            {
                this.RegionId = regionId;
            }
            this.TemplateName = templateName;
        }

        /// <summary>
        /// Gets or Sets Fqdn
        /// </summary>
        [DataMember(Name="fqdn", EmitDefaultValue=true)]
        public string Fqdn { get; set; }

        /// <summary>
        /// Gets or Sets GitUrl
        /// </summary>
        [DataMember(Name="git_url", EmitDefaultValue=false)]
        public string GitUrl { get; set; }

        /// <summary>
        /// Gets or Sets RegionId
        /// </summary>
        [DataMember(Name="region_id", EmitDefaultValue=false)]
        public int RegionId { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="team_id", EmitDefaultValue=true)]
        public string TeamId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateName
        /// </summary>
        [DataMember(Name="template_name", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets WordpressBlogName
        /// </summary>
        [DataMember(Name="wordpressBlogName", EmitDefaultValue=true)]
        public string WordpressBlogName { get; set; }

        /// <summary>
        /// Gets or Sets WordpressEmail
        /// </summary>
        [DataMember(Name="wordpressEmail", EmitDefaultValue=true)]
        public string WordpressEmail { get; set; }

        /// <summary>
        /// Gets or Sets WordpressFirstName
        /// </summary>
        [DataMember(Name="wordpressFirstName", EmitDefaultValue=true)]
        public string WordpressFirstName { get; set; }

        /// <summary>
        /// Gets or Sets WordpressLastName
        /// </summary>
        [DataMember(Name="wordpressLastName", EmitDefaultValue=true)]
        public string WordpressLastName { get; set; }

        /// <summary>
        /// Gets or Sets WordpressPassword
        /// </summary>
        [DataMember(Name="wordpressPassword", EmitDefaultValue=true)]
        public string WordpressPassword { get; set; }

        /// <summary>
        /// Gets or Sets WordpressUsername
        /// </summary>
        [DataMember(Name="wordpressUsername", EmitDefaultValue=true)]
        public string WordpressUsername { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteLiveCreate {\n");
            sb.Append("  Fqdn: ").Append(Fqdn).Append("\n");
            sb.Append("  GitUrl: ").Append(GitUrl).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  WordpressBlogName: ").Append(WordpressBlogName).Append("\n");
            sb.Append("  WordpressEmail: ").Append(WordpressEmail).Append("\n");
            sb.Append("  WordpressFirstName: ").Append(WordpressFirstName).Append("\n");
            sb.Append("  WordpressLastName: ").Append(WordpressLastName).Append("\n");
            sb.Append("  WordpressPassword: ").Append(WordpressPassword).Append("\n");
            sb.Append("  WordpressUsername: ").Append(WordpressUsername).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteLiveCreate);
        }

        /// <summary>
        /// Returns true if SiteLiveCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteLiveCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteLiveCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fqdn == input.Fqdn ||
                    (this.Fqdn != null &&
                    this.Fqdn.Equals(input.Fqdn))
                ) && 
                (
                    this.GitUrl == input.GitUrl ||
                    (this.GitUrl != null &&
                    this.GitUrl.Equals(input.GitUrl))
                ) && 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.WordpressBlogName == input.WordpressBlogName ||
                    (this.WordpressBlogName != null &&
                    this.WordpressBlogName.Equals(input.WordpressBlogName))
                ) && 
                (
                    this.WordpressEmail == input.WordpressEmail ||
                    (this.WordpressEmail != null &&
                    this.WordpressEmail.Equals(input.WordpressEmail))
                ) && 
                (
                    this.WordpressFirstName == input.WordpressFirstName ||
                    (this.WordpressFirstName != null &&
                    this.WordpressFirstName.Equals(input.WordpressFirstName))
                ) && 
                (
                    this.WordpressLastName == input.WordpressLastName ||
                    (this.WordpressLastName != null &&
                    this.WordpressLastName.Equals(input.WordpressLastName))
                ) && 
                (
                    this.WordpressPassword == input.WordpressPassword ||
                    (this.WordpressPassword != null &&
                    this.WordpressPassword.Equals(input.WordpressPassword))
                ) && 
                (
                    this.WordpressUsername == input.WordpressUsername ||
                    (this.WordpressUsername != null &&
                    this.WordpressUsername.Equals(input.WordpressUsername))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fqdn != null)
                    hashCode = hashCode * 59 + this.Fqdn.GetHashCode();
                if (this.GitUrl != null)
                    hashCode = hashCode * 59 + this.GitUrl.GetHashCode();
                if (this.RegionId != null)
                    hashCode = hashCode * 59 + this.RegionId.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.WordpressBlogName != null)
                    hashCode = hashCode * 59 + this.WordpressBlogName.GetHashCode();
                if (this.WordpressEmail != null)
                    hashCode = hashCode * 59 + this.WordpressEmail.GetHashCode();
                if (this.WordpressFirstName != null)
                    hashCode = hashCode * 59 + this.WordpressFirstName.GetHashCode();
                if (this.WordpressLastName != null)
                    hashCode = hashCode * 59 + this.WordpressLastName.GetHashCode();
                if (this.WordpressPassword != null)
                    hashCode = hashCode * 59 + this.WordpressPassword.GetHashCode();
                if (this.WordpressUsername != null)
                    hashCode = hashCode * 59 + this.WordpressUsername.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
