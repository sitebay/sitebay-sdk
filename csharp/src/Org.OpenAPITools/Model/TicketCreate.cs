/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TicketCreate
    /// </summary>
    [DataContract]
    public partial class TicketCreate :  IEquatable<TicketCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TicketCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketCreate" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        /// <param name="description">description.</param>
        /// <param name="resolved">resolved (default to false).</param>
        /// <param name="s3Object">s3Object.</param>
        /// <param name="siteLiveId">siteLiveId.</param>
        /// <param name="subject">subject (required).</param>
        public TicketCreate(string category = default(string), string description = default(string), bool resolved = false, string s3Object = default(string), string siteLiveId = default(string), string subject = default(string))
        {
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for TicketCreate and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }

            this.Category = category;
            this.Description = description;
            // use default value if no "resolved" provided
            if (resolved == null)
            {
                this.Resolved = false;
            }
            else
            {
                this.Resolved = resolved;
            }
            this.S3Object = s3Object;
            this.SiteLiveId = siteLiveId;
        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Resolved
        /// </summary>
        [DataMember(Name="resolved", EmitDefaultValue=false)]
        public bool Resolved { get; set; }

        /// <summary>
        /// Gets or Sets S3Object
        /// </summary>
        [DataMember(Name="s3_object", EmitDefaultValue=false)]
        public string S3Object { get; set; }

        /// <summary>
        /// Gets or Sets SiteLiveId
        /// </summary>
        [DataMember(Name="site_live_id", EmitDefaultValue=false)]
        public string SiteLiveId { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=true)]
        public string Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TicketCreate {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Resolved: ").Append(Resolved).Append("\n");
            sb.Append("  S3Object: ").Append(S3Object).Append("\n");
            sb.Append("  SiteLiveId: ").Append(SiteLiveId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TicketCreate);
        }

        /// <summary>
        /// Returns true if TicketCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of TicketCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TicketCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Resolved == input.Resolved ||
                    (this.Resolved != null &&
                    this.Resolved.Equals(input.Resolved))
                ) && 
                (
                    this.S3Object == input.S3Object ||
                    (this.S3Object != null &&
                    this.S3Object.Equals(input.S3Object))
                ) && 
                (
                    this.SiteLiveId == input.SiteLiveId ||
                    (this.SiteLiveId != null &&
                    this.SiteLiveId.Equals(input.SiteLiveId))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Resolved != null)
                    hashCode = hashCode * 59 + this.Resolved.GetHashCode();
                if (this.S3Object != null)
                    hashCode = hashCode * 59 + this.S3Object.GetHashCode();
                if (this.SiteLiveId != null)
                    hashCode = hashCode * 59 + this.SiteLiveId.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
