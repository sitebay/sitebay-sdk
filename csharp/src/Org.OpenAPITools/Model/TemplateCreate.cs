/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TemplateCreate
    /// </summary>
    [DataContract]
    public partial class TemplateCreate :  IEquatable<TemplateCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateCreate" /> class.
        /// </summary>
        /// <param name="fullDescription">fullDescription (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="plugins">plugins (required).</param>
        /// <param name="quickstart">quickstart (required).</param>
        /// <param name="shortDescription">shortDescription (required).</param>
        /// <param name="tag">tag (required).</param>
        /// <param name="wpressUrl">wpressUrl (required).</param>
        public TemplateCreate(string fullDescription = default(string), string name = default(string), string plugins = default(string), string quickstart = default(string), string shortDescription = default(string), string tag = default(string), string wpressUrl = default(string))
        {
            // to ensure "fullDescription" is required (not null)
            if (fullDescription == null)
            {
                throw new InvalidDataException("fullDescription is a required property for TemplateCreate and cannot be null");
            }
            else
            {
                this.FullDescription = fullDescription;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TemplateCreate and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "plugins" is required (not null)
            if (plugins == null)
            {
                throw new InvalidDataException("plugins is a required property for TemplateCreate and cannot be null");
            }
            else
            {
                this.Plugins = plugins;
            }

            // to ensure "quickstart" is required (not null)
            if (quickstart == null)
            {
                throw new InvalidDataException("quickstart is a required property for TemplateCreate and cannot be null");
            }
            else
            {
                this.Quickstart = quickstart;
            }

            // to ensure "shortDescription" is required (not null)
            if (shortDescription == null)
            {
                throw new InvalidDataException("shortDescription is a required property for TemplateCreate and cannot be null");
            }
            else
            {
                this.ShortDescription = shortDescription;
            }

            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new InvalidDataException("tag is a required property for TemplateCreate and cannot be null");
            }
            else
            {
                this.Tag = tag;
            }

            // to ensure "wpressUrl" is required (not null)
            if (wpressUrl == null)
            {
                throw new InvalidDataException("wpressUrl is a required property for TemplateCreate and cannot be null");
            }
            else
            {
                this.WpressUrl = wpressUrl;
            }

        }

        /// <summary>
        /// Gets or Sets FullDescription
        /// </summary>
        [DataMember(Name="full_description", EmitDefaultValue=true)]
        public string FullDescription { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Plugins
        /// </summary>
        [DataMember(Name="plugins", EmitDefaultValue=true)]
        public string Plugins { get; set; }

        /// <summary>
        /// Gets or Sets Quickstart
        /// </summary>
        [DataMember(Name="quickstart", EmitDefaultValue=true)]
        public string Quickstart { get; set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name="short_description", EmitDefaultValue=true)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=true)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets WpressUrl
        /// </summary>
        [DataMember(Name="wpress_url", EmitDefaultValue=true)]
        public string WpressUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateCreate {\n");
            sb.Append("  FullDescription: ").Append(FullDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("  Quickstart: ").Append(Quickstart).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  WpressUrl: ").Append(WpressUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateCreate);
        }

        /// <summary>
        /// Returns true if TemplateCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FullDescription == input.FullDescription ||
                    (this.FullDescription != null &&
                    this.FullDescription.Equals(input.FullDescription))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Plugins == input.Plugins ||
                    (this.Plugins != null &&
                    this.Plugins.Equals(input.Plugins))
                ) && 
                (
                    this.Quickstart == input.Quickstart ||
                    (this.Quickstart != null &&
                    this.Quickstart.Equals(input.Quickstart))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.WpressUrl == input.WpressUrl ||
                    (this.WpressUrl != null &&
                    this.WpressUrl.Equals(input.WpressUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FullDescription != null)
                    hashCode = hashCode * 59 + this.FullDescription.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Plugins != null)
                    hashCode = hashCode * 59 + this.Plugins.GetHashCode();
                if (this.Quickstart != null)
                    hashCode = hashCode * 59 + this.Quickstart.GetHashCode();
                if (this.ShortDescription != null)
                    hashCode = hashCode * 59 + this.ShortDescription.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.WpressUrl != null)
                    hashCode = hashCode * 59 + this.WpressUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
