/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SiteLive
    /// </summary>
    [DataContract]
    public partial class SiteLive :  IEquatable<SiteLive>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLive" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SiteLive() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLive" /> class.
        /// </summary>
        /// <param name="active">active (required).</param>
        /// <param name="busy">busy.</param>
        /// <param name="dkimKey">dkimKey.</param>
        /// <param name="fqdn">fqdn (required).</param>
        /// <param name="gitUrl">gitUrl.</param>
        /// <param name="id">id (required).</param>
        /// <param name="regionId">regionId (required).</param>
        /// <param name="teamId">teamId (required).</param>
        /// <param name="untrackedTables">untrackedTables.</param>
        /// <param name="userId">userId (required).</param>
        public SiteLive(bool active = default(bool), string busy = default(string), string dkimKey = default(string), string fqdn = default(string), string gitUrl = default(string), string id = default(string), int regionId = default(int), string teamId = default(string), string untrackedTables = default(string), string userId = default(string))
        {
            // to ensure "active" is required (not null)
            if (active == null)
            {
                throw new InvalidDataException("active is a required property for SiteLive and cannot be null");
            }
            else
            {
                this.Active = active;
            }

            // to ensure "fqdn" is required (not null)
            if (fqdn == null)
            {
                throw new InvalidDataException("fqdn is a required property for SiteLive and cannot be null");
            }
            else
            {
                this.Fqdn = fqdn;
            }

            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SiteLive and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "regionId" is required (not null)
            if (regionId == null)
            {
                throw new InvalidDataException("regionId is a required property for SiteLive and cannot be null");
            }
            else
            {
                this.RegionId = regionId;
            }

            // to ensure "teamId" is required (not null)
            if (teamId == null)
            {
                throw new InvalidDataException("teamId is a required property for SiteLive and cannot be null");
            }
            else
            {
                this.TeamId = teamId;
            }

            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for SiteLive and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }

            this.Busy = busy;
            this.DkimKey = dkimKey;
            this.GitUrl = gitUrl;
            this.UntrackedTables = untrackedTables;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Busy
        /// </summary>
        [DataMember(Name="busy", EmitDefaultValue=false)]
        public string Busy { get; set; }

        /// <summary>
        /// Gets or Sets DkimKey
        /// </summary>
        [DataMember(Name="dkim_key", EmitDefaultValue=false)]
        public string DkimKey { get; set; }

        /// <summary>
        /// Gets or Sets Fqdn
        /// </summary>
        [DataMember(Name="fqdn", EmitDefaultValue=true)]
        public string Fqdn { get; set; }

        /// <summary>
        /// Gets or Sets GitUrl
        /// </summary>
        [DataMember(Name="git_url", EmitDefaultValue=false)]
        public string GitUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets RegionId
        /// </summary>
        [DataMember(Name="region_id", EmitDefaultValue=true)]
        public int RegionId { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="team_id", EmitDefaultValue=true)]
        public string TeamId { get; set; }

        /// <summary>
        /// Gets or Sets UntrackedTables
        /// </summary>
        [DataMember(Name="untracked_tables", EmitDefaultValue=false)]
        public string UntrackedTables { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteLive {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Busy: ").Append(Busy).Append("\n");
            sb.Append("  DkimKey: ").Append(DkimKey).Append("\n");
            sb.Append("  Fqdn: ").Append(Fqdn).Append("\n");
            sb.Append("  GitUrl: ").Append(GitUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  UntrackedTables: ").Append(UntrackedTables).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteLive);
        }

        /// <summary>
        /// Returns true if SiteLive instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteLive to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteLive input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Busy == input.Busy ||
                    (this.Busy != null &&
                    this.Busy.Equals(input.Busy))
                ) && 
                (
                    this.DkimKey == input.DkimKey ||
                    (this.DkimKey != null &&
                    this.DkimKey.Equals(input.DkimKey))
                ) && 
                (
                    this.Fqdn == input.Fqdn ||
                    (this.Fqdn != null &&
                    this.Fqdn.Equals(input.Fqdn))
                ) && 
                (
                    this.GitUrl == input.GitUrl ||
                    (this.GitUrl != null &&
                    this.GitUrl.Equals(input.GitUrl))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.UntrackedTables == input.UntrackedTables ||
                    (this.UntrackedTables != null &&
                    this.UntrackedTables.Equals(input.UntrackedTables))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Busy != null)
                    hashCode = hashCode * 59 + this.Busy.GetHashCode();
                if (this.DkimKey != null)
                    hashCode = hashCode * 59 + this.DkimKey.GetHashCode();
                if (this.Fqdn != null)
                    hashCode = hashCode * 59 + this.Fqdn.GetHashCode();
                if (this.GitUrl != null)
                    hashCode = hashCode * 59 + this.GitUrl.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RegionId != null)
                    hashCode = hashCode * 59 + this.RegionId.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.UntrackedTables != null)
                    hashCode = hashCode * 59 + this.UntrackedTables.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
