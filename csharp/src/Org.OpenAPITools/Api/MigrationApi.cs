/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMigrationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a migration
        /// </summary>
        /// <remarks>
        /// Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <returns>Migration</returns>
        Migration CreateMigration (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string));

        /// <summary>
        /// Create a migration
        /// </summary>
        /// <remarks>
        /// Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <returns>ApiResponse of Migration</returns>
        ApiResponse<Migration> CreateMigrationWithHttpInfo (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string));
        /// <summary>
        /// Delete Migration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <returns>Object</returns>
        Object DeleteMigration (int migrationId);

        /// <summary>
        /// Delete Migration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteMigrationWithHttpInfo (int migrationId);
        /// <summary>
        /// Get Migrations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Migration&gt;</returns>
        List<Migration> GetMigrations ();

        /// <summary>
        /// Get Migrations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Migration&gt;</returns>
        ApiResponse<List<Migration>> GetMigrationsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a migration
        /// </summary>
        /// <remarks>
        /// Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Migration</returns>
        System.Threading.Tasks.Task<Migration> CreateMigrationAsync (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a migration
        /// </summary>
        /// <remarks>
        /// Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Migration)</returns>
        System.Threading.Tasks.Task<ApiResponse<Migration>> CreateMigrationWithHttpInfoAsync (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Migration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteMigrationAsync (int migrationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Migration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMigrationWithHttpInfoAsync (int migrationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Migrations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Migration&gt;</returns>
        System.Threading.Tasks.Task<List<Migration>> GetMigrationsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Migrations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Migration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Migration>>> GetMigrationsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MigrationApi : IMigrationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MigrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MigrationApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MigrationApi"/> class
        /// </summary>
        /// <returns></returns>
        public MigrationApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MigrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MigrationApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a migration Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <returns>Migration</returns>
        public Migration CreateMigration (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string))
        {
             ApiResponse<Migration> localVarResponse = CreateMigrationWithHttpInfo(currentUrl, wordpressPassword, wordpressUser, extra, ftpAddress, ftpPassword, ftpUser, host, hostPassword, hostUser, migrationType, zipFile, zipFileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a migration Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <returns>ApiResponse of Migration</returns>
        public ApiResponse<Migration> CreateMigrationWithHttpInfo (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string))
        {
            // verify the required parameter 'currentUrl' is set
            if (currentUrl == null)
                throw new ApiException(400, "Missing required parameter 'currentUrl' when calling MigrationApi->CreateMigration");
            // verify the required parameter 'wordpressPassword' is set
            if (wordpressPassword == null)
                throw new ApiException(400, "Missing required parameter 'wordpressPassword' when calling MigrationApi->CreateMigration");
            // verify the required parameter 'wordpressUser' is set
            if (wordpressUser == null)
                throw new ApiException(400, "Missing required parameter 'wordpressUser' when calling MigrationApi->CreateMigration");

            var localVarPath = "/api/v1/migration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentUrl != null) localVarFormParams.Add("current_url", this.Configuration.ApiClient.ParameterToString(currentUrl)); // form parameter
            if (extra != null) localVarFormParams.Add("extra", this.Configuration.ApiClient.ParameterToString(extra)); // form parameter
            if (ftpAddress != null) localVarFormParams.Add("ftp_address", this.Configuration.ApiClient.ParameterToString(ftpAddress)); // form parameter
            if (ftpPassword != null) localVarFormParams.Add("ftp_password", this.Configuration.ApiClient.ParameterToString(ftpPassword)); // form parameter
            if (ftpUser != null) localVarFormParams.Add("ftp_user", this.Configuration.ApiClient.ParameterToString(ftpUser)); // form parameter
            if (host != null) localVarFormParams.Add("host", this.Configuration.ApiClient.ParameterToString(host)); // form parameter
            if (hostPassword != null) localVarFormParams.Add("host_password", this.Configuration.ApiClient.ParameterToString(hostPassword)); // form parameter
            if (hostUser != null) localVarFormParams.Add("host_user", this.Configuration.ApiClient.ParameterToString(hostUser)); // form parameter
            if (migrationType != null) localVarFormParams.Add("migration_type", this.Configuration.ApiClient.ParameterToString(migrationType)); // form parameter
            if (wordpressPassword != null) localVarFormParams.Add("wordpress_password", this.Configuration.ApiClient.ParameterToString(wordpressPassword)); // form parameter
            if (wordpressUser != null) localVarFormParams.Add("wordpress_user", this.Configuration.ApiClient.ParameterToString(wordpressUser)); // form parameter
            if (zipFile != null) localVarFileParams.Add("zip_file", this.Configuration.ApiClient.ParameterToFile("zip_file", zipFile));
            if (zipFileName != null) localVarFormParams.Add("zip_file_name", this.Configuration.ApiClient.ParameterToString(zipFileName)); // form parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMigration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Migration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Migration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Migration)));
        }

        /// <summary>
        /// Create a migration Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Migration</returns>
        public async System.Threading.Tasks.Task<Migration> CreateMigrationAsync (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Migration> localVarResponse = await CreateMigrationWithHttpInfoAsync(currentUrl, wordpressPassword, wordpressUser, extra, ftpAddress, ftpPassword, ftpUser, host, hostPassword, hostUser, migrationType, zipFile, zipFileName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a migration Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentUrl"></param>
        /// <param name="wordpressPassword"></param>
        /// <param name="wordpressUser"></param>
        /// <param name="extra"> (optional)</param>
        /// <param name="ftpAddress"> (optional)</param>
        /// <param name="ftpPassword"> (optional)</param>
        /// <param name="ftpUser"> (optional)</param>
        /// <param name="host"> (optional)</param>
        /// <param name="hostPassword"> (optional)</param>
        /// <param name="hostUser"> (optional)</param>
        /// <param name="migrationType"> (optional)</param>
        /// <param name="zipFile"> (optional)</param>
        /// <param name="zipFileName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Migration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Migration>> CreateMigrationWithHttpInfoAsync (string currentUrl, string wordpressPassword, string wordpressUser, string extra = default(string), string ftpAddress = default(string), string ftpPassword = default(string), string ftpUser = default(string), string host = default(string), string hostPassword = default(string), string hostUser = default(string), string migrationType = default(string), System.IO.Stream zipFile = default(System.IO.Stream), string zipFileName = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currentUrl' is set
            if (currentUrl == null)
                throw new ApiException(400, "Missing required parameter 'currentUrl' when calling MigrationApi->CreateMigration");
            // verify the required parameter 'wordpressPassword' is set
            if (wordpressPassword == null)
                throw new ApiException(400, "Missing required parameter 'wordpressPassword' when calling MigrationApi->CreateMigration");
            // verify the required parameter 'wordpressUser' is set
            if (wordpressUser == null)
                throw new ApiException(400, "Missing required parameter 'wordpressUser' when calling MigrationApi->CreateMigration");

            var localVarPath = "/api/v1/migration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentUrl != null) localVarFormParams.Add("current_url", this.Configuration.ApiClient.ParameterToString(currentUrl)); // form parameter
            if (extra != null) localVarFormParams.Add("extra", this.Configuration.ApiClient.ParameterToString(extra)); // form parameter
            if (ftpAddress != null) localVarFormParams.Add("ftp_address", this.Configuration.ApiClient.ParameterToString(ftpAddress)); // form parameter
            if (ftpPassword != null) localVarFormParams.Add("ftp_password", this.Configuration.ApiClient.ParameterToString(ftpPassword)); // form parameter
            if (ftpUser != null) localVarFormParams.Add("ftp_user", this.Configuration.ApiClient.ParameterToString(ftpUser)); // form parameter
            if (host != null) localVarFormParams.Add("host", this.Configuration.ApiClient.ParameterToString(host)); // form parameter
            if (hostPassword != null) localVarFormParams.Add("host_password", this.Configuration.ApiClient.ParameterToString(hostPassword)); // form parameter
            if (hostUser != null) localVarFormParams.Add("host_user", this.Configuration.ApiClient.ParameterToString(hostUser)); // form parameter
            if (migrationType != null) localVarFormParams.Add("migration_type", this.Configuration.ApiClient.ParameterToString(migrationType)); // form parameter
            if (wordpressPassword != null) localVarFormParams.Add("wordpress_password", this.Configuration.ApiClient.ParameterToString(wordpressPassword)); // form parameter
            if (wordpressUser != null) localVarFormParams.Add("wordpress_user", this.Configuration.ApiClient.ParameterToString(wordpressUser)); // form parameter
            if (zipFile != null) localVarFileParams.Add("zip_file", this.Configuration.ApiClient.ParameterToFile("zip_file", zipFile));
            if (zipFileName != null) localVarFormParams.Add("zip_file_name", this.Configuration.ApiClient.ParameterToString(zipFileName)); // form parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMigration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Migration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Migration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Migration)));
        }

        /// <summary>
        /// Delete Migration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <returns>Object</returns>
        public Object DeleteMigration (int migrationId)
        {
             ApiResponse<Object> localVarResponse = DeleteMigrationWithHttpInfo(migrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Migration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteMigrationWithHttpInfo (int migrationId)
        {
            // verify the required parameter 'migrationId' is set
            if (migrationId == null)
                throw new ApiException(400, "Missing required parameter 'migrationId' when calling MigrationApi->DeleteMigration");

            var localVarPath = "/api/v1/migration/{migration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (migrationId != null) localVarPathParams.Add("migration_id", this.Configuration.ApiClient.ParameterToString(migrationId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMigration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Migration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteMigrationAsync (int migrationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteMigrationWithHttpInfoAsync(migrationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Migration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMigrationWithHttpInfoAsync (int migrationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'migrationId' is set
            if (migrationId == null)
                throw new ApiException(400, "Missing required parameter 'migrationId' when calling MigrationApi->DeleteMigration");

            var localVarPath = "/api/v1/migration/{migration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (migrationId != null) localVarPathParams.Add("migration_id", this.Configuration.ApiClient.ParameterToString(migrationId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMigration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Migrations 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Migration&gt;</returns>
        public List<Migration> GetMigrations ()
        {
             ApiResponse<List<Migration>> localVarResponse = GetMigrationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Migrations 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Migration&gt;</returns>
        public ApiResponse<List<Migration>> GetMigrationsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/migration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMigrations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Migration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Migration>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Migration>)));
        }

        /// <summary>
        /// Get Migrations 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Migration&gt;</returns>
        public async System.Threading.Tasks.Task<List<Migration>> GetMigrationsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Migration>> localVarResponse = await GetMigrationsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Migrations 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Migration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Migration>>> GetMigrationsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/migration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMigrations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Migration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Migration>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Migration>)));
        }

    }
}
