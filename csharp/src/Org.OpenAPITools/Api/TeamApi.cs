/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Team</returns>
        Team GetTeam (string teamId);

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> GetTeamWithHttpInfo (string teamId);
        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>TeamMember</returns>
        TeamMember GetTeamMember (string teamMemberId, string teamId);

        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> GetTeamMemberWithHttpInfo (string teamMemberId, string teamId);
        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>TeamMember</returns>
        TeamMember GetTeamMember_0 (string teamMemberId, string teamId);

        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> GetTeamMember_0WithHttpInfo (string teamMemberId, string teamId);
        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> GetTeamMembers (string teamId);

        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> GetTeamMembersWithHttpInfo (string teamId);
        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> GetTeamMembers_0 (string teamId);

        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> GetTeamMembers_0WithHttpInfo (string teamId);
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Team</returns>
        Team GetTeam_0 (string teamId);

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> GetTeam_0WithHttpInfo (string teamId);
        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetTeams ();

        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetTeamsWithHttpInfo ();
        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetTeams_0 ();

        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetTeams_0WithHttpInfo ();
        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>Object</returns>
        Object RemoveTeamMember (string teamMemberId, string teamId);

        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveTeamMemberWithHttpInfo (string teamMemberId, string teamId);
        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>Object</returns>
        Object RemoveTeamMember_0 (string teamMemberId, string teamId);

        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveTeamMember_0WithHttpInfo (string teamMemberId, string teamId);
        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>Team</returns>
        Team UpdateTeam (string teamId, TeamUpdate teamUpdate);

        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UpdateTeamWithHttpInfo (string teamId, TeamUpdate teamUpdate);
        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>Team</returns>
        Team UpdateTeam_0 (string teamId, TeamUpdate teamUpdate);

        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UpdateTeam_0WithHttpInfo (string teamId, TeamUpdate teamUpdate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> GetTeamAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamWithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> GetTeamMemberAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> GetTeamMemberWithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> GetTeamMember_0Async (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Team Member
        /// </summary>
        /// <remarks>
        /// Get a Team Member by their UUID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> GetTeamMember_0WithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> GetTeamMembersAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> GetTeamMembersWithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> GetTeamMembers_0Async (string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a team&#39;s members
        /// </summary>
        /// <remarks>
        /// Get a list of Team Members
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> GetTeamMembers_0WithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> GetTeam_0Async (string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get details about an owned team team by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> GetTeam_0WithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetTeamsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetTeams_0Async (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get your owned teams
        /// </summary>
        /// <remarks>
        /// Get details about all of your owned teams
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeams_0WithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveTeamMemberAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTeamMemberWithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveTeamMember_0Async (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove Team Member
        /// </summary>
        /// <remarks>
        /// Remove a team member
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTeamMember_0WithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UpdateTeamAsync (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UpdateTeamWithHttpInfoAsync (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UpdateTeam_0Async (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Adjust your team&#39;s settings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UpdateTeam_0WithHttpInfoAsync (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamApi : ITeamApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class
        /// </summary>
        /// <returns></returns>
        public TeamApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Team</returns>
        public Team GetTeam (string teamId)
        {
             ApiResponse<Team> localVarResponse = GetTeamWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse<Team> GetTeamWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeam");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> GetTeamAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Team> localVarResponse = await GetTeamWithHttpInfoAsync(teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamWithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeam");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>TeamMember</returns>
        public TeamMember GetTeamMember (string teamMemberId, string teamId)
        {
             ApiResponse<TeamMember> localVarResponse = GetTeamMemberWithHttpInfo(teamMemberId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse<TeamMember> GetTeamMemberWithHttpInfo (string teamMemberId, string teamId)
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->GetTeamMember");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMember");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> GetTeamMemberAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TeamMember> localVarResponse = await GetTeamMemberWithHttpInfoAsync(teamMemberId, teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> GetTeamMemberWithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->GetTeamMember");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMember");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>TeamMember</returns>
        public TeamMember GetTeamMember_0 (string teamMemberId, string teamId)
        {
             ApiResponse<TeamMember> localVarResponse = GetTeamMember_0WithHttpInfo(teamMemberId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse<TeamMember> GetTeamMember_0WithHttpInfo (string teamMemberId, string teamId)
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->GetTeamMember_0");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMember_0");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMember_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> GetTeamMember_0Async (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TeamMember> localVarResponse = await GetTeamMember_0WithHttpInfoAsync(teamMemberId, teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Team Member Get a Team Member by their UUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> GetTeamMember_0WithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->GetTeamMember_0");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMember_0");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMember_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> GetTeamMembers (string teamId)
        {
             ApiResponse<List<TeamMember>> localVarResponse = GetTeamMembersWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public ApiResponse<List<TeamMember>> GetTeamMembersWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMembers");

            var localVarPath = "/api/v1/team{team_id}/member";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TeamMember>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> GetTeamMembersAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TeamMember>> localVarResponse = await GetTeamMembersWithHttpInfoAsync(teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> GetTeamMembersWithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMembers");

            var localVarPath = "/api/v1/team{team_id}/member";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TeamMember>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> GetTeamMembers_0 (string teamId)
        {
             ApiResponse<List<TeamMember>> localVarResponse = GetTeamMembers_0WithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public ApiResponse<List<TeamMember>> GetTeamMembers_0WithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMembers_0");

            var localVarPath = "/api/v1/team{team_id}/member";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembers_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TeamMember>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> GetTeamMembers_0Async (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TeamMember>> localVarResponse = await GetTeamMembers_0WithHttpInfoAsync(teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team&#39;s members Get a list of Team Members
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> GetTeamMembers_0WithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeamMembers_0");

            var localVarPath = "/api/v1/team{team_id}/member";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembers_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TeamMember>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Team</returns>
        public Team GetTeam_0 (string teamId)
        {
             ApiResponse<Team> localVarResponse = GetTeam_0WithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse<Team> GetTeam_0WithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeam_0");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> GetTeam_0Async (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Team> localVarResponse = await GetTeam_0WithHttpInfoAsync(teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team Get details about an owned team team by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> GetTeam_0WithHttpInfoAsync (string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->GetTeam_0");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetTeams ()
        {
             ApiResponse<List<Team>> localVarResponse = GetTeamsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse<List<Team>> GetTeamsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetTeamsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Team>> localVarResponse = await GetTeamsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetTeams_0 ()
        {
             ApiResponse<List<Team>> localVarResponse = GetTeams_0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse<List<Team>> GetTeams_0WithHttpInfo ()
        {

            var localVarPath = "/api/v1/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetTeams_0Async (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Team>> localVarResponse = await GetTeams_0WithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your owned teams Get details about all of your owned teams
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeams_0WithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>Object</returns>
        public Object RemoveTeamMember (string teamMemberId, string teamId)
        {
             ApiResponse<Object> localVarResponse = RemoveTeamMemberWithHttpInfo(teamMemberId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RemoveTeamMemberWithHttpInfo (string teamMemberId, string teamId)
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->RemoveTeamMember");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->RemoveTeamMember");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveTeamMemberAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await RemoveTeamMemberWithHttpInfoAsync(teamMemberId, teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTeamMemberWithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->RemoveTeamMember");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->RemoveTeamMember");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>Object</returns>
        public Object RemoveTeamMember_0 (string teamMemberId, string teamId)
        {
             ApiResponse<Object> localVarResponse = RemoveTeamMember_0WithHttpInfo(teamMemberId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RemoveTeamMember_0WithHttpInfo (string teamMemberId, string teamId)
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->RemoveTeamMember_0");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->RemoveTeamMember_0");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTeamMember_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveTeamMember_0Async (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await RemoveTeamMember_0WithHttpInfoAsync(teamMemberId, teamId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Team Member Remove a team member
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMemberId"></param>
        /// <param name="teamId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTeamMember_0WithHttpInfoAsync (string teamMemberId, string teamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamMemberId' is set
            if (teamMemberId == null)
                throw new ApiException(400, "Missing required parameter 'teamMemberId' when calling TeamApi->RemoveTeamMember_0");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->RemoveTeamMember_0");

            var localVarPath = "/api/v1/team/{team_id}/member/{team_member_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMemberId != null) localVarPathParams.Add("team_member_id", this.Configuration.ApiClient.ParameterToString(teamMemberId)); // path parameter
            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTeamMember_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>Team</returns>
        public Team UpdateTeam (string teamId, TeamUpdate teamUpdate)
        {
             ApiResponse<Team> localVarResponse = UpdateTeamWithHttpInfo(teamId, teamUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse<Team> UpdateTeamWithHttpInfo (string teamId, TeamUpdate teamUpdate)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->UpdateTeam");
            // verify the required parameter 'teamUpdate' is set
            if (teamUpdate == null)
                throw new ApiException(400, "Missing required parameter 'teamUpdate' when calling TeamApi->UpdateTeam");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (teamUpdate != null && teamUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UpdateTeamAsync (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Team> localVarResponse = await UpdateTeamWithHttpInfoAsync(teamId, teamUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> UpdateTeamWithHttpInfoAsync (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->UpdateTeam");
            // verify the required parameter 'teamUpdate' is set
            if (teamUpdate == null)
                throw new ApiException(400, "Missing required parameter 'teamUpdate' when calling TeamApi->UpdateTeam");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (teamUpdate != null && teamUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>Team</returns>
        public Team UpdateTeam_0 (string teamId, TeamUpdate teamUpdate)
        {
             ApiResponse<Team> localVarResponse = UpdateTeam_0WithHttpInfo(teamId, teamUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse<Team> UpdateTeam_0WithHttpInfo (string teamId, TeamUpdate teamUpdate)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->UpdateTeam_0");
            // verify the required parameter 'teamUpdate' is set
            if (teamUpdate == null)
                throw new ApiException(400, "Missing required parameter 'teamUpdate' when calling TeamApi->UpdateTeam_0");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (teamUpdate != null && teamUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UpdateTeam_0Async (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Team> localVarResponse = await UpdateTeam_0WithHttpInfoAsync(teamId, teamUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Team Adjust your team&#39;s settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> UpdateTeam_0WithHttpInfoAsync (string teamId, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling TeamApi->UpdateTeam_0");
            // verify the required parameter 'teamUpdate' is set
            if (teamUpdate == null)
                throw new ApiException(400, "Missing required parameter 'teamUpdate' when calling TeamApi->UpdateTeam_0");

            var localVarPath = "/api/v1/team/{team_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("team_id", this.Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (teamUpdate != null && teamUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

    }
}
