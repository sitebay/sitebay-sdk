/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteLiveApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object AddMailDns (string fqdn);

        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddMailDnsWithHttpInfo (string fqdn);
        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object AddMailDns_0 (string fqdn);

        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddMailDns_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>Object</returns>
        Object ChangeDevMode (string fqdn, string value);

        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ChangeDevModeWithHttpInfo (string fqdn, string value);
        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>Object</returns>
        Object ChangeDevMode_0 (string fqdn, string value);

        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ChangeDevMode_0WithHttpInfo (string fqdn, string value);
        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object ClearCache (string fqdn);

        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClearCacheWithHttpInfo (string fqdn);
        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object ClearCache_0 (string fqdn);

        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClearCache_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object CommitSiteStage (string fqdn);

        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommitSiteStageWithHttpInfo (string fqdn);
        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object CommitSiteStage_0 (string fqdn);

        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommitSiteStage_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateEmail (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate));

        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateEmailWithHttpInfo (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate));
        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateEmail_0 (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate));

        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateEmail_0WithHttpInfo (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate));
        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateExternalPath (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate));

        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateExternalPathWithHttpInfo (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate));
        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateExternalPath_0 (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate));

        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateExternalPath_0WithHttpInfo (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate));
        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>SiteLive</returns>
        SiteLive CreateSiteLive (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of SiteLive</returns>
        ApiResponse<SiteLive> CreateSiteLiveWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>SiteLive</returns>
        SiteLive CreateSiteLive_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of SiteLive</returns>
        ApiResponse<SiteLive> CreateSiteLive_0WithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateSiteStage (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate));

        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateSiteStageWithHttpInfo (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate));
        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateSiteStage_0 (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate));

        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateSiteStage_0WithHttpInfo (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate));
        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>Tag</returns>
        Tag CreateTag (string fqdn, TagCreate tagCreate = default(TagCreate));

        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> CreateTagWithHttpInfo (string fqdn, TagCreate tagCreate = default(TagCreate));
        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>Tag</returns>
        Tag CreateTag_0 (string fqdn, TagCreate tagCreate = default(TagCreate));

        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> CreateTag_0WithHttpInfo (string fqdn, TagCreate tagCreate = default(TagCreate));
        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteDnsRecord (string dnsId, string fqdn);

        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDnsRecordWithHttpInfo (string dnsId, string fqdn);
        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteDnsRecord_0 (string dnsId, string fqdn);

        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDnsRecord_0WithHttpInfo (string dnsId, string fqdn);
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>Object</returns>
        Object DeleteEmail (string fqdn, string userEmailAddress);

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteEmailWithHttpInfo (string fqdn, string userEmailAddress);
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>Object</returns>
        Object DeleteEmail_0 (string fqdn, string userEmailAddress);

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteEmail_0WithHttpInfo (string fqdn, string userEmailAddress);
        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteExternalPath (string externalPathId, string fqdn);

        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteExternalPathWithHttpInfo (string externalPathId, string fqdn);
        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteExternalPath_0 (string externalPathId, string fqdn);

        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteExternalPath_0WithHttpInfo (string externalPathId, string fqdn);
        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteSiteLive (string fqdn);

        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteSiteLiveWithHttpInfo (string fqdn);
        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteSiteLive_0 (string fqdn);

        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteSiteLive_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteSiteStage (string fqdn);

        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteSiteStageWithHttpInfo (string fqdn);
        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DeleteSiteStage_0 (string fqdn);

        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteSiteStage_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> DeleteTag (string tagId, string fqdn);

        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> DeleteTagWithHttpInfo (string tagId, string fqdn);
        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> DeleteTag_0 (string tagId, string fqdn);

        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> DeleteTag_0WithHttpInfo (string tagId, string fqdn);
        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DisableFirewall (string fqdn);

        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DisableFirewallWithHttpInfo (string fqdn);
        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object DisableFirewall_0 (string fqdn);

        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DisableFirewall_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object EnableFirewall (string fqdn);

        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EnableFirewallWithHttpInfo (string fqdn);
        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object EnableFirewall_0 (string fqdn);

        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EnableFirewall_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetDnsRecords (string fqdn);

        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetDnsRecordsWithHttpInfo (string fqdn);
        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetDnsRecords_0 (string fqdn);

        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetDnsRecords_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetEmails (string fqdn);

        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetEmailsWithHttpInfo (string fqdn);
        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetEmails_0 (string fqdn);

        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetEmails_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetExternalPaths (string fqdn);

        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetExternalPathsWithHttpInfo (string fqdn);
        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetExternalPaths_0 (string fqdn);

        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetExternalPaths_0WithHttpInfo (string fqdn);
        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>Object</returns>
        Object GetFilesAtPoint (string fqdn, DateTime restorePoint);

        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetFilesAtPointWithHttpInfo (string fqdn, DateTime restorePoint);
        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>Object</returns>
        Object GetFilesAtPoint_0 (string fqdn, DateTime restorePoint);

        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetFilesAtPoint_0WithHttpInfo (string fqdn, DateTime restorePoint);
        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetMailDns (string fqdn);

        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetMailDnsWithHttpInfo (string fqdn);
        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetMailDns_0 (string fqdn);

        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetMailDns_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetPitRestore (string pitRestoreId, string fqdn);

        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPitRestoreWithHttpInfo (string pitRestoreId, string fqdn);
        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetPitRestore_0 (string pitRestoreId, string fqdn);

        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPitRestore_0WithHttpInfo (string pitRestoreId, string fqdn);
        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetPitRestores (string fqdn);

        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPitRestoresWithHttpInfo (string fqdn);
        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object GetPitRestores_0 (string fqdn);

        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPitRestores_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>SiteLive</returns>
        SiteLive GetSiteLive (string fqdn);

        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        ApiResponse<SiteLive> GetSiteLiveWithHttpInfo (string fqdn);
        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>SiteLive</returns>
        SiteLive GetSiteLive_0 (string fqdn);

        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        ApiResponse<SiteLive> GetSiteLive_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>Object</returns>
        Object GetSitePlanUsage (string fqdn, DateTime start, DateTime end);

        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSitePlanUsageWithHttpInfo (string fqdn, DateTime start, DateTime end);
        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>Object</returns>
        Object GetSitePlanUsage_0 (string fqdn, DateTime start, DateTime end);

        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSitePlanUsage_0WithHttpInfo (string fqdn, DateTime start, DateTime end);
        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SiteLive&gt;</returns>
        List<SiteLive> GetSitesLive ();

        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SiteLive&gt;</returns>
        ApiResponse<List<SiteLive>> GetSitesLiveWithHttpInfo ();
        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SiteLive&gt;</returns>
        List<SiteLive> GetSitesLive_0 ();

        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SiteLive&gt;</returns>
        ApiResponse<List<SiteLive>> GetSitesLive_0WithHttpInfo ();
        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> GetTags (string fqdn);

        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> GetTagsWithHttpInfo (string fqdn);
        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> GetTags_0 (string fqdn);

        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> GetTags_0WithHttpInfo (string fqdn);
        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>Object</returns>
        Object ModifyFirewall (string fqdn, string ipAddress, string addOrDel = default(string));

        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModifyFirewallWithHttpInfo (string fqdn, string ipAddress, string addOrDel = default(string));
        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>Object</returns>
        Object ModifyFirewall_0 (string fqdn, string ipAddress, string addOrDel = default(string));

        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModifyFirewall_0WithHttpInfo (string fqdn, string ipAddress, string addOrDel = default(string));
        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>Object</returns>
        Object RestoreSite (string fqdn, PITRestoreCreate pITRestoreCreate);

        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RestoreSiteWithHttpInfo (string fqdn, PITRestoreCreate pITRestoreCreate);
        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>Object</returns>
        Object RestoreSite_0 (string fqdn, PITRestoreCreate pITRestoreCreate);

        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RestoreSite_0WithHttpInfo (string fqdn, PITRestoreCreate pITRestoreCreate);
        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>Object</returns>
        Object ShellCmdSiteLive (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?));

        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ShellCmdSiteLiveWithHttpInfo (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?));
        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>Object</returns>
        Object ShellCmdSiteLive_0 (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?));

        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ShellCmdSiteLive_0WithHttpInfo (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?));
        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>Object</returns>
        Object UpdateDnsRecord (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?));

        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateDnsRecordWithHttpInfo (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?));
        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>Object</returns>
        Object UpdateDnsRecord_0 (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?));

        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateDnsRecord_0WithHttpInfo (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?));
        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateEmail (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate));

        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateEmailWithHttpInfo (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate));
        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateEmail_0 (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate));

        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateEmail_0WithHttpInfo (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate));
        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>SiteLive</returns>
        SiteLive UpdateSiteLive (string fqdn, SiteLiveUpdate siteLiveUpdate);

        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        ApiResponse<SiteLive> UpdateSiteLiveWithHttpInfo (string fqdn, SiteLiveUpdate siteLiveUpdate);
        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>SiteLive</returns>
        SiteLive UpdateSiteLive_0 (string fqdn, SiteLiveUpdate siteLiveUpdate);

        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        ApiResponse<SiteLive> UpdateSiteLive_0WithHttpInfo (string fqdn, SiteLiveUpdate siteLiveUpdate);
        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object ValidateMxRecords (string fqdn);

        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ValidateMxRecordsWithHttpInfo (string fqdn);
        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        Object ValidateMxRecords_0 (string fqdn);

        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ValidateMxRecords_0WithHttpInfo (string fqdn);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddMailDnsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMailDnsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddMailDns_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Email DNS records
        /// </summary>
        /// <remarks>
        /// Automatically add the DNS records to your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMailDns_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ChangeDevModeAsync (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeDevModeWithHttpInfoAsync (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ChangeDevMode_0Async (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Change HTTP Auth
        /// </summary>
        /// <remarks>
        /// Enable or disable HTTP Basic Authentication
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeDevMode_0WithHttpInfoAsync (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClearCacheAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearCacheWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClearCache_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clear the cache
        /// </summary>
        /// <remarks>
        /// Purges the Cloudflare CDN cache for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearCache_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommitSiteStageAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommitSiteStageWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommitSiteStage_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Commit Stage Site
        /// </summary>
        /// <remarks>
        /// Sync the wp-content and database from your staging site to your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommitSiteStage_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateEmailAsync (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEmailWithHttpInfoAsync (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateEmail_0Async (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// Create a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEmail_0WithHttpInfoAsync (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateExternalPathAsync (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateExternalPathWithHttpInfoAsync (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateExternalPath_0Async (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create External Path
        /// </summary>
        /// <remarks>
        /// Connect an external URL to your site on a subpath
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateExternalPath_0WithHttpInfoAsync (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        System.Threading.Tasks.Task<SiteLive> CreateSiteLiveAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLive>> CreateSiteLiveWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        System.Threading.Tasks.Task<SiteLive> CreateSiteLive_0Async (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a site
        /// </summary>
        /// <remarks>
        /// Create a new site by providing your domain and your site&#39;s WordPress details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLive>> CreateSiteLive_0WithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateSiteStageAsync (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateSiteStageWithHttpInfoAsync (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateSiteStage_0Async (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a Staging site
        /// </summary>
        /// <remarks>
        /// Create a staging site on which you can test changes
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateSiteStage_0WithHttpInfoAsync (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> CreateTagAsync (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTagWithHttpInfoAsync (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> CreateTag_0Async (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Create a tag for organizational purposes for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTag_0WithHttpInfoAsync (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDnsRecordAsync (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDnsRecordWithHttpInfoAsync (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDnsRecord_0Async (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete DNS record
        /// </summary>
        /// <remarks>
        /// Delete a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDnsRecord_0WithHttpInfoAsync (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteEmailAsync (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailWithHttpInfoAsync (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteEmail_0Async (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Delete a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmail_0WithHttpInfoAsync (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteExternalPathAsync (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExternalPathWithHttpInfoAsync (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteExternalPath_0Async (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete External Path
        /// </summary>
        /// <remarks>
        /// Delete the link between an external URL and your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExternalPath_0WithHttpInfoAsync (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteSiteLiveAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteLiveWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteSiteLive_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete your live site
        /// </summary>
        /// <remarks>
        /// This permanently deletes your site, and its stage site if one exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteLive_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteSiteStageAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteStageWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteSiteStage_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Stage Site
        /// </summary>
        /// <remarks>
        /// Delete your staging site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteStage_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> DeleteTagAsync (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> DeleteTagWithHttpInfoAsync (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> DeleteTag_0Async (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a tag
        /// </summary>
        /// <remarks>
        /// Get a tag by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> DeleteTag_0WithHttpInfoAsync (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DisableFirewallAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisableFirewallWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DisableFirewall_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Disable the firewall
        /// </summary>
        /// <remarks>
        /// Disable wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisableFirewall_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EnableFirewallAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableFirewallWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EnableFirewall_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enable the firewall
        /// </summary>
        /// <remarks>
        /// Enable the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableFirewall_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetDnsRecordsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDnsRecordsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetDnsRecords_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get DNS records
        /// </summary>
        /// <remarks>
        /// Get a nameserver configured site&#39;s DNS records
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDnsRecords_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetEmailsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetEmails_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Emails
        /// </summary>
        /// <remarks>
        /// Get all custom email accounts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEmails_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetExternalPathsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetExternalPathsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetExternalPaths_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get External Paths
        /// </summary>
        /// <remarks>
        /// Get details about your site&#39;s external path configs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetExternalPaths_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetFilesAtPointAsync (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFilesAtPointWithHttpInfoAsync (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetFilesAtPoint_0Async (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PIT Files
        /// </summary>
        /// <remarks>
        /// Get a list of wp-content files at a point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFilesAtPoint_0WithHttpInfoAsync (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetMailDnsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMailDnsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetMailDns_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Required mail DNS records
        /// </summary>
        /// <remarks>
        /// Get the required records for our custom email service
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMailDns_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPitRestoreAsync (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestoreWithHttpInfoAsync (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPitRestore_0Async (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get PIT Restore
        /// </summary>
        /// <remarks>
        /// Get the results of a site&#39;s restore to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestore_0WithHttpInfoAsync (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPitRestoresAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestoresWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPitRestores_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get PIT Restores
        /// </summary>
        /// <remarks>
        /// Get all the results of a site&#39;s restores to a previous point in time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestores_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        System.Threading.Tasks.Task<SiteLive> GetSiteLiveAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLive>> GetSiteLiveWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        System.Threading.Tasks.Task<SiteLive> GetSiteLive_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get your live site
        /// </summary>
        /// <remarks>
        /// Get details about your live site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLive>> GetSiteLive_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSitePlanUsageAsync (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSitePlanUsageWithHttpInfoAsync (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSitePlanUsage_0Async (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Site Plan Usage
        /// </summary>
        /// <remarks>
        /// Get your visits and storage for a site at a given interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSitePlanUsage_0WithHttpInfoAsync (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SiteLive&gt;</returns>
        System.Threading.Tasks.Task<List<SiteLive>> GetSitesLiveAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SiteLive&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SiteLive>>> GetSitesLiveWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SiteLive&gt;</returns>
        System.Threading.Tasks.Task<List<SiteLive>> GetSitesLive_0Async (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get your sites
        /// </summary>
        /// <remarks>
        /// Get details about all of your live sites
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SiteLive&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SiteLive>>> GetSitesLive_0WithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> GetTagsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> GetTagsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> GetTags_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get tags
        /// </summary>
        /// <remarks>
        /// Get all the tags for your site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> GetTags_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModifyFirewallAsync (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModifyFirewallWithHttpInfoAsync (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModifyFirewall_0Async (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Modify the firewall
        /// </summary>
        /// <remarks>
        /// Add/Delete an IP from the wp-login firewall
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModifyFirewall_0WithHttpInfoAsync (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RestoreSiteAsync (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreSiteWithHttpInfoAsync (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RestoreSite_0Async (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create PIT Restore
        /// </summary>
        /// <remarks>
        /// Restore your site to a previous point in time, down to the minute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreSite_0WithHttpInfoAsync (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ShellCmdSiteLiveAsync (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShellCmdSiteLiveWithHttpInfoAsync (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ShellCmdSiteLive_0Async (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute shell command
        /// </summary>
        /// <remarks>
        /// Send a bash shell command to your site, such as a WP-CLI command
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShellCmdSiteLive_0WithHttpInfoAsync (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateDnsRecordAsync (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDnsRecordWithHttpInfoAsync (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateDnsRecord_0Async (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update DNS record
        /// </summary>
        /// <remarks>
        /// Update a DNS record on your Nameserver configured site
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDnsRecord_0WithHttpInfoAsync (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateEmailAsync (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmailWithHttpInfoAsync (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateEmail_0Async (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// Update a custom email account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmail_0WithHttpInfoAsync (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        System.Threading.Tasks.Task<SiteLive> UpdateSiteLiveAsync (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLive>> UpdateSiteLiveWithHttpInfoAsync (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        System.Threading.Tasks.Task<SiteLive> UpdateSiteLive_0Async (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a site
        /// </summary>
        /// <remarks>
        /// Update a site&#39;s details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLive>> UpdateSiteLive_0WithHttpInfoAsync (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ValidateMxRecordsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateMxRecordsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ValidateMxRecords_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// MX Validation
        /// </summary>
        /// <remarks>
        /// Check if your mail related DNS records are set up correctly
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateMxRecords_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SiteLiveApi : ISiteLiveApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteLiveApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLiveApi"/> class
        /// </summary>
        /// <returns></returns>
        public SiteLiveApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLiveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SiteLiveApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object AddMailDns (string fqdn)
        {
             ApiResponse<Object> localVarResponse = AddMailDnsWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> AddMailDnsWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->AddMailDns");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMailDns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddMailDnsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await AddMailDnsWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddMailDnsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->AddMailDns");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMailDns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object AddMailDns_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = AddMailDns_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> AddMailDns_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->AddMailDns_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMailDns_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddMailDns_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await AddMailDns_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Email DNS records Automatically add the DNS records to your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddMailDns_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->AddMailDns_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMailDns_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>Object</returns>
        public Object ChangeDevMode (string fqdn, string value)
        {
             ApiResponse<Object> localVarResponse = ChangeDevModeWithHttpInfo(fqdn, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ChangeDevModeWithHttpInfo (string fqdn, string value)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ChangeDevMode");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SiteLiveApi->ChangeDevMode");

            var localVarPath = "/api/v1/site_live/{fqdn}/change-dev-mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeDevMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ChangeDevModeAsync (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ChangeDevModeWithHttpInfoAsync(fqdn, value, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChangeDevModeWithHttpInfoAsync (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ChangeDevMode");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SiteLiveApi->ChangeDevMode");

            var localVarPath = "/api/v1/site_live/{fqdn}/change-dev-mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeDevMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>Object</returns>
        public Object ChangeDevMode_0 (string fqdn, string value)
        {
             ApiResponse<Object> localVarResponse = ChangeDevMode_0WithHttpInfo(fqdn, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ChangeDevMode_0WithHttpInfo (string fqdn, string value)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ChangeDevMode_0");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SiteLiveApi->ChangeDevMode_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/change-dev-mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeDevMode_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ChangeDevMode_0Async (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ChangeDevMode_0WithHttpInfoAsync(fqdn, value, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change HTTP Auth Enable or disable HTTP Basic Authentication
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="value"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChangeDevMode_0WithHttpInfoAsync (string fqdn, string value, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ChangeDevMode_0");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SiteLiveApi->ChangeDevMode_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/change-dev-mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeDevMode_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object ClearCache (string fqdn)
        {
             ApiResponse<Object> localVarResponse = ClearCacheWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ClearCacheWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ClearCache");

            var localVarPath = "/api/v1/site_live/{fqdn}/clear-cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClearCacheAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ClearCacheWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearCacheWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ClearCache");

            var localVarPath = "/api/v1/site_live/{fqdn}/clear-cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object ClearCache_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = ClearCache_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ClearCache_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ClearCache_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/clear-cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearCache_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClearCache_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ClearCache_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear the cache Purges the Cloudflare CDN cache for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearCache_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ClearCache_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/clear-cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearCache_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object CommitSiteStage (string fqdn)
        {
             ApiResponse<Object> localVarResponse = CommitSiteStageWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CommitSiteStageWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CommitSiteStage");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitSiteStage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommitSiteStageAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CommitSiteStageWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommitSiteStageWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CommitSiteStage");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitSiteStage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object CommitSiteStage_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = CommitSiteStage_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CommitSiteStage_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CommitSiteStage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitSiteStage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommitSiteStage_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CommitSiteStage_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit Stage Site Sync the wp-content and database from your staging site to your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommitSiteStage_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CommitSiteStage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitSiteStage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateEmail (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate))
        {
             ApiResponse<Object> localVarResponse = CreateEmailWithHttpInfo(fqdn, userEmailCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CreateEmailWithHttpInfo (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateEmail");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailCreate != null && userEmailCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateEmailAsync (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CreateEmailWithHttpInfoAsync(fqdn, userEmailCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateEmailWithHttpInfoAsync (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateEmail");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailCreate != null && userEmailCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateEmail_0 (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate))
        {
             ApiResponse<Object> localVarResponse = CreateEmail_0WithHttpInfo(fqdn, userEmailCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CreateEmail_0WithHttpInfo (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateEmail_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailCreate != null && userEmailCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateEmail_0Async (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CreateEmail_0WithHttpInfoAsync(fqdn, userEmailCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Email Create a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateEmail_0WithHttpInfoAsync (string fqdn, UserEmailCreate userEmailCreate = default(UserEmailCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateEmail_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailCreate != null && userEmailCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateExternalPath (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate))
        {
             ApiResponse<Object> localVarResponse = CreateExternalPathWithHttpInfo(fqdn, externalPathCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CreateExternalPathWithHttpInfo (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateExternalPath");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (externalPathCreate != null && externalPathCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalPathCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalPathCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExternalPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateExternalPathAsync (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CreateExternalPathWithHttpInfoAsync(fqdn, externalPathCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateExternalPathWithHttpInfoAsync (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateExternalPath");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (externalPathCreate != null && externalPathCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalPathCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalPathCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExternalPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateExternalPath_0 (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate))
        {
             ApiResponse<Object> localVarResponse = CreateExternalPath_0WithHttpInfo(fqdn, externalPathCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CreateExternalPath_0WithHttpInfo (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateExternalPath_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (externalPathCreate != null && externalPathCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalPathCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalPathCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExternalPath_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateExternalPath_0Async (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CreateExternalPath_0WithHttpInfoAsync(fqdn, externalPathCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create External Path Connect an external URL to your site on a subpath
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="externalPathCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateExternalPath_0WithHttpInfoAsync (string fqdn, ExternalPathCreate externalPathCreate = default(ExternalPathCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateExternalPath_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (externalPathCreate != null && externalPathCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalPathCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalPathCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExternalPath_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>SiteLive</returns>
        public SiteLive CreateSiteLive (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<SiteLive> localVarResponse = CreateSiteLiveWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of SiteLive</returns>
        public ApiResponse<SiteLive> CreateSiteLiveWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        public async System.Threading.Tasks.Task<SiteLive> CreateSiteLiveAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SiteLive> localVarResponse = await CreateSiteLiveWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteLive>> CreateSiteLiveWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>SiteLive</returns>
        public SiteLive CreateSiteLive_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<SiteLive> localVarResponse = CreateSiteLive_0WithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of SiteLive</returns>
        public ApiResponse<SiteLive> CreateSiteLive_0WithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        public async System.Threading.Tasks.Task<SiteLive> CreateSiteLive_0Async (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SiteLive> localVarResponse = await CreateSiteLive_0WithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a site Create a new site by providing your domain and your site&#39;s WordPress details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteLive>> CreateSiteLive_0WithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateSiteStage (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate))
        {
             ApiResponse<Object> localVarResponse = CreateSiteStageWithHttpInfo(fqdn, siteStageCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CreateSiteStageWithHttpInfo (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateSiteStage");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteStageCreate != null && siteStageCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteStageCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteStageCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteStage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateSiteStageAsync (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CreateSiteStageWithHttpInfoAsync(fqdn, siteStageCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSiteStageWithHttpInfoAsync (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateSiteStage");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteStageCreate != null && siteStageCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteStageCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteStageCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteStage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateSiteStage_0 (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate))
        {
             ApiResponse<Object> localVarResponse = CreateSiteStage_0WithHttpInfo(fqdn, siteStageCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CreateSiteStage_0WithHttpInfo (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateSiteStage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteStageCreate != null && siteStageCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteStageCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteStageCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteStage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateSiteStage_0Async (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CreateSiteStage_0WithHttpInfoAsync(fqdn, siteStageCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Staging site Create a staging site on which you can test changes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteStageCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSiteStage_0WithHttpInfoAsync (string fqdn, SiteStageCreate siteStageCreate = default(SiteStageCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateSiteStage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteStageCreate != null && siteStageCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteStageCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteStageCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSiteStage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>Tag</returns>
        public Tag CreateTag (string fqdn, TagCreate tagCreate = default(TagCreate))
        {
             ApiResponse<Tag> localVarResponse = CreateTagWithHttpInfo(fqdn, tagCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse<Tag> CreateTagWithHttpInfo (string fqdn, TagCreate tagCreate = default(TagCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateTag");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (tagCreate != null && tagCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tagCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tagCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> CreateTagAsync (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Tag> localVarResponse = await CreateTagWithHttpInfoAsync(fqdn, tagCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTagWithHttpInfoAsync (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateTag");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (tagCreate != null && tagCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tagCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tagCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>Tag</returns>
        public Tag CreateTag_0 (string fqdn, TagCreate tagCreate = default(TagCreate))
        {
             ApiResponse<Tag> localVarResponse = CreateTag_0WithHttpInfo(fqdn, tagCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse<Tag> CreateTag_0WithHttpInfo (string fqdn, TagCreate tagCreate = default(TagCreate))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateTag_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (tagCreate != null && tagCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tagCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tagCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTag_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> CreateTag_0Async (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Tag> localVarResponse = await CreateTag_0WithHttpInfoAsync(fqdn, tagCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create tag Create a tag for organizational purposes for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="tagCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTag_0WithHttpInfoAsync (string fqdn, TagCreate tagCreate = default(TagCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->CreateTag_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (tagCreate != null && tagCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tagCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tagCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTag_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteDnsRecord (string dnsId, string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteDnsRecordWithHttpInfo(dnsId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteDnsRecordWithHttpInfo (string dnsId, string fqdn)
        {
            // verify the required parameter 'dnsId' is set
            if (dnsId == null)
                throw new ApiException(400, "Missing required parameter 'dnsId' when calling SiteLiveApi->DeleteDnsRecord");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteDnsRecord");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/{dns_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dnsId != null) localVarPathParams.Add("dns_id", this.Configuration.ApiClient.ParameterToString(dnsId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDnsRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDnsRecordAsync (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteDnsRecordWithHttpInfoAsync(dnsId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDnsRecordWithHttpInfoAsync (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dnsId' is set
            if (dnsId == null)
                throw new ApiException(400, "Missing required parameter 'dnsId' when calling SiteLiveApi->DeleteDnsRecord");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteDnsRecord");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/{dns_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dnsId != null) localVarPathParams.Add("dns_id", this.Configuration.ApiClient.ParameterToString(dnsId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDnsRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteDnsRecord_0 (string dnsId, string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteDnsRecord_0WithHttpInfo(dnsId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteDnsRecord_0WithHttpInfo (string dnsId, string fqdn)
        {
            // verify the required parameter 'dnsId' is set
            if (dnsId == null)
                throw new ApiException(400, "Missing required parameter 'dnsId' when calling SiteLiveApi->DeleteDnsRecord_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteDnsRecord_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/{dns_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dnsId != null) localVarPathParams.Add("dns_id", this.Configuration.ApiClient.ParameterToString(dnsId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDnsRecord_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDnsRecord_0Async (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteDnsRecord_0WithHttpInfoAsync(dnsId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete DNS record Delete a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dnsId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDnsRecord_0WithHttpInfoAsync (string dnsId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dnsId' is set
            if (dnsId == null)
                throw new ApiException(400, "Missing required parameter 'dnsId' when calling SiteLiveApi->DeleteDnsRecord_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteDnsRecord_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/{dns_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dnsId != null) localVarPathParams.Add("dns_id", this.Configuration.ApiClient.ParameterToString(dnsId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDnsRecord_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>Object</returns>
        public Object DeleteEmail (string fqdn, string userEmailAddress)
        {
             ApiResponse<Object> localVarResponse = DeleteEmailWithHttpInfo(fqdn, userEmailAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteEmailWithHttpInfo (string fqdn, string userEmailAddress)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteEmail");
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->DeleteEmail");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteEmailAsync (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteEmailWithHttpInfoAsync(fqdn, userEmailAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailWithHttpInfoAsync (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteEmail");
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->DeleteEmail");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>Object</returns>
        public Object DeleteEmail_0 (string fqdn, string userEmailAddress)
        {
             ApiResponse<Object> localVarResponse = DeleteEmail_0WithHttpInfo(fqdn, userEmailAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteEmail_0WithHttpInfo (string fqdn, string userEmailAddress)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteEmail_0");
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->DeleteEmail_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteEmail_0Async (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteEmail_0WithHttpInfoAsync(fqdn, userEmailAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Email Delete a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="userEmailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmail_0WithHttpInfoAsync (string fqdn, string userEmailAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteEmail_0");
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->DeleteEmail_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteExternalPath (string externalPathId, string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteExternalPathWithHttpInfo(externalPathId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteExternalPathWithHttpInfo (string externalPathId, string fqdn)
        {
            // verify the required parameter 'externalPathId' is set
            if (externalPathId == null)
                throw new ApiException(400, "Missing required parameter 'externalPathId' when calling SiteLiveApi->DeleteExternalPath");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteExternalPath");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path/{external_path_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalPathId != null) localVarPathParams.Add("external_path_id", this.Configuration.ApiClient.ParameterToString(externalPathId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExternalPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteExternalPathAsync (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteExternalPathWithHttpInfoAsync(externalPathId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExternalPathWithHttpInfoAsync (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalPathId' is set
            if (externalPathId == null)
                throw new ApiException(400, "Missing required parameter 'externalPathId' when calling SiteLiveApi->DeleteExternalPath");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteExternalPath");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path/{external_path_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalPathId != null) localVarPathParams.Add("external_path_id", this.Configuration.ApiClient.ParameterToString(externalPathId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExternalPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteExternalPath_0 (string externalPathId, string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteExternalPath_0WithHttpInfo(externalPathId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteExternalPath_0WithHttpInfo (string externalPathId, string fqdn)
        {
            // verify the required parameter 'externalPathId' is set
            if (externalPathId == null)
                throw new ApiException(400, "Missing required parameter 'externalPathId' when calling SiteLiveApi->DeleteExternalPath_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteExternalPath_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path/{external_path_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalPathId != null) localVarPathParams.Add("external_path_id", this.Configuration.ApiClient.ParameterToString(externalPathId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExternalPath_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteExternalPath_0Async (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteExternalPath_0WithHttpInfoAsync(externalPathId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete External Path Delete the link between an external URL and your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalPathId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExternalPath_0WithHttpInfoAsync (string externalPathId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalPathId' is set
            if (externalPathId == null)
                throw new ApiException(400, "Missing required parameter 'externalPathId' when calling SiteLiveApi->DeleteExternalPath_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteExternalPath_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path/{external_path_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalPathId != null) localVarPathParams.Add("external_path_id", this.Configuration.ApiClient.ParameterToString(externalPathId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExternalPath_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteSiteLive (string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteSiteLiveWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteSiteLiveWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteSiteLiveAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteSiteLiveWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteLiveWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteSiteLive_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteSiteLive_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteSiteLive_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteSiteLive_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteSiteLive_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete your live site This permanently deletes your site, and its stage site if one exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteLive_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteSiteStage (string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteSiteStageWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteSiteStageWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteStage");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteStage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteSiteStageAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteSiteStageWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteStageWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteStage");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteStage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DeleteSiteStage_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = DeleteSiteStage_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteSiteStage_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteStage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteStage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteSiteStage_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteSiteStage_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Stage Site Delete your staging site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSiteStage_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteSiteStage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSiteStage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> DeleteTag (string tagId, string fqdn)
        {
             ApiResponse<List<Tag>> localVarResponse = DeleteTagWithHttpInfo(tagId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse<List<Tag>> DeleteTagWithHttpInfo (string tagId, string fqdn)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling SiteLiveApi->DeleteTag");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteTag");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tag_id", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> DeleteTagAsync (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Tag>> localVarResponse = await DeleteTagWithHttpInfoAsync(tagId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> DeleteTagWithHttpInfoAsync (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling SiteLiveApi->DeleteTag");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteTag");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tag_id", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> DeleteTag_0 (string tagId, string fqdn)
        {
             ApiResponse<List<Tag>> localVarResponse = DeleteTag_0WithHttpInfo(tagId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse<List<Tag>> DeleteTag_0WithHttpInfo (string tagId, string fqdn)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling SiteLiveApi->DeleteTag_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteTag_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tag_id", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTag_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> DeleteTag_0Async (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Tag>> localVarResponse = await DeleteTag_0WithHttpInfoAsync(tagId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a tag Get a tag by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> DeleteTag_0WithHttpInfoAsync (string tagId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling SiteLiveApi->DeleteTag_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DeleteTag_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tag_id", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTag_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DisableFirewall (string fqdn)
        {
             ApiResponse<Object> localVarResponse = DisableFirewallWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DisableFirewallWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DisableFirewall");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableFirewall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DisableFirewallAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DisableFirewallWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisableFirewallWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DisableFirewall");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableFirewall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object DisableFirewall_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = DisableFirewall_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DisableFirewall_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DisableFirewall_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableFirewall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DisableFirewall_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DisableFirewall_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable the firewall Disable wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisableFirewall_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->DisableFirewall_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableFirewall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object EnableFirewall (string fqdn)
        {
             ApiResponse<Object> localVarResponse = EnableFirewallWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> EnableFirewallWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->EnableFirewall");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableFirewall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EnableFirewallAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await EnableFirewallWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnableFirewallWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->EnableFirewall");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableFirewall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object EnableFirewall_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = EnableFirewall_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> EnableFirewall_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->EnableFirewall_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableFirewall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EnableFirewall_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await EnableFirewall_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable the firewall Enable the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnableFirewall_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->EnableFirewall_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableFirewall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetDnsRecords (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetDnsRecordsWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetDnsRecordsWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetDnsRecords");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDnsRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetDnsRecordsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetDnsRecordsWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDnsRecordsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetDnsRecords");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDnsRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetDnsRecords_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetDnsRecords_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetDnsRecords_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetDnsRecords_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDnsRecords_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetDnsRecords_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetDnsRecords_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get DNS records Get a nameserver configured site&#39;s DNS records
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDnsRecords_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetDnsRecords_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDnsRecords_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetEmails (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetEmailsWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetEmailsWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetEmails");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetEmailsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetEmailsWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEmailsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetEmails");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetEmails_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetEmails_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetEmails_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetEmails_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmails_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetEmails_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetEmails_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Emails Get all custom email accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEmails_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetEmails_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmails_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetExternalPaths (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetExternalPathsWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetExternalPathsWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetExternalPaths");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalPaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetExternalPathsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetExternalPathsWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetExternalPathsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetExternalPaths");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalPaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetExternalPaths_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetExternalPaths_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetExternalPaths_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetExternalPaths_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalPaths_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetExternalPaths_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetExternalPaths_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get External Paths Get details about your site&#39;s external path configs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetExternalPaths_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetExternalPaths_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/external-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalPaths_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>Object</returns>
        public Object GetFilesAtPoint (string fqdn, DateTime restorePoint)
        {
             ApiResponse<Object> localVarResponse = GetFilesAtPointWithHttpInfo(fqdn, restorePoint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetFilesAtPointWithHttpInfo (string fqdn, DateTime restorePoint)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetFilesAtPoint");
            // verify the required parameter 'restorePoint' is set
            if (restorePoint == null)
                throw new ApiException(400, "Missing required parameter 'restorePoint' when calling SiteLiveApi->GetFilesAtPoint");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (restorePoint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restore_point", restorePoint)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesAtPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetFilesAtPointAsync (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetFilesAtPointWithHttpInfoAsync(fqdn, restorePoint, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFilesAtPointWithHttpInfoAsync (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetFilesAtPoint");
            // verify the required parameter 'restorePoint' is set
            if (restorePoint == null)
                throw new ApiException(400, "Missing required parameter 'restorePoint' when calling SiteLiveApi->GetFilesAtPoint");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (restorePoint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restore_point", restorePoint)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesAtPoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>Object</returns>
        public Object GetFilesAtPoint_0 (string fqdn, DateTime restorePoint)
        {
             ApiResponse<Object> localVarResponse = GetFilesAtPoint_0WithHttpInfo(fqdn, restorePoint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetFilesAtPoint_0WithHttpInfo (string fqdn, DateTime restorePoint)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetFilesAtPoint_0");
            // verify the required parameter 'restorePoint' is set
            if (restorePoint == null)
                throw new ApiException(400, "Missing required parameter 'restorePoint' when calling SiteLiveApi->GetFilesAtPoint_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (restorePoint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restore_point", restorePoint)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesAtPoint_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetFilesAtPoint_0Async (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetFilesAtPoint_0WithHttpInfoAsync(fqdn, restorePoint, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PIT Files Get a list of wp-content files at a point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="restorePoint"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFilesAtPoint_0WithHttpInfoAsync (string fqdn, DateTime restorePoint, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetFilesAtPoint_0");
            // verify the required parameter 'restorePoint' is set
            if (restorePoint == null)
                throw new ApiException(400, "Missing required parameter 'restorePoint' when calling SiteLiveApi->GetFilesAtPoint_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (restorePoint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "restore_point", restorePoint)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesAtPoint_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetMailDns (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetMailDnsWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetMailDnsWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetMailDns");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMailDns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetMailDnsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetMailDnsWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMailDnsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetMailDns");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMailDns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetMailDns_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetMailDns_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetMailDns_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetMailDns_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMailDns_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetMailDns_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetMailDns_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Required mail DNS records Get the required records for our custom email service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMailDns_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetMailDns_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMailDns_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetPitRestore (string pitRestoreId, string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetPitRestoreWithHttpInfo(pitRestoreId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetPitRestoreWithHttpInfo (string pitRestoreId, string fqdn)
        {
            // verify the required parameter 'pitRestoreId' is set
            if (pitRestoreId == null)
                throw new ApiException(400, "Missing required parameter 'pitRestoreId' when calling SiteLiveApi->GetPitRestore");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestore");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/{pit_restore_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pitRestoreId != null) localVarPathParams.Add("pit_restore_id", this.Configuration.ApiClient.ParameterToString(pitRestoreId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPitRestoreAsync (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetPitRestoreWithHttpInfoAsync(pitRestoreId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestoreWithHttpInfoAsync (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pitRestoreId' is set
            if (pitRestoreId == null)
                throw new ApiException(400, "Missing required parameter 'pitRestoreId' when calling SiteLiveApi->GetPitRestore");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestore");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/{pit_restore_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pitRestoreId != null) localVarPathParams.Add("pit_restore_id", this.Configuration.ApiClient.ParameterToString(pitRestoreId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetPitRestore_0 (string pitRestoreId, string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetPitRestore_0WithHttpInfo(pitRestoreId, fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetPitRestore_0WithHttpInfo (string pitRestoreId, string fqdn)
        {
            // verify the required parameter 'pitRestoreId' is set
            if (pitRestoreId == null)
                throw new ApiException(400, "Missing required parameter 'pitRestoreId' when calling SiteLiveApi->GetPitRestore_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestore_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/{pit_restore_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pitRestoreId != null) localVarPathParams.Add("pit_restore_id", this.Configuration.ApiClient.ParameterToString(pitRestoreId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestore_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPitRestore_0Async (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetPitRestore_0WithHttpInfoAsync(pitRestoreId, fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PIT Restore Get the results of a site&#39;s restore to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pitRestoreId"></param>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestore_0WithHttpInfoAsync (string pitRestoreId, string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pitRestoreId' is set
            if (pitRestoreId == null)
                throw new ApiException(400, "Missing required parameter 'pitRestoreId' when calling SiteLiveApi->GetPitRestore_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestore_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/{pit_restore_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pitRestoreId != null) localVarPathParams.Add("pit_restore_id", this.Configuration.ApiClient.ParameterToString(pitRestoreId)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestore_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetPitRestores (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetPitRestoresWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetPitRestoresWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestores");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPitRestoresAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetPitRestoresWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestoresWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestores");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object GetPitRestores_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = GetPitRestores_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetPitRestores_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestores_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestores_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPitRestores_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetPitRestores_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PIT Restores Get all the results of a site&#39;s restores to a previous point in time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPitRestores_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetPitRestores_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPitRestores_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>SiteLive</returns>
        public SiteLive GetSiteLive (string fqdn)
        {
             ApiResponse<SiteLive> localVarResponse = GetSiteLiveWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        public ApiResponse<SiteLive> GetSiteLiveWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        public async System.Threading.Tasks.Task<SiteLive> GetSiteLiveAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SiteLive> localVarResponse = await GetSiteLiveWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteLive>> GetSiteLiveWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>SiteLive</returns>
        public SiteLive GetSiteLive_0 (string fqdn)
        {
             ApiResponse<SiteLive> localVarResponse = GetSiteLive_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        public ApiResponse<SiteLive> GetSiteLive_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        public async System.Threading.Tasks.Task<SiteLive> GetSiteLive_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SiteLive> localVarResponse = await GetSiteLive_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your live site Get details about your live site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteLive>> GetSiteLive_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>Object</returns>
        public Object GetSitePlanUsage (string fqdn, DateTime start, DateTime end)
        {
             ApiResponse<Object> localVarResponse = GetSitePlanUsageWithHttpInfo(fqdn, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetSitePlanUsageWithHttpInfo (string fqdn, DateTime start, DateTime end)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSitePlanUsage");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SiteLiveApi->GetSitePlanUsage");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling SiteLiveApi->GetSitePlanUsage");

            var localVarPath = "/api/v1/site_live/{fqdn}/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitePlanUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSitePlanUsageAsync (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetSitePlanUsageWithHttpInfoAsync(fqdn, start, end, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSitePlanUsageWithHttpInfoAsync (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSitePlanUsage");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SiteLiveApi->GetSitePlanUsage");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling SiteLiveApi->GetSitePlanUsage");

            var localVarPath = "/api/v1/site_live/{fqdn}/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitePlanUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>Object</returns>
        public Object GetSitePlanUsage_0 (string fqdn, DateTime start, DateTime end)
        {
             ApiResponse<Object> localVarResponse = GetSitePlanUsage_0WithHttpInfo(fqdn, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetSitePlanUsage_0WithHttpInfo (string fqdn, DateTime start, DateTime end)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSitePlanUsage_0");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SiteLiveApi->GetSitePlanUsage_0");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling SiteLiveApi->GetSitePlanUsage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitePlanUsage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSitePlanUsage_0Async (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetSitePlanUsage_0WithHttpInfoAsync(fqdn, start, end, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Site Plan Usage Get your visits and storage for a site at a given interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSitePlanUsage_0WithHttpInfoAsync (string fqdn, DateTime start, DateTime end, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetSitePlanUsage_0");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling SiteLiveApi->GetSitePlanUsage_0");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling SiteLiveApi->GetSitePlanUsage_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitePlanUsage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SiteLive&gt;</returns>
        public List<SiteLive> GetSitesLive ()
        {
             ApiResponse<List<SiteLive>> localVarResponse = GetSitesLiveWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SiteLive&gt;</returns>
        public ApiResponse<List<SiteLive>> GetSitesLiveWithHttpInfo ()
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitesLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SiteLive>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SiteLive>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SiteLive>)));
        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SiteLive&gt;</returns>
        public async System.Threading.Tasks.Task<List<SiteLive>> GetSitesLiveAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<SiteLive>> localVarResponse = await GetSitesLiveWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SiteLive&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SiteLive>>> GetSitesLiveWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitesLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SiteLive>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SiteLive>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SiteLive>)));
        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SiteLive&gt;</returns>
        public List<SiteLive> GetSitesLive_0 ()
        {
             ApiResponse<List<SiteLive>> localVarResponse = GetSitesLive_0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SiteLive&gt;</returns>
        public ApiResponse<List<SiteLive>> GetSitesLive_0WithHttpInfo ()
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitesLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SiteLive>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SiteLive>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SiteLive>)));
        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SiteLive&gt;</returns>
        public async System.Threading.Tasks.Task<List<SiteLive>> GetSitesLive_0Async (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<SiteLive>> localVarResponse = await GetSitesLive_0WithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your sites Get details about all of your live sites
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SiteLive&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SiteLive>>> GetSitesLive_0WithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/site_live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitesLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SiteLive>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SiteLive>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SiteLive>)));
        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> GetTags (string fqdn)
        {
             ApiResponse<List<Tag>> localVarResponse = GetTagsWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse<List<Tag>> GetTagsWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetTags");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> GetTagsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Tag>> localVarResponse = await GetTagsWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> GetTagsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetTags");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> GetTags_0 (string fqdn)
        {
             ApiResponse<List<Tag>> localVarResponse = GetTags_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse<List<Tag>> GetTags_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetTags_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> GetTags_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Tag>> localVarResponse = await GetTags_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags Get all the tags for your site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> GetTags_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->GetTags_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>Object</returns>
        public Object ModifyFirewall (string fqdn, string ipAddress, string addOrDel = default(string))
        {
             ApiResponse<Object> localVarResponse = ModifyFirewallWithHttpInfo(fqdn, ipAddress, addOrDel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ModifyFirewallWithHttpInfo (string fqdn, string ipAddress, string addOrDel = default(string))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ModifyFirewall");
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling SiteLiveApi->ModifyFirewall");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (addOrDel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_or_del", addOrDel)); // query parameter
            if (ipAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ip_address", ipAddress)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyFirewall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModifyFirewallAsync (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ModifyFirewallWithHttpInfoAsync(fqdn, ipAddress, addOrDel, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ModifyFirewallWithHttpInfoAsync (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ModifyFirewall");
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling SiteLiveApi->ModifyFirewall");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (addOrDel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_or_del", addOrDel)); // query parameter
            if (ipAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ip_address", ipAddress)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyFirewall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>Object</returns>
        public Object ModifyFirewall_0 (string fqdn, string ipAddress, string addOrDel = default(string))
        {
             ApiResponse<Object> localVarResponse = ModifyFirewall_0WithHttpInfo(fqdn, ipAddress, addOrDel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ModifyFirewall_0WithHttpInfo (string fqdn, string ipAddress, string addOrDel = default(string))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ModifyFirewall_0");
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling SiteLiveApi->ModifyFirewall_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (addOrDel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_or_del", addOrDel)); // query parameter
            if (ipAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ip_address", ipAddress)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyFirewall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModifyFirewall_0Async (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ModifyFirewall_0WithHttpInfoAsync(fqdn, ipAddress, addOrDel, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the firewall Add/Delete an IP from the wp-login firewall
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="ipAddress"></param>
        /// <param name="addOrDel"> (optional, default to &quot;add&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ModifyFirewall_0WithHttpInfoAsync (string fqdn, string ipAddress, string addOrDel = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ModifyFirewall_0");
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling SiteLiveApi->ModifyFirewall_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/firewall";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (addOrDel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_or_del", addOrDel)); // query parameter
            if (ipAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ip_address", ipAddress)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyFirewall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>Object</returns>
        public Object RestoreSite (string fqdn, PITRestoreCreate pITRestoreCreate)
        {
             ApiResponse<Object> localVarResponse = RestoreSiteWithHttpInfo(fqdn, pITRestoreCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RestoreSiteWithHttpInfo (string fqdn, PITRestoreCreate pITRestoreCreate)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->RestoreSite");
            // verify the required parameter 'pITRestoreCreate' is set
            if (pITRestoreCreate == null)
                throw new ApiException(400, "Missing required parameter 'pITRestoreCreate' when calling SiteLiveApi->RestoreSite");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (pITRestoreCreate != null && pITRestoreCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pITRestoreCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pITRestoreCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreSite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RestoreSiteAsync (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await RestoreSiteWithHttpInfoAsync(fqdn, pITRestoreCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RestoreSiteWithHttpInfoAsync (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->RestoreSite");
            // verify the required parameter 'pITRestoreCreate' is set
            if (pITRestoreCreate == null)
                throw new ApiException(400, "Missing required parameter 'pITRestoreCreate' when calling SiteLiveApi->RestoreSite");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (pITRestoreCreate != null && pITRestoreCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pITRestoreCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pITRestoreCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreSite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>Object</returns>
        public Object RestoreSite_0 (string fqdn, PITRestoreCreate pITRestoreCreate)
        {
             ApiResponse<Object> localVarResponse = RestoreSite_0WithHttpInfo(fqdn, pITRestoreCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RestoreSite_0WithHttpInfo (string fqdn, PITRestoreCreate pITRestoreCreate)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->RestoreSite_0");
            // verify the required parameter 'pITRestoreCreate' is set
            if (pITRestoreCreate == null)
                throw new ApiException(400, "Missing required parameter 'pITRestoreCreate' when calling SiteLiveApi->RestoreSite_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (pITRestoreCreate != null && pITRestoreCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pITRestoreCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pITRestoreCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreSite_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RestoreSite_0Async (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await RestoreSite_0WithHttpInfoAsync(fqdn, pITRestoreCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create PIT Restore Restore your site to a previous point in time, down to the minute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="pITRestoreCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RestoreSite_0WithHttpInfoAsync (string fqdn, PITRestoreCreate pITRestoreCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->RestoreSite_0");
            // verify the required parameter 'pITRestoreCreate' is set
            if (pITRestoreCreate == null)
                throw new ApiException(400, "Missing required parameter 'pITRestoreCreate' when calling SiteLiveApi->RestoreSite_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/pit-restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (pITRestoreCreate != null && pITRestoreCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pITRestoreCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pITRestoreCreate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreSite_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object ShellCmdSiteLive (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?))
        {
             ApiResponse<Object> localVarResponse = ShellCmdSiteLiveWithHttpInfo(fqdn, cmd, cwd, autoTrackDir, stage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ShellCmdSiteLiveWithHttpInfo (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ShellCmdSiteLive");
            // verify the required parameter 'cmd' is set
            if (cmd == null)
                throw new ApiException(400, "Missing required parameter 'cmd' when calling SiteLiveApi->ShellCmdSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}/cmd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (cmd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cmd", cmd)); // query parameter
            if (cwd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cwd", cwd)); // query parameter
            if (autoTrackDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_track_dir", autoTrackDir)); // query parameter
            if (stage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stage", stage)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShellCmdSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ShellCmdSiteLiveAsync (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ShellCmdSiteLiveWithHttpInfoAsync(fqdn, cmd, cwd, autoTrackDir, stage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShellCmdSiteLiveWithHttpInfoAsync (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ShellCmdSiteLive");
            // verify the required parameter 'cmd' is set
            if (cmd == null)
                throw new ApiException(400, "Missing required parameter 'cmd' when calling SiteLiveApi->ShellCmdSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}/cmd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (cmd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cmd", cmd)); // query parameter
            if (cwd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cwd", cwd)); // query parameter
            if (autoTrackDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_track_dir", autoTrackDir)); // query parameter
            if (stage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stage", stage)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShellCmdSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object ShellCmdSiteLive_0 (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?))
        {
             ApiResponse<Object> localVarResponse = ShellCmdSiteLive_0WithHttpInfo(fqdn, cmd, cwd, autoTrackDir, stage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ShellCmdSiteLive_0WithHttpInfo (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ShellCmdSiteLive_0");
            // verify the required parameter 'cmd' is set
            if (cmd == null)
                throw new ApiException(400, "Missing required parameter 'cmd' when calling SiteLiveApi->ShellCmdSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/cmd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (cmd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cmd", cmd)); // query parameter
            if (cwd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cwd", cwd)); // query parameter
            if (autoTrackDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_track_dir", autoTrackDir)); // query parameter
            if (stage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stage", stage)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShellCmdSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ShellCmdSiteLive_0Async (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ShellCmdSiteLive_0WithHttpInfoAsync(fqdn, cmd, cwd, autoTrackDir, stage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute shell command Send a bash shell command to your site, such as a WP-CLI command
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cmd"></param>
        /// <param name="cwd"> (optional, default to &quot;/bitnami/wordpress/wp-content&quot;)</param>
        /// <param name="autoTrackDir"> (optional, default to false)</param>
        /// <param name="stage"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShellCmdSiteLive_0WithHttpInfoAsync (string fqdn, string cmd, string cwd = default(string), bool? autoTrackDir = default(bool?), bool? stage = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ShellCmdSiteLive_0");
            // verify the required parameter 'cmd' is set
            if (cmd == null)
                throw new ApiException(400, "Missing required parameter 'cmd' when calling SiteLiveApi->ShellCmdSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/cmd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (cmd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cmd", cmd)); // query parameter
            if (cwd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cwd", cwd)); // query parameter
            if (autoTrackDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_track_dir", autoTrackDir)); // query parameter
            if (stage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stage", stage)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShellCmdSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>Object</returns>
        public Object UpdateDnsRecord (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?))
        {
             ApiResponse<Object> localVarResponse = UpdateDnsRecordWithHttpInfo(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UpdateDnsRecordWithHttpInfo (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateDnsRecord");
            // verify the required parameter 'dnsType' is set
            if (dnsType == null)
                throw new ApiException(400, "Missing required parameter 'dnsType' when calling SiteLiveApi->UpdateDnsRecord");
            // verify the required parameter 'dnsHostname' is set
            if (dnsHostname == null)
                throw new ApiException(400, "Missing required parameter 'dnsHostname' when calling SiteLiveApi->UpdateDnsRecord");
            // verify the required parameter 'dnsContent' is set
            if (dnsContent == null)
                throw new ApiException(400, "Missing required parameter 'dnsContent' when calling SiteLiveApi->UpdateDnsRecord");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (dnsType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_type", dnsType)); // query parameter
            if (dnsHostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_hostname", dnsHostname)); // query parameter
            if (dnsContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_content", dnsContent)); // query parameter
            if (dnsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_id", dnsId)); // query parameter
            if (dnsPriority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_priority", dnsPriority)); // query parameter
            if (dnsTtl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_ttl", dnsTtl)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDnsRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateDnsRecordAsync (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await UpdateDnsRecordWithHttpInfoAsync(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDnsRecordWithHttpInfoAsync (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateDnsRecord");
            // verify the required parameter 'dnsType' is set
            if (dnsType == null)
                throw new ApiException(400, "Missing required parameter 'dnsType' when calling SiteLiveApi->UpdateDnsRecord");
            // verify the required parameter 'dnsHostname' is set
            if (dnsHostname == null)
                throw new ApiException(400, "Missing required parameter 'dnsHostname' when calling SiteLiveApi->UpdateDnsRecord");
            // verify the required parameter 'dnsContent' is set
            if (dnsContent == null)
                throw new ApiException(400, "Missing required parameter 'dnsContent' when calling SiteLiveApi->UpdateDnsRecord");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (dnsType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_type", dnsType)); // query parameter
            if (dnsHostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_hostname", dnsHostname)); // query parameter
            if (dnsContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_content", dnsContent)); // query parameter
            if (dnsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_id", dnsId)); // query parameter
            if (dnsPriority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_priority", dnsPriority)); // query parameter
            if (dnsTtl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_ttl", dnsTtl)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDnsRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>Object</returns>
        public Object UpdateDnsRecord_0 (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?))
        {
             ApiResponse<Object> localVarResponse = UpdateDnsRecord_0WithHttpInfo(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UpdateDnsRecord_0WithHttpInfo (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateDnsRecord_0");
            // verify the required parameter 'dnsType' is set
            if (dnsType == null)
                throw new ApiException(400, "Missing required parameter 'dnsType' when calling SiteLiveApi->UpdateDnsRecord_0");
            // verify the required parameter 'dnsHostname' is set
            if (dnsHostname == null)
                throw new ApiException(400, "Missing required parameter 'dnsHostname' when calling SiteLiveApi->UpdateDnsRecord_0");
            // verify the required parameter 'dnsContent' is set
            if (dnsContent == null)
                throw new ApiException(400, "Missing required parameter 'dnsContent' when calling SiteLiveApi->UpdateDnsRecord_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (dnsType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_type", dnsType)); // query parameter
            if (dnsHostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_hostname", dnsHostname)); // query parameter
            if (dnsContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_content", dnsContent)); // query parameter
            if (dnsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_id", dnsId)); // query parameter
            if (dnsPriority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_priority", dnsPriority)); // query parameter
            if (dnsTtl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_ttl", dnsTtl)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDnsRecord_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateDnsRecord_0Async (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await UpdateDnsRecord_0WithHttpInfoAsync(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update DNS record Update a DNS record on your Nameserver configured site
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="dnsType"></param>
        /// <param name="dnsHostname"></param>
        /// <param name="dnsContent"></param>
        /// <param name="dnsId"> (optional)</param>
        /// <param name="dnsPriority"> (optional, default to 0)</param>
        /// <param name="dnsTtl"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDnsRecord_0WithHttpInfoAsync (string fqdn, string dnsType, string dnsHostname, string dnsContent, string dnsId = default(string), int? dnsPriority = default(int?), int? dnsTtl = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateDnsRecord_0");
            // verify the required parameter 'dnsType' is set
            if (dnsType == null)
                throw new ApiException(400, "Missing required parameter 'dnsType' when calling SiteLiveApi->UpdateDnsRecord_0");
            // verify the required parameter 'dnsHostname' is set
            if (dnsHostname == null)
                throw new ApiException(400, "Missing required parameter 'dnsHostname' when calling SiteLiveApi->UpdateDnsRecord_0");
            // verify the required parameter 'dnsContent' is set
            if (dnsContent == null)
                throw new ApiException(400, "Missing required parameter 'dnsContent' when calling SiteLiveApi->UpdateDnsRecord_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (dnsType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_type", dnsType)); // query parameter
            if (dnsHostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_hostname", dnsHostname)); // query parameter
            if (dnsContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_content", dnsContent)); // query parameter
            if (dnsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_id", dnsId)); // query parameter
            if (dnsPriority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_priority", dnsPriority)); // query parameter
            if (dnsTtl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dns_ttl", dnsTtl)); // query parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDnsRecord_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateEmail (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate))
        {
             ApiResponse<Object> localVarResponse = UpdateEmailWithHttpInfo(userEmailAddress, fqdn, userEmailUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UpdateEmailWithHttpInfo (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate))
        {
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->UpdateEmail");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateEmail");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailUpdate != null && userEmailUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateEmailAsync (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await UpdateEmailWithHttpInfoAsync(userEmailAddress, fqdn, userEmailUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmailWithHttpInfoAsync (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->UpdateEmail");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateEmail");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailUpdate != null && userEmailUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateEmail_0 (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate))
        {
             ApiResponse<Object> localVarResponse = UpdateEmail_0WithHttpInfo(userEmailAddress, fqdn, userEmailUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UpdateEmail_0WithHttpInfo (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate))
        {
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->UpdateEmail_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateEmail_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailUpdate != null && userEmailUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateEmail_0Async (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await UpdateEmail_0WithHttpInfoAsync(userEmailAddress, fqdn, userEmailUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Email Update a custom email account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEmailAddress"></param>
        /// <param name="fqdn"></param>
        /// <param name="userEmailUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmail_0WithHttpInfoAsync (string userEmailAddress, string fqdn, UserEmailUpdate userEmailUpdate = default(UserEmailUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userEmailAddress' is set
            if (userEmailAddress == null)
                throw new ApiException(400, "Missing required parameter 'userEmailAddress' when calling SiteLiveApi->UpdateEmail_0");
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateEmail_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEmailAddress != null) localVarPathParams.Add("user_email_address", this.Configuration.ApiClient.ParameterToString(userEmailAddress)); // path parameter
            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (userEmailUpdate != null && userEmailUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEmailUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEmailUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>SiteLive</returns>
        public SiteLive UpdateSiteLive (string fqdn, SiteLiveUpdate siteLiveUpdate)
        {
             ApiResponse<SiteLive> localVarResponse = UpdateSiteLiveWithHttpInfo(fqdn, siteLiveUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        public ApiResponse<SiteLive> UpdateSiteLiveWithHttpInfo (string fqdn, SiteLiveUpdate siteLiveUpdate)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateSiteLive");
            // verify the required parameter 'siteLiveUpdate' is set
            if (siteLiveUpdate == null)
                throw new ApiException(400, "Missing required parameter 'siteLiveUpdate' when calling SiteLiveApi->UpdateSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteLiveUpdate != null && siteLiveUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteLiveUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteLiveUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        public async System.Threading.Tasks.Task<SiteLive> UpdateSiteLiveAsync (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SiteLive> localVarResponse = await UpdateSiteLiveWithHttpInfoAsync(fqdn, siteLiveUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteLive>> UpdateSiteLiveWithHttpInfoAsync (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateSiteLive");
            // verify the required parameter 'siteLiveUpdate' is set
            if (siteLiveUpdate == null)
                throw new ApiException(400, "Missing required parameter 'siteLiveUpdate' when calling SiteLiveApi->UpdateSiteLive");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteLiveUpdate != null && siteLiveUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteLiveUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteLiveUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSiteLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>SiteLive</returns>
        public SiteLive UpdateSiteLive_0 (string fqdn, SiteLiveUpdate siteLiveUpdate)
        {
             ApiResponse<SiteLive> localVarResponse = UpdateSiteLive_0WithHttpInfo(fqdn, siteLiveUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <returns>ApiResponse of SiteLive</returns>
        public ApiResponse<SiteLive> UpdateSiteLive_0WithHttpInfo (string fqdn, SiteLiveUpdate siteLiveUpdate)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateSiteLive_0");
            // verify the required parameter 'siteLiveUpdate' is set
            if (siteLiveUpdate == null)
                throw new ApiException(400, "Missing required parameter 'siteLiveUpdate' when calling SiteLiveApi->UpdateSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteLiveUpdate != null && siteLiveUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteLiveUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteLiveUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SiteLive</returns>
        public async System.Threading.Tasks.Task<SiteLive> UpdateSiteLive_0Async (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SiteLive> localVarResponse = await UpdateSiteLive_0WithHttpInfoAsync(fqdn, siteLiveUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a site Update a site&#39;s details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="siteLiveUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SiteLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SiteLive>> UpdateSiteLive_0WithHttpInfoAsync (string fqdn, SiteLiveUpdate siteLiveUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->UpdateSiteLive_0");
            // verify the required parameter 'siteLiveUpdate' is set
            if (siteLiveUpdate == null)
                throw new ApiException(400, "Missing required parameter 'siteLiveUpdate' when calling SiteLiveApi->UpdateSiteLive_0");

            var localVarPath = "/api/v1/site_live/{fqdn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter
            if (siteLiveUpdate != null && siteLiveUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(siteLiveUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = siteLiveUpdate; // byte array
            }

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSiteLive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SiteLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SiteLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SiteLive)));
        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object ValidateMxRecords (string fqdn)
        {
             ApiResponse<Object> localVarResponse = ValidateMxRecordsWithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ValidateMxRecordsWithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ValidateMxRecords");

            var localVarPath = "/api/v1/site_live/{fqdn}/validate_mx_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMxRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ValidateMxRecordsAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ValidateMxRecordsWithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateMxRecordsWithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ValidateMxRecords");

            var localVarPath = "/api/v1/site_live/{fqdn}/validate_mx_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMxRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>Object</returns>
        public Object ValidateMxRecords_0 (string fqdn)
        {
             ApiResponse<Object> localVarResponse = ValidateMxRecords_0WithHttpInfo(fqdn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ValidateMxRecords_0WithHttpInfo (string fqdn)
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ValidateMxRecords_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/validate_mx_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMxRecords_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ValidateMxRecords_0Async (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ValidateMxRecords_0WithHttpInfoAsync(fqdn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MX Validation Check if your mail related DNS records are set up correctly
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fqdn"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateMxRecords_0WithHttpInfoAsync (string fqdn, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fqdn' is set
            if (fqdn == null)
                throw new ApiException(400, "Missing required parameter 'fqdn' when calling SiteLiveApi->ValidateMxRecords_0");

            var localVarPath = "/api/v1/site_live/{fqdn}/validate_mx_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fqdn != null) localVarPathParams.Add("fqdn", this.Configuration.ApiClient.ParameterToString(fqdn)); // path parameter

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMxRecords_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
