/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SiteLiveApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SiteLiveApiTests
    {
        private SiteLiveApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SiteLiveApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SiteLiveApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SiteLiveApi
            //Assert.IsInstanceOf(typeof(SiteLiveApi), instance);
        }

        
        /// <summary>
        /// Test AddMailDns
        /// </summary>
        [Test]
        public void AddMailDnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.AddMailDns(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test AddMailDns_0
        /// </summary>
        [Test]
        public void AddMailDns_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.AddMailDns_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ChangeDevMode
        /// </summary>
        [Test]
        public void ChangeDevModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string value = null;
            //var response = instance.ChangeDevMode(fqdn, value);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ChangeDevMode_0
        /// </summary>
        [Test]
        public void ChangeDevMode_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string value = null;
            //var response = instance.ChangeDevMode_0(fqdn, value);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ClearCache
        /// </summary>
        [Test]
        public void ClearCacheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.ClearCache(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ClearCache_0
        /// </summary>
        [Test]
        public void ClearCache_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.ClearCache_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CommitSiteStage
        /// </summary>
        [Test]
        public void CommitSiteStageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.CommitSiteStage(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CommitSiteStage_0
        /// </summary>
        [Test]
        public void CommitSiteStage_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.CommitSiteStage_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateEmail
        /// </summary>
        [Test]
        public void CreateEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //UserEmailCreate userEmailCreate = null;
            //var response = instance.CreateEmail(fqdn, userEmailCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateEmail_0
        /// </summary>
        [Test]
        public void CreateEmail_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //UserEmailCreate userEmailCreate = null;
            //var response = instance.CreateEmail_0(fqdn, userEmailCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateExternalPath
        /// </summary>
        [Test]
        public void CreateExternalPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //ExternalPathCreate externalPathCreate = null;
            //var response = instance.CreateExternalPath(fqdn, externalPathCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateExternalPath_0
        /// </summary>
        [Test]
        public void CreateExternalPath_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //ExternalPathCreate externalPathCreate = null;
            //var response = instance.CreateExternalPath_0(fqdn, externalPathCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateSiteLive
        /// </summary>
        [Test]
        public void CreateSiteLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.CreateSiteLive(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(SiteLive), response, "response is SiteLive");
        }
        
        /// <summary>
        /// Test CreateSiteLive_0
        /// </summary>
        [Test]
        public void CreateSiteLive_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.CreateSiteLive_0(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(SiteLive), response, "response is SiteLive");
        }
        
        /// <summary>
        /// Test CreateSiteStage
        /// </summary>
        [Test]
        public void CreateSiteStageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //SiteStageCreate siteStageCreate = null;
            //var response = instance.CreateSiteStage(fqdn, siteStageCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateSiteStage_0
        /// </summary>
        [Test]
        public void CreateSiteStage_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //SiteStageCreate siteStageCreate = null;
            //var response = instance.CreateSiteStage_0(fqdn, siteStageCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateTag
        /// </summary>
        [Test]
        public void CreateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //TagCreate tagCreate = null;
            //var response = instance.CreateTag(fqdn, tagCreate);
            //Assert.IsInstanceOf(typeof(Tag), response, "response is Tag");
        }
        
        /// <summary>
        /// Test CreateTag_0
        /// </summary>
        [Test]
        public void CreateTag_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //TagCreate tagCreate = null;
            //var response = instance.CreateTag_0(fqdn, tagCreate);
            //Assert.IsInstanceOf(typeof(Tag), response, "response is Tag");
        }
        
        /// <summary>
        /// Test DeleteDnsRecord
        /// </summary>
        [Test]
        public void DeleteDnsRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dnsId = null;
            //string fqdn = null;
            //var response = instance.DeleteDnsRecord(dnsId, fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteDnsRecord_0
        /// </summary>
        [Test]
        public void DeleteDnsRecord_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dnsId = null;
            //string fqdn = null;
            //var response = instance.DeleteDnsRecord_0(dnsId, fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteEmail
        /// </summary>
        [Test]
        public void DeleteEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string userEmailAddress = null;
            //var response = instance.DeleteEmail(fqdn, userEmailAddress);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteEmail_0
        /// </summary>
        [Test]
        public void DeleteEmail_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string userEmailAddress = null;
            //var response = instance.DeleteEmail_0(fqdn, userEmailAddress);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteExternalPath
        /// </summary>
        [Test]
        public void DeleteExternalPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalPathId = null;
            //string fqdn = null;
            //var response = instance.DeleteExternalPath(externalPathId, fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteExternalPath_0
        /// </summary>
        [Test]
        public void DeleteExternalPath_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalPathId = null;
            //string fqdn = null;
            //var response = instance.DeleteExternalPath_0(externalPathId, fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteSiteLive
        /// </summary>
        [Test]
        public void DeleteSiteLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.DeleteSiteLive(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteSiteLive_0
        /// </summary>
        [Test]
        public void DeleteSiteLive_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.DeleteSiteLive_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteSiteStage
        /// </summary>
        [Test]
        public void DeleteSiteStageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.DeleteSiteStage(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteSiteStage_0
        /// </summary>
        [Test]
        public void DeleteSiteStage_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.DeleteSiteStage_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteTag
        /// </summary>
        [Test]
        public void DeleteTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagId = null;
            //string fqdn = null;
            //var response = instance.DeleteTag(tagId, fqdn);
            //Assert.IsInstanceOf(typeof(List<Tag>), response, "response is List<Tag>");
        }
        
        /// <summary>
        /// Test DeleteTag_0
        /// </summary>
        [Test]
        public void DeleteTag_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagId = null;
            //string fqdn = null;
            //var response = instance.DeleteTag_0(tagId, fqdn);
            //Assert.IsInstanceOf(typeof(List<Tag>), response, "response is List<Tag>");
        }
        
        /// <summary>
        /// Test DisableFirewall
        /// </summary>
        [Test]
        public void DisableFirewallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.DisableFirewall(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DisableFirewall_0
        /// </summary>
        [Test]
        public void DisableFirewall_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.DisableFirewall_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test EnableFirewall
        /// </summary>
        [Test]
        public void EnableFirewallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.EnableFirewall(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test EnableFirewall_0
        /// </summary>
        [Test]
        public void EnableFirewall_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.EnableFirewall_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetDnsRecords
        /// </summary>
        [Test]
        public void GetDnsRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetDnsRecords(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetDnsRecords_0
        /// </summary>
        [Test]
        public void GetDnsRecords_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetDnsRecords_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetEmails
        /// </summary>
        [Test]
        public void GetEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetEmails(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetEmails_0
        /// </summary>
        [Test]
        public void GetEmails_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetEmails_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetExternalPaths
        /// </summary>
        [Test]
        public void GetExternalPathsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetExternalPaths(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetExternalPaths_0
        /// </summary>
        [Test]
        public void GetExternalPaths_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetExternalPaths_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFilesAtPoint
        /// </summary>
        [Test]
        public void GetFilesAtPointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //DateTime restorePoint = null;
            //var response = instance.GetFilesAtPoint(fqdn, restorePoint);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetFilesAtPoint_0
        /// </summary>
        [Test]
        public void GetFilesAtPoint_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //DateTime restorePoint = null;
            //var response = instance.GetFilesAtPoint_0(fqdn, restorePoint);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetMailDns
        /// </summary>
        [Test]
        public void GetMailDnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetMailDns(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetMailDns_0
        /// </summary>
        [Test]
        public void GetMailDns_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetMailDns_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPitRestore
        /// </summary>
        [Test]
        public void GetPitRestoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pitRestoreId = null;
            //string fqdn = null;
            //var response = instance.GetPitRestore(pitRestoreId, fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPitRestore_0
        /// </summary>
        [Test]
        public void GetPitRestore_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pitRestoreId = null;
            //string fqdn = null;
            //var response = instance.GetPitRestore_0(pitRestoreId, fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPitRestores
        /// </summary>
        [Test]
        public void GetPitRestoresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetPitRestores(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPitRestores_0
        /// </summary>
        [Test]
        public void GetPitRestores_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetPitRestores_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSiteLive
        /// </summary>
        [Test]
        public void GetSiteLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetSiteLive(fqdn);
            //Assert.IsInstanceOf(typeof(SiteLive), response, "response is SiteLive");
        }
        
        /// <summary>
        /// Test GetSiteLive_0
        /// </summary>
        [Test]
        public void GetSiteLive_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetSiteLive_0(fqdn);
            //Assert.IsInstanceOf(typeof(SiteLive), response, "response is SiteLive");
        }
        
        /// <summary>
        /// Test GetSitePlanUsage
        /// </summary>
        [Test]
        public void GetSitePlanUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //DateTime start = null;
            //DateTime end = null;
            //var response = instance.GetSitePlanUsage(fqdn, start, end);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSitePlanUsage_0
        /// </summary>
        [Test]
        public void GetSitePlanUsage_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //DateTime start = null;
            //DateTime end = null;
            //var response = instance.GetSitePlanUsage_0(fqdn, start, end);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSitesLive
        /// </summary>
        [Test]
        public void GetSitesLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSitesLive();
            //Assert.IsInstanceOf(typeof(List<SiteLive>), response, "response is List<SiteLive>");
        }
        
        /// <summary>
        /// Test GetSitesLive_0
        /// </summary>
        [Test]
        public void GetSitesLive_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSitesLive_0();
            //Assert.IsInstanceOf(typeof(List<SiteLive>), response, "response is List<SiteLive>");
        }
        
        /// <summary>
        /// Test GetTags
        /// </summary>
        [Test]
        public void GetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetTags(fqdn);
            //Assert.IsInstanceOf(typeof(List<Tag>), response, "response is List<Tag>");
        }
        
        /// <summary>
        /// Test GetTags_0
        /// </summary>
        [Test]
        public void GetTags_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.GetTags_0(fqdn);
            //Assert.IsInstanceOf(typeof(List<Tag>), response, "response is List<Tag>");
        }
        
        /// <summary>
        /// Test ModifyFirewall
        /// </summary>
        [Test]
        public void ModifyFirewallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string ipAddress = null;
            //string addOrDel = null;
            //var response = instance.ModifyFirewall(fqdn, ipAddress, addOrDel);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ModifyFirewall_0
        /// </summary>
        [Test]
        public void ModifyFirewall_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string ipAddress = null;
            //string addOrDel = null;
            //var response = instance.ModifyFirewall_0(fqdn, ipAddress, addOrDel);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RestoreSite
        /// </summary>
        [Test]
        public void RestoreSiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //PITRestoreCreate pITRestoreCreate = null;
            //var response = instance.RestoreSite(fqdn, pITRestoreCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RestoreSite_0
        /// </summary>
        [Test]
        public void RestoreSite_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //PITRestoreCreate pITRestoreCreate = null;
            //var response = instance.RestoreSite_0(fqdn, pITRestoreCreate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ShellCmdSiteLive
        /// </summary>
        [Test]
        public void ShellCmdSiteLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string cmd = null;
            //string cwd = null;
            //bool? autoTrackDir = null;
            //bool? stage = null;
            //var response = instance.ShellCmdSiteLive(fqdn, cmd, cwd, autoTrackDir, stage);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ShellCmdSiteLive_0
        /// </summary>
        [Test]
        public void ShellCmdSiteLive_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string cmd = null;
            //string cwd = null;
            //bool? autoTrackDir = null;
            //bool? stage = null;
            //var response = instance.ShellCmdSiteLive_0(fqdn, cmd, cwd, autoTrackDir, stage);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateDnsRecord
        /// </summary>
        [Test]
        public void UpdateDnsRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string dnsType = null;
            //string dnsHostname = null;
            //string dnsContent = null;
            //string dnsId = null;
            //int? dnsPriority = null;
            //int? dnsTtl = null;
            //var response = instance.UpdateDnsRecord(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateDnsRecord_0
        /// </summary>
        [Test]
        public void UpdateDnsRecord_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //string dnsType = null;
            //string dnsHostname = null;
            //string dnsContent = null;
            //string dnsId = null;
            //int? dnsPriority = null;
            //int? dnsTtl = null;
            //var response = instance.UpdateDnsRecord_0(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateEmail
        /// </summary>
        [Test]
        public void UpdateEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userEmailAddress = null;
            //string fqdn = null;
            //UserEmailUpdate userEmailUpdate = null;
            //var response = instance.UpdateEmail(userEmailAddress, fqdn, userEmailUpdate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateEmail_0
        /// </summary>
        [Test]
        public void UpdateEmail_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userEmailAddress = null;
            //string fqdn = null;
            //UserEmailUpdate userEmailUpdate = null;
            //var response = instance.UpdateEmail_0(userEmailAddress, fqdn, userEmailUpdate);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateSiteLive
        /// </summary>
        [Test]
        public void UpdateSiteLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //SiteLiveUpdate siteLiveUpdate = null;
            //var response = instance.UpdateSiteLive(fqdn, siteLiveUpdate);
            //Assert.IsInstanceOf(typeof(SiteLive), response, "response is SiteLive");
        }
        
        /// <summary>
        /// Test UpdateSiteLive_0
        /// </summary>
        [Test]
        public void UpdateSiteLive_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //SiteLiveUpdate siteLiveUpdate = null;
            //var response = instance.UpdateSiteLive_0(fqdn, siteLiveUpdate);
            //Assert.IsInstanceOf(typeof(SiteLive), response, "response is SiteLive");
        }
        
        /// <summary>
        /// Test ValidateMxRecords
        /// </summary>
        [Test]
        public void ValidateMxRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.ValidateMxRecords(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ValidateMxRecords_0
        /// </summary>
        [Test]
        public void ValidateMxRecords_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fqdn = null;
            //var response = instance.ValidateMxRecords_0(fqdn);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
