/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TeamApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TeamApiTests
    {
        private TeamApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeamApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TeamApi
            //Assert.IsInstanceOf(typeof(TeamApi), instance);
        }

        
        /// <summary>
        /// Test GetTeam
        /// </summary>
        [Test]
        public void GetTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //var response = instance.GetTeam(teamId);
            //Assert.IsInstanceOf(typeof(Team), response, "response is Team");
        }
        
        /// <summary>
        /// Test GetTeamMember
        /// </summary>
        [Test]
        public void GetTeamMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamMemberId = null;
            //string teamId = null;
            //var response = instance.GetTeamMember(teamMemberId, teamId);
            //Assert.IsInstanceOf(typeof(TeamMember), response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test GetTeamMember_0
        /// </summary>
        [Test]
        public void GetTeamMember_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamMemberId = null;
            //string teamId = null;
            //var response = instance.GetTeamMember_0(teamMemberId, teamId);
            //Assert.IsInstanceOf(typeof(TeamMember), response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test GetTeamMembers
        /// </summary>
        [Test]
        public void GetTeamMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //var response = instance.GetTeamMembers(teamId);
            //Assert.IsInstanceOf(typeof(List<TeamMember>), response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test GetTeamMembers_0
        /// </summary>
        [Test]
        public void GetTeamMembers_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //var response = instance.GetTeamMembers_0(teamId);
            //Assert.IsInstanceOf(typeof(List<TeamMember>), response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test GetTeam_0
        /// </summary>
        [Test]
        public void GetTeam_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //var response = instance.GetTeam_0(teamId);
            //Assert.IsInstanceOf(typeof(Team), response, "response is Team");
        }
        
        /// <summary>
        /// Test GetTeams
        /// </summary>
        [Test]
        public void GetTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTeams();
            //Assert.IsInstanceOf(typeof(List<Team>), response, "response is List<Team>");
        }
        
        /// <summary>
        /// Test GetTeams_0
        /// </summary>
        [Test]
        public void GetTeams_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTeams_0();
            //Assert.IsInstanceOf(typeof(List<Team>), response, "response is List<Team>");
        }
        
        /// <summary>
        /// Test RemoveTeamMember
        /// </summary>
        [Test]
        public void RemoveTeamMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamMemberId = null;
            //string teamId = null;
            //var response = instance.RemoveTeamMember(teamMemberId, teamId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RemoveTeamMember_0
        /// </summary>
        [Test]
        public void RemoveTeamMember_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamMemberId = null;
            //string teamId = null;
            //var response = instance.RemoveTeamMember_0(teamMemberId, teamId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateTeam
        /// </summary>
        [Test]
        public void UpdateTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //TeamUpdate teamUpdate = null;
            //var response = instance.UpdateTeam(teamId, teamUpdate);
            //Assert.IsInstanceOf(typeof(Team), response, "response is Team");
        }
        
        /// <summary>
        /// Test UpdateTeam_0
        /// </summary>
        [Test]
        public void UpdateTeam_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //TeamUpdate teamUpdate = null;
            //var response = instance.UpdateTeam_0(teamId, teamUpdate);
            //Assert.IsInstanceOf(typeof(Team), response, "response is Team");
        }
        
    }

}
