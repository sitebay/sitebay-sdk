/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountApiTests
    {
        private AccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AccountApi
            //Assert.IsInstanceOf(typeof(AccountApi), instance);
        }

        
        /// <summary>
        /// Test DeletePaymentMethod
        /// </summary>
        [Test]
        public void DeletePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //var response = instance.DeletePaymentMethod(paymentMethodId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeletePaymentMethod_0
        /// </summary>
        [Test]
        public void DeletePaymentMethod_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //var response = instance.DeletePaymentMethod_0(paymentMethodId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPaymentMethods
        /// </summary>
        [Test]
        public void GetPaymentMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPaymentMethods();
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPaymentMethods_0
        /// </summary>
        [Test]
        public void GetPaymentMethods_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPaymentMethods_0();
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetTax
        /// </summary>
        [Test]
        public void GetTaxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTax();
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetTax_0
        /// </summary>
        [Test]
        public void GetTax_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTax_0();
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetUserMe
        /// </summary>
        [Test]
        public void GetUserMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserMe();
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetUserMe_0
        /// </summary>
        [Test]
        public void GetUserMe_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserMe_0();
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RevokeOauth
        /// </summary>
        [Test]
        public void RevokeOauthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string provider = null;
            //var response = instance.RevokeOauth(provider);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RevokeOauth_0
        /// </summary>
        [Test]
        public void RevokeOauth_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string provider = null;
            //var response = instance.RevokeOauth_0(provider);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdatePaymentMethod
        /// </summary>
        [Test]
        public void UpdatePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //var response = instance.UpdatePaymentMethod(paymentMethodId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdatePaymentMethod_0
        /// </summary>
        [Test]
        public void UpdatePaymentMethod_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //var response = instance.UpdatePaymentMethod_0(paymentMethodId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.UpdateUser(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateUser_0
        /// </summary>
        [Test]
        public void UpdateUser_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.UpdateUser_0(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
