/*
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PlanApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PlanApiTests
    {
        private PlanApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PlanApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PlanApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PlanApi
            //Assert.IsInstanceOf(typeof(PlanApi), instance);
        }

        
        /// <summary>
        /// Test CancelPlan
        /// </summary>
        [Test]
        public void CancelPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string planId = null;
            //var response = instance.CancelPlan(planId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CreatePlan
        /// </summary>
        [Test]
        public void CreatePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.CreatePlan(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(Plan), response, "response is Plan");
        }
        
        /// <summary>
        /// Test GetPlan
        /// </summary>
        [Test]
        public void GetPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string planId = null;
            //var response = instance.GetPlan(planId);
            //Assert.IsInstanceOf(typeof(Plan), response, "response is Plan");
        }
        
        /// <summary>
        /// Test GetPlans
        /// </summary>
        [Test]
        public void GetPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPlans();
            //Assert.IsInstanceOf(typeof(List<Plan>), response, "response is List<Plan>");
        }
        
        /// <summary>
        /// Test PreviewChange
        /// </summary>
        [Test]
        public void PreviewChangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string planId = null;
            //string newPlanTypeName = null;
            //int additionalSites = null;
            //var response = instance.PreviewChange(planId, newPlanTypeName, additionalSites);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UncancelPlan
        /// </summary>
        [Test]
        public void UncancelPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string planId = null;
            //var response = instance.UncancelPlan(planId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdatePlan
        /// </summary>
        [Test]
        public void UpdatePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string planId = null;
            //PlanUpdate planUpdate = null;
            //var response = instance.UpdatePlan(planId, planUpdate);
            //Assert.IsInstanceOf(typeof(Plan), response, "response is Plan");
        }
        
    }

}
