/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserEmailCreate struct for UserEmailCreate
type UserEmailCreate struct {
	ForwardToEmail *string `json:"forward_to_email,omitempty"`
	LocalPart string `json:"local_part"`
	Password *string `json:"password,omitempty"`
}

// NewUserEmailCreate instantiates a new UserEmailCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEmailCreate(localPart string) *UserEmailCreate {
	this := UserEmailCreate{}
	this.LocalPart = localPart
	return &this
}

// NewUserEmailCreateWithDefaults instantiates a new UserEmailCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEmailCreateWithDefaults() *UserEmailCreate {
	this := UserEmailCreate{}
	return &this
}

// GetForwardToEmail returns the ForwardToEmail field value if set, zero value otherwise.
func (o *UserEmailCreate) GetForwardToEmail() string {
	if o == nil || o.ForwardToEmail == nil {
		var ret string
		return ret
	}
	return *o.ForwardToEmail
}

// GetForwardToEmailOk returns a tuple with the ForwardToEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailCreate) GetForwardToEmailOk() (*string, bool) {
	if o == nil || o.ForwardToEmail == nil {
		return nil, false
	}
	return o.ForwardToEmail, true
}

// HasForwardToEmail returns a boolean if a field has been set.
func (o *UserEmailCreate) HasForwardToEmail() bool {
	if o != nil && o.ForwardToEmail != nil {
		return true
	}

	return false
}

// SetForwardToEmail gets a reference to the given string and assigns it to the ForwardToEmail field.
func (o *UserEmailCreate) SetForwardToEmail(v string) {
	o.ForwardToEmail = &v
}

// GetLocalPart returns the LocalPart field value
func (o *UserEmailCreate) GetLocalPart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalPart
}

// GetLocalPartOk returns a tuple with the LocalPart field value
// and a boolean to check if the value has been set.
func (o *UserEmailCreate) GetLocalPartOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LocalPart, true
}

// SetLocalPart sets field value
func (o *UserEmailCreate) SetLocalPart(v string) {
	o.LocalPart = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserEmailCreate) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailCreate) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserEmailCreate) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserEmailCreate) SetPassword(v string) {
	o.Password = &v
}

func (o UserEmailCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ForwardToEmail != nil {
		toSerialize["forward_to_email"] = o.ForwardToEmail
	}
	if true {
		toSerialize["local_part"] = o.LocalPart
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableUserEmailCreate struct {
	value *UserEmailCreate
	isSet bool
}

func (v NullableUserEmailCreate) Get() *UserEmailCreate {
	return v.value
}

func (v *NullableUserEmailCreate) Set(val *UserEmailCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEmailCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEmailCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEmailCreate(val *UserEmailCreate) *NullableUserEmailCreate {
	return &NullableUserEmailCreate{value: val, isSet: true}
}

func (v NullableUserEmailCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEmailCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


