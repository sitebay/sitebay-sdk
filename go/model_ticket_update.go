/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TicketUpdate struct for TicketUpdate
type TicketUpdate struct {
	Subject string `json:"subject"`
}

// NewTicketUpdate instantiates a new TicketUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketUpdate(subject string) *TicketUpdate {
	this := TicketUpdate{}
	this.Subject = subject
	return &this
}

// NewTicketUpdateWithDefaults instantiates a new TicketUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketUpdateWithDefaults() *TicketUpdate {
	this := TicketUpdate{}
	return &this
}

// GetSubject returns the Subject field value
func (o *TicketUpdate) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *TicketUpdate) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *TicketUpdate) SetSubject(v string) {
	o.Subject = v
}

func (o TicketUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subject"] = o.Subject
	}
	return json.Marshal(toSerialize)
}

type NullableTicketUpdate struct {
	value *TicketUpdate
	isSet bool
}

func (v NullableTicketUpdate) Get() *TicketUpdate {
	return v.value
}

func (v *NullableTicketUpdate) Set(val *TicketUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketUpdate(val *TicketUpdate) *NullableTicketUpdate {
	return &NullableTicketUpdate{value: val, isSet: true}
}

func (v NullableTicketUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


