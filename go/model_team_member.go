/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TeamMember struct for TeamMember
type TeamMember struct {
	Id string `json:"id"`
	User User `json:"user"`
}

// NewTeamMember instantiates a new TeamMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMember(id string, user User) *TeamMember {
	this := TeamMember{}
	this.Id = id
	this.User = user
	return &this
}

// NewTeamMemberWithDefaults instantiates a new TeamMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMemberWithDefaults() *TeamMember {
	this := TeamMember{}
	return &this
}

// GetId returns the Id field value
func (o *TeamMember) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamMember) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamMember) SetId(v string) {
	o.Id = v
}

// GetUser returns the User field value
func (o *TeamMember) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *TeamMember) GetUserOk() (*User, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *TeamMember) SetUser(v User) {
	o.User = v
}

func (o TeamMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableTeamMember struct {
	value *TeamMember
	isSet bool
}

func (v NullableTeamMember) Get() *TeamMember {
	return v.value
}

func (v *NullableTeamMember) Set(val *TeamMember) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMember) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMember(val *TeamMember) *NullableTeamMember {
	return &NullableTeamMember{value: val, isSet: true}
}

func (v NullableTeamMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


