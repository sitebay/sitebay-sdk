/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserEmailUpdate struct for UserEmailUpdate
type UserEmailUpdate struct {
	IsCatchall *bool `json:"is_catchall,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewUserEmailUpdate instantiates a new UserEmailUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEmailUpdate() *UserEmailUpdate {
	this := UserEmailUpdate{}
	return &this
}

// NewUserEmailUpdateWithDefaults instantiates a new UserEmailUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEmailUpdateWithDefaults() *UserEmailUpdate {
	this := UserEmailUpdate{}
	return &this
}

// GetIsCatchall returns the IsCatchall field value if set, zero value otherwise.
func (o *UserEmailUpdate) GetIsCatchall() bool {
	if o == nil || o.IsCatchall == nil {
		var ret bool
		return ret
	}
	return *o.IsCatchall
}

// GetIsCatchallOk returns a tuple with the IsCatchall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailUpdate) GetIsCatchallOk() (*bool, bool) {
	if o == nil || o.IsCatchall == nil {
		return nil, false
	}
	return o.IsCatchall, true
}

// HasIsCatchall returns a boolean if a field has been set.
func (o *UserEmailUpdate) HasIsCatchall() bool {
	if o != nil && o.IsCatchall != nil {
		return true
	}

	return false
}

// SetIsCatchall gets a reference to the given bool and assigns it to the IsCatchall field.
func (o *UserEmailUpdate) SetIsCatchall(v bool) {
	o.IsCatchall = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserEmailUpdate) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailUpdate) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserEmailUpdate) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserEmailUpdate) SetPassword(v string) {
	o.Password = &v
}

func (o UserEmailUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsCatchall != nil {
		toSerialize["is_catchall"] = o.IsCatchall
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableUserEmailUpdate struct {
	value *UserEmailUpdate
	isSet bool
}

func (v NullableUserEmailUpdate) Get() *UserEmailUpdate {
	return v.value
}

func (v *NullableUserEmailUpdate) Set(val *UserEmailUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEmailUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEmailUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEmailUpdate(val *UserEmailUpdate) *NullableUserEmailUpdate {
	return &NullableUserEmailUpdate{value: val, isSet: true}
}

func (v NullableUserEmailUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEmailUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


