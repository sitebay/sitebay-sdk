/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TicketCreate struct for TicketCreate
type TicketCreate struct {
	Category *string `json:"category,omitempty"`
	Description *string `json:"description,omitempty"`
	Resolved *bool `json:"resolved,omitempty"`
	S3Object *string `json:"s3_object,omitempty"`
	SiteLiveId *string `json:"site_live_id,omitempty"`
	Subject string `json:"subject"`
}

// NewTicketCreate instantiates a new TicketCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketCreate(subject string) *TicketCreate {
	this := TicketCreate{}
	var resolved bool = false
	this.Resolved = &resolved
	this.Subject = subject
	return &this
}

// NewTicketCreateWithDefaults instantiates a new TicketCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketCreateWithDefaults() *TicketCreate {
	this := TicketCreate{}
	var resolved bool = false
	this.Resolved = &resolved
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *TicketCreate) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreate) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *TicketCreate) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *TicketCreate) SetCategory(v string) {
	o.Category = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TicketCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TicketCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TicketCreate) SetDescription(v string) {
	o.Description = &v
}

// GetResolved returns the Resolved field value if set, zero value otherwise.
func (o *TicketCreate) GetResolved() bool {
	if o == nil || o.Resolved == nil {
		var ret bool
		return ret
	}
	return *o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreate) GetResolvedOk() (*bool, bool) {
	if o == nil || o.Resolved == nil {
		return nil, false
	}
	return o.Resolved, true
}

// HasResolved returns a boolean if a field has been set.
func (o *TicketCreate) HasResolved() bool {
	if o != nil && o.Resolved != nil {
		return true
	}

	return false
}

// SetResolved gets a reference to the given bool and assigns it to the Resolved field.
func (o *TicketCreate) SetResolved(v bool) {
	o.Resolved = &v
}

// GetS3Object returns the S3Object field value if set, zero value otherwise.
func (o *TicketCreate) GetS3Object() string {
	if o == nil || o.S3Object == nil {
		var ret string
		return ret
	}
	return *o.S3Object
}

// GetS3ObjectOk returns a tuple with the S3Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreate) GetS3ObjectOk() (*string, bool) {
	if o == nil || o.S3Object == nil {
		return nil, false
	}
	return o.S3Object, true
}

// HasS3Object returns a boolean if a field has been set.
func (o *TicketCreate) HasS3Object() bool {
	if o != nil && o.S3Object != nil {
		return true
	}

	return false
}

// SetS3Object gets a reference to the given string and assigns it to the S3Object field.
func (o *TicketCreate) SetS3Object(v string) {
	o.S3Object = &v
}

// GetSiteLiveId returns the SiteLiveId field value if set, zero value otherwise.
func (o *TicketCreate) GetSiteLiveId() string {
	if o == nil || o.SiteLiveId == nil {
		var ret string
		return ret
	}
	return *o.SiteLiveId
}

// GetSiteLiveIdOk returns a tuple with the SiteLiveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreate) GetSiteLiveIdOk() (*string, bool) {
	if o == nil || o.SiteLiveId == nil {
		return nil, false
	}
	return o.SiteLiveId, true
}

// HasSiteLiveId returns a boolean if a field has been set.
func (o *TicketCreate) HasSiteLiveId() bool {
	if o != nil && o.SiteLiveId != nil {
		return true
	}

	return false
}

// SetSiteLiveId gets a reference to the given string and assigns it to the SiteLiveId field.
func (o *TicketCreate) SetSiteLiveId(v string) {
	o.SiteLiveId = &v
}

// GetSubject returns the Subject field value
func (o *TicketCreate) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *TicketCreate) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *TicketCreate) SetSubject(v string) {
	o.Subject = v
}

func (o TicketCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Resolved != nil {
		toSerialize["resolved"] = o.Resolved
	}
	if o.S3Object != nil {
		toSerialize["s3_object"] = o.S3Object
	}
	if o.SiteLiveId != nil {
		toSerialize["site_live_id"] = o.SiteLiveId
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	return json.Marshal(toSerialize)
}

type NullableTicketCreate struct {
	value *TicketCreate
	isSet bool
}

func (v NullableTicketCreate) Get() *TicketCreate {
	return v.value
}

func (v *NullableTicketCreate) Set(val *TicketCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketCreate(val *TicketCreate) *NullableTicketCreate {
	return &NullableTicketCreate{value: val, isSet: true}
}

func (v NullableTicketCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


