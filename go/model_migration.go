/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Migration struct for Migration
type Migration struct {
	CurrentUrl string `json:"current_url"`
	Extra *string `json:"extra,omitempty"`
	FtpAddress *string `json:"ftp_address,omitempty"`
	FtpPassword *string `json:"ftp_password,omitempty"`
	FtpUser *string `json:"ftp_user,omitempty"`
	Host *string `json:"host,omitempty"`
	HostPassword *string `json:"host_password,omitempty"`
	HostUser *string `json:"host_user,omitempty"`
	MigrationType *string `json:"migration_type,omitempty"`
	WordpressPassword string `json:"wordpress_password"`
	WordpressUser string `json:"wordpress_user"`
	ZipFileName *string `json:"zip_file_name,omitempty"`
}

// NewMigration instantiates a new Migration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigration(currentUrl string, wordpressPassword string, wordpressUser string) *Migration {
	this := Migration{}
	this.CurrentUrl = currentUrl
	this.WordpressPassword = wordpressPassword
	this.WordpressUser = wordpressUser
	return &this
}

// NewMigrationWithDefaults instantiates a new Migration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationWithDefaults() *Migration {
	this := Migration{}
	return &this
}

// GetCurrentUrl returns the CurrentUrl field value
func (o *Migration) GetCurrentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentUrl
}

// GetCurrentUrlOk returns a tuple with the CurrentUrl field value
// and a boolean to check if the value has been set.
func (o *Migration) GetCurrentUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CurrentUrl, true
}

// SetCurrentUrl sets field value
func (o *Migration) SetCurrentUrl(v string) {
	o.CurrentUrl = v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *Migration) GetExtra() string {
	if o == nil || o.Extra == nil {
		var ret string
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetExtraOk() (*string, bool) {
	if o == nil || o.Extra == nil {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *Migration) HasExtra() bool {
	if o != nil && o.Extra != nil {
		return true
	}

	return false
}

// SetExtra gets a reference to the given string and assigns it to the Extra field.
func (o *Migration) SetExtra(v string) {
	o.Extra = &v
}

// GetFtpAddress returns the FtpAddress field value if set, zero value otherwise.
func (o *Migration) GetFtpAddress() string {
	if o == nil || o.FtpAddress == nil {
		var ret string
		return ret
	}
	return *o.FtpAddress
}

// GetFtpAddressOk returns a tuple with the FtpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetFtpAddressOk() (*string, bool) {
	if o == nil || o.FtpAddress == nil {
		return nil, false
	}
	return o.FtpAddress, true
}

// HasFtpAddress returns a boolean if a field has been set.
func (o *Migration) HasFtpAddress() bool {
	if o != nil && o.FtpAddress != nil {
		return true
	}

	return false
}

// SetFtpAddress gets a reference to the given string and assigns it to the FtpAddress field.
func (o *Migration) SetFtpAddress(v string) {
	o.FtpAddress = &v
}

// GetFtpPassword returns the FtpPassword field value if set, zero value otherwise.
func (o *Migration) GetFtpPassword() string {
	if o == nil || o.FtpPassword == nil {
		var ret string
		return ret
	}
	return *o.FtpPassword
}

// GetFtpPasswordOk returns a tuple with the FtpPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetFtpPasswordOk() (*string, bool) {
	if o == nil || o.FtpPassword == nil {
		return nil, false
	}
	return o.FtpPassword, true
}

// HasFtpPassword returns a boolean if a field has been set.
func (o *Migration) HasFtpPassword() bool {
	if o != nil && o.FtpPassword != nil {
		return true
	}

	return false
}

// SetFtpPassword gets a reference to the given string and assigns it to the FtpPassword field.
func (o *Migration) SetFtpPassword(v string) {
	o.FtpPassword = &v
}

// GetFtpUser returns the FtpUser field value if set, zero value otherwise.
func (o *Migration) GetFtpUser() string {
	if o == nil || o.FtpUser == nil {
		var ret string
		return ret
	}
	return *o.FtpUser
}

// GetFtpUserOk returns a tuple with the FtpUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetFtpUserOk() (*string, bool) {
	if o == nil || o.FtpUser == nil {
		return nil, false
	}
	return o.FtpUser, true
}

// HasFtpUser returns a boolean if a field has been set.
func (o *Migration) HasFtpUser() bool {
	if o != nil && o.FtpUser != nil {
		return true
	}

	return false
}

// SetFtpUser gets a reference to the given string and assigns it to the FtpUser field.
func (o *Migration) SetFtpUser(v string) {
	o.FtpUser = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *Migration) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *Migration) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *Migration) SetHost(v string) {
	o.Host = &v
}

// GetHostPassword returns the HostPassword field value if set, zero value otherwise.
func (o *Migration) GetHostPassword() string {
	if o == nil || o.HostPassword == nil {
		var ret string
		return ret
	}
	return *o.HostPassword
}

// GetHostPasswordOk returns a tuple with the HostPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetHostPasswordOk() (*string, bool) {
	if o == nil || o.HostPassword == nil {
		return nil, false
	}
	return o.HostPassword, true
}

// HasHostPassword returns a boolean if a field has been set.
func (o *Migration) HasHostPassword() bool {
	if o != nil && o.HostPassword != nil {
		return true
	}

	return false
}

// SetHostPassword gets a reference to the given string and assigns it to the HostPassword field.
func (o *Migration) SetHostPassword(v string) {
	o.HostPassword = &v
}

// GetHostUser returns the HostUser field value if set, zero value otherwise.
func (o *Migration) GetHostUser() string {
	if o == nil || o.HostUser == nil {
		var ret string
		return ret
	}
	return *o.HostUser
}

// GetHostUserOk returns a tuple with the HostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetHostUserOk() (*string, bool) {
	if o == nil || o.HostUser == nil {
		return nil, false
	}
	return o.HostUser, true
}

// HasHostUser returns a boolean if a field has been set.
func (o *Migration) HasHostUser() bool {
	if o != nil && o.HostUser != nil {
		return true
	}

	return false
}

// SetHostUser gets a reference to the given string and assigns it to the HostUser field.
func (o *Migration) SetHostUser(v string) {
	o.HostUser = &v
}

// GetMigrationType returns the MigrationType field value if set, zero value otherwise.
func (o *Migration) GetMigrationType() string {
	if o == nil || o.MigrationType == nil {
		var ret string
		return ret
	}
	return *o.MigrationType
}

// GetMigrationTypeOk returns a tuple with the MigrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetMigrationTypeOk() (*string, bool) {
	if o == nil || o.MigrationType == nil {
		return nil, false
	}
	return o.MigrationType, true
}

// HasMigrationType returns a boolean if a field has been set.
func (o *Migration) HasMigrationType() bool {
	if o != nil && o.MigrationType != nil {
		return true
	}

	return false
}

// SetMigrationType gets a reference to the given string and assigns it to the MigrationType field.
func (o *Migration) SetMigrationType(v string) {
	o.MigrationType = &v
}

// GetWordpressPassword returns the WordpressPassword field value
func (o *Migration) GetWordpressPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WordpressPassword
}

// GetWordpressPasswordOk returns a tuple with the WordpressPassword field value
// and a boolean to check if the value has been set.
func (o *Migration) GetWordpressPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WordpressPassword, true
}

// SetWordpressPassword sets field value
func (o *Migration) SetWordpressPassword(v string) {
	o.WordpressPassword = v
}

// GetWordpressUser returns the WordpressUser field value
func (o *Migration) GetWordpressUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WordpressUser
}

// GetWordpressUserOk returns a tuple with the WordpressUser field value
// and a boolean to check if the value has been set.
func (o *Migration) GetWordpressUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WordpressUser, true
}

// SetWordpressUser sets field value
func (o *Migration) SetWordpressUser(v string) {
	o.WordpressUser = v
}

// GetZipFileName returns the ZipFileName field value if set, zero value otherwise.
func (o *Migration) GetZipFileName() string {
	if o == nil || o.ZipFileName == nil {
		var ret string
		return ret
	}
	return *o.ZipFileName
}

// GetZipFileNameOk returns a tuple with the ZipFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetZipFileNameOk() (*string, bool) {
	if o == nil || o.ZipFileName == nil {
		return nil, false
	}
	return o.ZipFileName, true
}

// HasZipFileName returns a boolean if a field has been set.
func (o *Migration) HasZipFileName() bool {
	if o != nil && o.ZipFileName != nil {
		return true
	}

	return false
}

// SetZipFileName gets a reference to the given string and assigns it to the ZipFileName field.
func (o *Migration) SetZipFileName(v string) {
	o.ZipFileName = &v
}

func (o Migration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["current_url"] = o.CurrentUrl
	}
	if o.Extra != nil {
		toSerialize["extra"] = o.Extra
	}
	if o.FtpAddress != nil {
		toSerialize["ftp_address"] = o.FtpAddress
	}
	if o.FtpPassword != nil {
		toSerialize["ftp_password"] = o.FtpPassword
	}
	if o.FtpUser != nil {
		toSerialize["ftp_user"] = o.FtpUser
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.HostPassword != nil {
		toSerialize["host_password"] = o.HostPassword
	}
	if o.HostUser != nil {
		toSerialize["host_user"] = o.HostUser
	}
	if o.MigrationType != nil {
		toSerialize["migration_type"] = o.MigrationType
	}
	if true {
		toSerialize["wordpress_password"] = o.WordpressPassword
	}
	if true {
		toSerialize["wordpress_user"] = o.WordpressUser
	}
	if o.ZipFileName != nil {
		toSerialize["zip_file_name"] = o.ZipFileName
	}
	return json.Marshal(toSerialize)
}

type NullableMigration struct {
	value *Migration
	isSet bool
}

func (v NullableMigration) Get() *Migration {
	return v.value
}

func (v *NullableMigration) Set(val *Migration) {
	v.value = val
	v.isSet = true
}

func (v NullableMigration) IsSet() bool {
	return v.isSet
}

func (v *NullableMigration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigration(val *Migration) *NullableMigration {
	return &NullableMigration{value: val, isSet: true}
}

func (v NullableMigration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


