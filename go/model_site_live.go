/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SiteLive struct for SiteLive
type SiteLive struct {
	Active bool `json:"active"`
	Busy *string `json:"busy,omitempty"`
	DkimKey *string `json:"dkim_key,omitempty"`
	Fqdn string `json:"fqdn"`
	GitUrl *string `json:"git_url,omitempty"`
	Id string `json:"id"`
	RegionId int32 `json:"region_id"`
	TeamId string `json:"team_id"`
	UntrackedTables *string `json:"untracked_tables,omitempty"`
	UserId string `json:"user_id"`
}

// NewSiteLive instantiates a new SiteLive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteLive(active bool, fqdn string, id string, regionId int32, teamId string, userId string) *SiteLive {
	this := SiteLive{}
	this.Active = active
	this.Fqdn = fqdn
	this.Id = id
	this.RegionId = regionId
	this.TeamId = teamId
	this.UserId = userId
	return &this
}

// NewSiteLiveWithDefaults instantiates a new SiteLive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteLiveWithDefaults() *SiteLive {
	this := SiteLive{}
	return &this
}

// GetActive returns the Active field value
func (o *SiteLive) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *SiteLive) GetActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *SiteLive) SetActive(v bool) {
	o.Active = v
}

// GetBusy returns the Busy field value if set, zero value otherwise.
func (o *SiteLive) GetBusy() string {
	if o == nil || o.Busy == nil {
		var ret string
		return ret
	}
	return *o.Busy
}

// GetBusyOk returns a tuple with the Busy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteLive) GetBusyOk() (*string, bool) {
	if o == nil || o.Busy == nil {
		return nil, false
	}
	return o.Busy, true
}

// HasBusy returns a boolean if a field has been set.
func (o *SiteLive) HasBusy() bool {
	if o != nil && o.Busy != nil {
		return true
	}

	return false
}

// SetBusy gets a reference to the given string and assigns it to the Busy field.
func (o *SiteLive) SetBusy(v string) {
	o.Busy = &v
}

// GetDkimKey returns the DkimKey field value if set, zero value otherwise.
func (o *SiteLive) GetDkimKey() string {
	if o == nil || o.DkimKey == nil {
		var ret string
		return ret
	}
	return *o.DkimKey
}

// GetDkimKeyOk returns a tuple with the DkimKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteLive) GetDkimKeyOk() (*string, bool) {
	if o == nil || o.DkimKey == nil {
		return nil, false
	}
	return o.DkimKey, true
}

// HasDkimKey returns a boolean if a field has been set.
func (o *SiteLive) HasDkimKey() bool {
	if o != nil && o.DkimKey != nil {
		return true
	}

	return false
}

// SetDkimKey gets a reference to the given string and assigns it to the DkimKey field.
func (o *SiteLive) SetDkimKey(v string) {
	o.DkimKey = &v
}

// GetFqdn returns the Fqdn field value
func (o *SiteLive) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *SiteLive) GetFqdnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *SiteLive) SetFqdn(v string) {
	o.Fqdn = v
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *SiteLive) GetGitUrl() string {
	if o == nil || o.GitUrl == nil {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteLive) GetGitUrlOk() (*string, bool) {
	if o == nil || o.GitUrl == nil {
		return nil, false
	}
	return o.GitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *SiteLive) HasGitUrl() bool {
	if o != nil && o.GitUrl != nil {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *SiteLive) SetGitUrl(v string) {
	o.GitUrl = &v
}

// GetId returns the Id field value
func (o *SiteLive) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SiteLive) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SiteLive) SetId(v string) {
	o.Id = v
}

// GetRegionId returns the RegionId field value
func (o *SiteLive) GetRegionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *SiteLive) GetRegionIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *SiteLive) SetRegionId(v int32) {
	o.RegionId = v
}

// GetTeamId returns the TeamId field value
func (o *SiteLive) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *SiteLive) GetTeamIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *SiteLive) SetTeamId(v string) {
	o.TeamId = v
}

// GetUntrackedTables returns the UntrackedTables field value if set, zero value otherwise.
func (o *SiteLive) GetUntrackedTables() string {
	if o == nil || o.UntrackedTables == nil {
		var ret string
		return ret
	}
	return *o.UntrackedTables
}

// GetUntrackedTablesOk returns a tuple with the UntrackedTables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteLive) GetUntrackedTablesOk() (*string, bool) {
	if o == nil || o.UntrackedTables == nil {
		return nil, false
	}
	return o.UntrackedTables, true
}

// HasUntrackedTables returns a boolean if a field has been set.
func (o *SiteLive) HasUntrackedTables() bool {
	if o != nil && o.UntrackedTables != nil {
		return true
	}

	return false
}

// SetUntrackedTables gets a reference to the given string and assigns it to the UntrackedTables field.
func (o *SiteLive) SetUntrackedTables(v string) {
	o.UntrackedTables = &v
}

// GetUserId returns the UserId field value
func (o *SiteLive) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SiteLive) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SiteLive) SetUserId(v string) {
	o.UserId = v
}

func (o SiteLive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["active"] = o.Active
	}
	if o.Busy != nil {
		toSerialize["busy"] = o.Busy
	}
	if o.DkimKey != nil {
		toSerialize["dkim_key"] = o.DkimKey
	}
	if true {
		toSerialize["fqdn"] = o.Fqdn
	}
	if o.GitUrl != nil {
		toSerialize["git_url"] = o.GitUrl
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["region_id"] = o.RegionId
	}
	if true {
		toSerialize["team_id"] = o.TeamId
	}
	if o.UntrackedTables != nil {
		toSerialize["untracked_tables"] = o.UntrackedTables
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableSiteLive struct {
	value *SiteLive
	isSet bool
}

func (v NullableSiteLive) Get() *SiteLive {
	return v.value
}

func (v *NullableSiteLive) Set(val *SiteLive) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteLive) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteLive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteLive(val *SiteLive) *NullableSiteLive {
	return &NullableSiteLive{value: val, isSet: true}
}

func (v NullableSiteLive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteLive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


