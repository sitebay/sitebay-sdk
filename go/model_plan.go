/*
Site Bay

OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Plan struct for Plan
type Plan struct {
	AdditionalSites *int32 `json:"additional_sites,omitempty"`
	Created time.Time `json:"created"`
	Currency *string `json:"currency,omitempty"`
	Ends time.Time `json:"ends"`
	Id string `json:"id"`
	Interval *string `json:"interval,omitempty"`
	PlanTypeName string `json:"plan_type_name"`
	Team *Team `json:"team,omitempty"`
	TeamId *string `json:"team_id,omitempty"`
	UserId string `json:"user_id"`
}

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan(created time.Time, ends time.Time, id string, planTypeName string, userId string) *Plan {
	this := Plan{}
	var additionalSites int32 = 0
	this.AdditionalSites = &additionalSites
	this.Created = created
	this.Ends = ends
	this.Id = id
	this.PlanTypeName = planTypeName
	this.UserId = userId
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	var additionalSites int32 = 0
	this.AdditionalSites = &additionalSites
	return &this
}

// GetAdditionalSites returns the AdditionalSites field value if set, zero value otherwise.
func (o *Plan) GetAdditionalSites() int32 {
	if o == nil || o.AdditionalSites == nil {
		var ret int32
		return ret
	}
	return *o.AdditionalSites
}

// GetAdditionalSitesOk returns a tuple with the AdditionalSites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetAdditionalSitesOk() (*int32, bool) {
	if o == nil || o.AdditionalSites == nil {
		return nil, false
	}
	return o.AdditionalSites, true
}

// HasAdditionalSites returns a boolean if a field has been set.
func (o *Plan) HasAdditionalSites() bool {
	if o != nil && o.AdditionalSites != nil {
		return true
	}

	return false
}

// SetAdditionalSites gets a reference to the given int32 and assigns it to the AdditionalSites field.
func (o *Plan) SetAdditionalSites(v int32) {
	o.AdditionalSites = &v
}

// GetCreated returns the Created field value
func (o *Plan) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Plan) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Plan) SetCreated(v time.Time) {
	o.Created = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Plan) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Plan) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Plan) SetCurrency(v string) {
	o.Currency = &v
}

// GetEnds returns the Ends field value
func (o *Plan) GetEnds() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Ends
}

// GetEndsOk returns a tuple with the Ends field value
// and a boolean to check if the value has been set.
func (o *Plan) GetEndsOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ends, true
}

// SetEnds sets field value
func (o *Plan) SetEnds(v time.Time) {
	o.Ends = v
}

// GetId returns the Id field value
func (o *Plan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Plan) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Plan) SetId(v string) {
	o.Id = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *Plan) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *Plan) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *Plan) SetInterval(v string) {
	o.Interval = &v
}

// GetPlanTypeName returns the PlanTypeName field value
func (o *Plan) GetPlanTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanTypeName
}

// GetPlanTypeNameOk returns a tuple with the PlanTypeName field value
// and a boolean to check if the value has been set.
func (o *Plan) GetPlanTypeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlanTypeName, true
}

// SetPlanTypeName sets field value
func (o *Plan) SetPlanTypeName(v string) {
	o.PlanTypeName = v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *Plan) GetTeam() Team {
	if o == nil || o.Team == nil {
		var ret Team
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetTeamOk() (*Team, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *Plan) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given Team and assigns it to the Team field.
func (o *Plan) SetTeam(v Team) {
	o.Team = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *Plan) GetTeamId() string {
	if o == nil || o.TeamId == nil {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetTeamIdOk() (*string, bool) {
	if o == nil || o.TeamId == nil {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *Plan) HasTeamId() bool {
	if o != nil && o.TeamId != nil {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *Plan) SetTeamId(v string) {
	o.TeamId = &v
}

// GetUserId returns the UserId field value
func (o *Plan) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Plan) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Plan) SetUserId(v string) {
	o.UserId = v
}

func (o Plan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalSites != nil {
		toSerialize["additional_sites"] = o.AdditionalSites
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["ends"] = o.Ends
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if true {
		toSerialize["plan_type_name"] = o.PlanTypeName
	}
	if o.Team != nil {
		toSerialize["team"] = o.Team
	}
	if o.TeamId != nil {
		toSerialize["team_id"] = o.TeamId
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


