/*
 * Site Bay
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExternalPathCreate;
import org.openapitools.client.model.HTTPValidationError;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.PITRestoreCreate;
import org.openapitools.client.model.SiteLive;
import org.openapitools.client.model.SiteLiveCreate;
import org.openapitools.client.model.SiteLiveUpdate;
import org.openapitools.client.model.SiteStageCreate;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagCreate;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.openapitools.client.model.UserEmailCreate;
import org.openapitools.client.model.UserEmailUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SiteLiveApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SiteLiveApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SiteLiveApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addMailDns
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMailDnsCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMailDnsValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling addMailDns(Async)");
        }
        

        okhttp3.Call localVarCall = addMailDnsCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Create Email DNS records
     * Automatically add the DNS records to your Nameserver configured site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addMailDns(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = addMailDnsWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Create Email DNS records
     * Automatically add the DNS records to your Nameserver configured site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addMailDnsWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = addMailDnsValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Email DNS records (asynchronously)
     * Automatically add the DNS records to your Nameserver configured site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMailDnsAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMailDnsValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMailDns_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMailDns_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMailDns_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling addMailDns_0(Async)");
        }
        

        okhttp3.Call localVarCall = addMailDns_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Create Email DNS records
     * Automatically add the DNS records to your Nameserver configured site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addMailDns_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = addMailDns_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Create Email DNS records
     * Automatically add the DNS records to your Nameserver configured site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addMailDns_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = addMailDns_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Email DNS records (asynchronously)
     * Automatically add the DNS records to your Nameserver configured site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMailDns_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMailDns_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeDevMode
     * @param fqdn  (required)
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDevModeCall(String fqdn, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/change-dev-mode"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeDevModeValidateBeforeCall(String fqdn, String value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling changeDevMode(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling changeDevMode(Async)");
        }
        

        okhttp3.Call localVarCall = changeDevModeCall(fqdn, value, _callback);
        return localVarCall;

    }

    /**
     * Change HTTP Auth
     * Enable or disable HTTP Basic Authentication
     * @param fqdn  (required)
     * @param value  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object changeDevMode(String fqdn, String value) throws ApiException {
        ApiResponse<Object> localVarResp = changeDevModeWithHttpInfo(fqdn, value);
        return localVarResp.getData();
    }

    /**
     * Change HTTP Auth
     * Enable or disable HTTP Basic Authentication
     * @param fqdn  (required)
     * @param value  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> changeDevModeWithHttpInfo(String fqdn, String value) throws ApiException {
        okhttp3.Call localVarCall = changeDevModeValidateBeforeCall(fqdn, value, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change HTTP Auth (asynchronously)
     * Enable or disable HTTP Basic Authentication
     * @param fqdn  (required)
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDevModeAsync(String fqdn, String value, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeDevModeValidateBeforeCall(fqdn, value, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeDevMode_0
     * @param fqdn  (required)
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDevMode_0Call(String fqdn, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/change-dev-mode"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeDevMode_0ValidateBeforeCall(String fqdn, String value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling changeDevMode_0(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling changeDevMode_0(Async)");
        }
        

        okhttp3.Call localVarCall = changeDevMode_0Call(fqdn, value, _callback);
        return localVarCall;

    }

    /**
     * Change HTTP Auth
     * Enable or disable HTTP Basic Authentication
     * @param fqdn  (required)
     * @param value  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object changeDevMode_0(String fqdn, String value) throws ApiException {
        ApiResponse<Object> localVarResp = changeDevMode_0WithHttpInfo(fqdn, value);
        return localVarResp.getData();
    }

    /**
     * Change HTTP Auth
     * Enable or disable HTTP Basic Authentication
     * @param fqdn  (required)
     * @param value  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> changeDevMode_0WithHttpInfo(String fqdn, String value) throws ApiException {
        okhttp3.Call localVarCall = changeDevMode_0ValidateBeforeCall(fqdn, value, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change HTTP Auth (asynchronously)
     * Enable or disable HTTP Basic Authentication
     * @param fqdn  (required)
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDevMode_0Async(String fqdn, String value, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeDevMode_0ValidateBeforeCall(fqdn, value, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearCache
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearCacheCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/clear-cache"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearCacheValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling clearCache(Async)");
        }
        

        okhttp3.Call localVarCall = clearCacheCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Clear the cache
     * Purges the Cloudflare CDN cache for your site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object clearCache(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = clearCacheWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Clear the cache
     * Purges the Cloudflare CDN cache for your site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> clearCacheWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = clearCacheValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear the cache (asynchronously)
     * Purges the Cloudflare CDN cache for your site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearCacheAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearCacheValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearCache_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearCache_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/clear-cache"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearCache_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling clearCache_0(Async)");
        }
        

        okhttp3.Call localVarCall = clearCache_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Clear the cache
     * Purges the Cloudflare CDN cache for your site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object clearCache_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = clearCache_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Clear the cache
     * Purges the Cloudflare CDN cache for your site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> clearCache_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = clearCache_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear the cache (asynchronously)
     * Purges the Cloudflare CDN cache for your site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearCache_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearCache_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commitSiteStage
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitSiteStageCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/stage/commit"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitSiteStageValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling commitSiteStage(Async)");
        }
        

        okhttp3.Call localVarCall = commitSiteStageCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Commit Stage Site
     * Sync the wp-content and database from your staging site to your live site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object commitSiteStage(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = commitSiteStageWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Commit Stage Site
     * Sync the wp-content and database from your staging site to your live site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> commitSiteStageWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = commitSiteStageValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Commit Stage Site (asynchronously)
     * Sync the wp-content and database from your staging site to your live site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitSiteStageAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitSiteStageValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commitSiteStage_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitSiteStage_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/stage/commit"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitSiteStage_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling commitSiteStage_0(Async)");
        }
        

        okhttp3.Call localVarCall = commitSiteStage_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Commit Stage Site
     * Sync the wp-content and database from your staging site to your live site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object commitSiteStage_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = commitSiteStage_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Commit Stage Site
     * Sync the wp-content and database from your staging site to your live site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> commitSiteStage_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = commitSiteStage_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Commit Stage Site (asynchronously)
     * Sync the wp-content and database from your staging site to your live site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitSiteStage_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitSiteStage_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmail
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmailCall(String fqdn, UserEmailCreate userEmailCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userEmailCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailValidateBeforeCall(String fqdn, UserEmailCreate userEmailCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createEmail(Async)");
        }
        

        okhttp3.Call localVarCall = createEmailCall(fqdn, userEmailCreate, _callback);
        return localVarCall;

    }

    /**
     * Create Email
     * Create a custom email account
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createEmail(String fqdn, UserEmailCreate userEmailCreate) throws ApiException {
        ApiResponse<Object> localVarResp = createEmailWithHttpInfo(fqdn, userEmailCreate);
        return localVarResp.getData();
    }

    /**
     * Create Email
     * Create a custom email account
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createEmailWithHttpInfo(String fqdn, UserEmailCreate userEmailCreate) throws ApiException {
        okhttp3.Call localVarCall = createEmailValidateBeforeCall(fqdn, userEmailCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Email (asynchronously)
     * Create a custom email account
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmailAsync(String fqdn, UserEmailCreate userEmailCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailValidateBeforeCall(fqdn, userEmailCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmail_0
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmail_0Call(String fqdn, UserEmailCreate userEmailCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userEmailCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmail_0ValidateBeforeCall(String fqdn, UserEmailCreate userEmailCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createEmail_0(Async)");
        }
        

        okhttp3.Call localVarCall = createEmail_0Call(fqdn, userEmailCreate, _callback);
        return localVarCall;

    }

    /**
     * Create Email
     * Create a custom email account
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createEmail_0(String fqdn, UserEmailCreate userEmailCreate) throws ApiException {
        ApiResponse<Object> localVarResp = createEmail_0WithHttpInfo(fqdn, userEmailCreate);
        return localVarResp.getData();
    }

    /**
     * Create Email
     * Create a custom email account
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createEmail_0WithHttpInfo(String fqdn, UserEmailCreate userEmailCreate) throws ApiException {
        okhttp3.Call localVarCall = createEmail_0ValidateBeforeCall(fqdn, userEmailCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Email (asynchronously)
     * Create a custom email account
     * @param fqdn  (required)
     * @param userEmailCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmail_0Async(String fqdn, UserEmailCreate userEmailCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmail_0ValidateBeforeCall(fqdn, userEmailCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createExternalPath
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExternalPathCall(String fqdn, ExternalPathCreate externalPathCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalPathCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/external-path"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExternalPathValidateBeforeCall(String fqdn, ExternalPathCreate externalPathCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createExternalPath(Async)");
        }
        

        okhttp3.Call localVarCall = createExternalPathCall(fqdn, externalPathCreate, _callback);
        return localVarCall;

    }

    /**
     * Create External Path
     * Connect an external URL to your site on a subpath
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createExternalPath(String fqdn, ExternalPathCreate externalPathCreate) throws ApiException {
        ApiResponse<Object> localVarResp = createExternalPathWithHttpInfo(fqdn, externalPathCreate);
        return localVarResp.getData();
    }

    /**
     * Create External Path
     * Connect an external URL to your site on a subpath
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createExternalPathWithHttpInfo(String fqdn, ExternalPathCreate externalPathCreate) throws ApiException {
        okhttp3.Call localVarCall = createExternalPathValidateBeforeCall(fqdn, externalPathCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create External Path (asynchronously)
     * Connect an external URL to your site on a subpath
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExternalPathAsync(String fqdn, ExternalPathCreate externalPathCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExternalPathValidateBeforeCall(fqdn, externalPathCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createExternalPath_0
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExternalPath_0Call(String fqdn, ExternalPathCreate externalPathCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalPathCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/external-path"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExternalPath_0ValidateBeforeCall(String fqdn, ExternalPathCreate externalPathCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createExternalPath_0(Async)");
        }
        

        okhttp3.Call localVarCall = createExternalPath_0Call(fqdn, externalPathCreate, _callback);
        return localVarCall;

    }

    /**
     * Create External Path
     * Connect an external URL to your site on a subpath
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createExternalPath_0(String fqdn, ExternalPathCreate externalPathCreate) throws ApiException {
        ApiResponse<Object> localVarResp = createExternalPath_0WithHttpInfo(fqdn, externalPathCreate);
        return localVarResp.getData();
    }

    /**
     * Create External Path
     * Connect an external URL to your site on a subpath
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createExternalPath_0WithHttpInfo(String fqdn, ExternalPathCreate externalPathCreate) throws ApiException {
        okhttp3.Call localVarCall = createExternalPath_0ValidateBeforeCall(fqdn, externalPathCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create External Path (asynchronously)
     * Connect an external URL to your site on a subpath
     * @param fqdn  (required)
     * @param externalPathCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExternalPath_0Async(String fqdn, ExternalPathCreate externalPathCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExternalPath_0ValidateBeforeCall(fqdn, externalPathCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSiteLive
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteLiveCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/api/v1/site_live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSiteLiveValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createSiteLiveCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create a site
     * Create a new site by providing your domain and your site&#39;s WordPress details
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return SiteLive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SiteLive createSiteLive(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<SiteLive> localVarResp = createSiteLiveWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Create a site
     * Create a new site by providing your domain and your site&#39;s WordPress details
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLive> createSiteLiveWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = createSiteLiveValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a site (asynchronously)
     * Create a new site by providing your domain and your site&#39;s WordPress details
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteLiveAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<SiteLive> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSiteLiveValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSiteLive_0
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteLive_0Call(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/api/v1/site_live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSiteLive_0ValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createSiteLive_0Call(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Create a site
     * Create a new site by providing your domain and your site&#39;s WordPress details
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return SiteLive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SiteLive createSiteLive_0(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<SiteLive> localVarResp = createSiteLive_0WithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Create a site
     * Create a new site by providing your domain and your site&#39;s WordPress details
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLive> createSiteLive_0WithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = createSiteLive_0ValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a site (asynchronously)
     * Create a new site by providing your domain and your site&#39;s WordPress details
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteLive_0Async(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<SiteLive> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSiteLive_0ValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSiteStage
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteStageCall(String fqdn, SiteStageCreate siteStageCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteStageCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/stage"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSiteStageValidateBeforeCall(String fqdn, SiteStageCreate siteStageCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createSiteStage(Async)");
        }
        

        okhttp3.Call localVarCall = createSiteStageCall(fqdn, siteStageCreate, _callback);
        return localVarCall;

    }

    /**
     * Create a Staging site
     * Create a staging site on which you can test changes
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createSiteStage(String fqdn, SiteStageCreate siteStageCreate) throws ApiException {
        ApiResponse<Object> localVarResp = createSiteStageWithHttpInfo(fqdn, siteStageCreate);
        return localVarResp.getData();
    }

    /**
     * Create a Staging site
     * Create a staging site on which you can test changes
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createSiteStageWithHttpInfo(String fqdn, SiteStageCreate siteStageCreate) throws ApiException {
        okhttp3.Call localVarCall = createSiteStageValidateBeforeCall(fqdn, siteStageCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staging site (asynchronously)
     * Create a staging site on which you can test changes
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteStageAsync(String fqdn, SiteStageCreate siteStageCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSiteStageValidateBeforeCall(fqdn, siteStageCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSiteStage_0
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteStage_0Call(String fqdn, SiteStageCreate siteStageCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteStageCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/stage"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSiteStage_0ValidateBeforeCall(String fqdn, SiteStageCreate siteStageCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createSiteStage_0(Async)");
        }
        

        okhttp3.Call localVarCall = createSiteStage_0Call(fqdn, siteStageCreate, _callback);
        return localVarCall;

    }

    /**
     * Create a Staging site
     * Create a staging site on which you can test changes
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createSiteStage_0(String fqdn, SiteStageCreate siteStageCreate) throws ApiException {
        ApiResponse<Object> localVarResp = createSiteStage_0WithHttpInfo(fqdn, siteStageCreate);
        return localVarResp.getData();
    }

    /**
     * Create a Staging site
     * Create a staging site on which you can test changes
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createSiteStage_0WithHttpInfo(String fqdn, SiteStageCreate siteStageCreate) throws ApiException {
        okhttp3.Call localVarCall = createSiteStage_0ValidateBeforeCall(fqdn, siteStageCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Staging site (asynchronously)
     * Create a staging site on which you can test changes
     * @param fqdn  (required)
     * @param siteStageCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteStageSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteStage_0Async(String fqdn, SiteStageCreate siteStageCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSiteStage_0ValidateBeforeCall(fqdn, siteStageCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTag
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagCall(String fqdn, TagCreate tagCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/tag"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagValidateBeforeCall(String fqdn, TagCreate tagCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createTag(Async)");
        }
        

        okhttp3.Call localVarCall = createTagCall(fqdn, tagCreate, _callback);
        return localVarCall;

    }

    /**
     * Create tag
     * Create a tag for organizational purposes for your site
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Tag createTag(String fqdn, TagCreate tagCreate) throws ApiException {
        ApiResponse<Tag> localVarResp = createTagWithHttpInfo(fqdn, tagCreate);
        return localVarResp.getData();
    }

    /**
     * Create tag
     * Create a tag for organizational purposes for your site
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> createTagWithHttpInfo(String fqdn, TagCreate tagCreate) throws ApiException {
        okhttp3.Call localVarCall = createTagValidateBeforeCall(fqdn, tagCreate, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tag (asynchronously)
     * Create a tag for organizational purposes for your site
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagAsync(String fqdn, TagCreate tagCreate, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagValidateBeforeCall(fqdn, tagCreate, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTag_0
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTag_0Call(String fqdn, TagCreate tagCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/tag"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTag_0ValidateBeforeCall(String fqdn, TagCreate tagCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createTag_0(Async)");
        }
        

        okhttp3.Call localVarCall = createTag_0Call(fqdn, tagCreate, _callback);
        return localVarCall;

    }

    /**
     * Create tag
     * Create a tag for organizational purposes for your site
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Tag createTag_0(String fqdn, TagCreate tagCreate) throws ApiException {
        ApiResponse<Tag> localVarResp = createTag_0WithHttpInfo(fqdn, tagCreate);
        return localVarResp.getData();
    }

    /**
     * Create tag
     * Create a tag for organizational purposes for your site
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> createTag_0WithHttpInfo(String fqdn, TagCreate tagCreate) throws ApiException {
        okhttp3.Call localVarCall = createTag_0ValidateBeforeCall(fqdn, tagCreate, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tag (asynchronously)
     * Create a tag for organizational purposes for your site
     * @param fqdn  (required)
     * @param tagCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTag_0Async(String fqdn, TagCreate tagCreate, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTag_0ValidateBeforeCall(fqdn, tagCreate, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDnsRecord
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDnsRecordCall(String dnsId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns/{dns_id}"
            .replaceAll("\\{" + "dns_id" + "\\}", localVarApiClient.escapeString(dnsId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDnsRecordValidateBeforeCall(String dnsId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dnsId' is set
        if (dnsId == null) {
            throw new ApiException("Missing the required parameter 'dnsId' when calling deleteDnsRecord(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteDnsRecord(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDnsRecordCall(dnsId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete DNS record
     * Delete a DNS record on your Nameserver configured site
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteDnsRecord(String dnsId, String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteDnsRecordWithHttpInfo(dnsId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete DNS record
     * Delete a DNS record on your Nameserver configured site
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteDnsRecordWithHttpInfo(String dnsId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteDnsRecordValidateBeforeCall(dnsId, fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete DNS record (asynchronously)
     * Delete a DNS record on your Nameserver configured site
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDnsRecordAsync(String dnsId, String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDnsRecordValidateBeforeCall(dnsId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDnsRecord_0
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDnsRecord_0Call(String dnsId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns/{dns_id}"
            .replaceAll("\\{" + "dns_id" + "\\}", localVarApiClient.escapeString(dnsId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDnsRecord_0ValidateBeforeCall(String dnsId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dnsId' is set
        if (dnsId == null) {
            throw new ApiException("Missing the required parameter 'dnsId' when calling deleteDnsRecord_0(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteDnsRecord_0(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDnsRecord_0Call(dnsId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete DNS record
     * Delete a DNS record on your Nameserver configured site
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteDnsRecord_0(String dnsId, String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteDnsRecord_0WithHttpInfo(dnsId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete DNS record
     * Delete a DNS record on your Nameserver configured site
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteDnsRecord_0WithHttpInfo(String dnsId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteDnsRecord_0ValidateBeforeCall(dnsId, fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete DNS record (asynchronously)
     * Delete a DNS record on your Nameserver configured site
     * @param dnsId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDnsRecord_0Async(String dnsId, String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDnsRecord_0ValidateBeforeCall(dnsId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEmail
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmailCall(String fqdn, String userEmailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()))
            .replaceAll("\\{" + "user_email_address" + "\\}", localVarApiClient.escapeString(userEmailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmailValidateBeforeCall(String fqdn, String userEmailAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteEmail(Async)");
        }
        
        // verify the required parameter 'userEmailAddress' is set
        if (userEmailAddress == null) {
            throw new ApiException("Missing the required parameter 'userEmailAddress' when calling deleteEmail(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEmailCall(fqdn, userEmailAddress, _callback);
        return localVarCall;

    }

    /**
     * Delete Email
     * Delete a custom email account
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteEmail(String fqdn, String userEmailAddress) throws ApiException {
        ApiResponse<Object> localVarResp = deleteEmailWithHttpInfo(fqdn, userEmailAddress);
        return localVarResp.getData();
    }

    /**
     * Delete Email
     * Delete a custom email account
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteEmailWithHttpInfo(String fqdn, String userEmailAddress) throws ApiException {
        okhttp3.Call localVarCall = deleteEmailValidateBeforeCall(fqdn, userEmailAddress, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Email (asynchronously)
     * Delete a custom email account
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmailAsync(String fqdn, String userEmailAddress, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmailValidateBeforeCall(fqdn, userEmailAddress, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEmail_0
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmail_0Call(String fqdn, String userEmailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()))
            .replaceAll("\\{" + "user_email_address" + "\\}", localVarApiClient.escapeString(userEmailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmail_0ValidateBeforeCall(String fqdn, String userEmailAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteEmail_0(Async)");
        }
        
        // verify the required parameter 'userEmailAddress' is set
        if (userEmailAddress == null) {
            throw new ApiException("Missing the required parameter 'userEmailAddress' when calling deleteEmail_0(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEmail_0Call(fqdn, userEmailAddress, _callback);
        return localVarCall;

    }

    /**
     * Delete Email
     * Delete a custom email account
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteEmail_0(String fqdn, String userEmailAddress) throws ApiException {
        ApiResponse<Object> localVarResp = deleteEmail_0WithHttpInfo(fqdn, userEmailAddress);
        return localVarResp.getData();
    }

    /**
     * Delete Email
     * Delete a custom email account
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteEmail_0WithHttpInfo(String fqdn, String userEmailAddress) throws ApiException {
        okhttp3.Call localVarCall = deleteEmail_0ValidateBeforeCall(fqdn, userEmailAddress, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Email (asynchronously)
     * Delete a custom email account
     * @param fqdn  (required)
     * @param userEmailAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmail_0Async(String fqdn, String userEmailAddress, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmail_0ValidateBeforeCall(fqdn, userEmailAddress, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExternalPath
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExternalPathCall(String externalPathId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/external-path/{external_path_id}"
            .replaceAll("\\{" + "external_path_id" + "\\}", localVarApiClient.escapeString(externalPathId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExternalPathValidateBeforeCall(String externalPathId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'externalPathId' is set
        if (externalPathId == null) {
            throw new ApiException("Missing the required parameter 'externalPathId' when calling deleteExternalPath(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteExternalPath(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExternalPathCall(externalPathId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete External Path
     * Delete the link between an external URL and your site
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteExternalPath(String externalPathId, String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteExternalPathWithHttpInfo(externalPathId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete External Path
     * Delete the link between an external URL and your site
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteExternalPathWithHttpInfo(String externalPathId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteExternalPathValidateBeforeCall(externalPathId, fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete External Path (asynchronously)
     * Delete the link between an external URL and your site
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExternalPathAsync(String externalPathId, String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExternalPathValidateBeforeCall(externalPathId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExternalPath_0
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExternalPath_0Call(String externalPathId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/external-path/{external_path_id}"
            .replaceAll("\\{" + "external_path_id" + "\\}", localVarApiClient.escapeString(externalPathId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExternalPath_0ValidateBeforeCall(String externalPathId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'externalPathId' is set
        if (externalPathId == null) {
            throw new ApiException("Missing the required parameter 'externalPathId' when calling deleteExternalPath_0(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteExternalPath_0(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExternalPath_0Call(externalPathId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete External Path
     * Delete the link between an external URL and your site
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteExternalPath_0(String externalPathId, String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteExternalPath_0WithHttpInfo(externalPathId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete External Path
     * Delete the link between an external URL and your site
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteExternalPath_0WithHttpInfo(String externalPathId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteExternalPath_0ValidateBeforeCall(externalPathId, fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete External Path (asynchronously)
     * Delete the link between an external URL and your site
     * @param externalPathId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExternalPath_0Async(String externalPathId, String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExternalPath_0ValidateBeforeCall(externalPathId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSiteLive
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteLiveCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSiteLiveValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteSiteLive(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSiteLiveCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete your live site
     * This permanently deletes your site, and its stage site if one exists
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSiteLive(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSiteLiveWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete your live site
     * This permanently deletes your site, and its stage site if one exists
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSiteLiveWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteSiteLiveValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete your live site (asynchronously)
     * This permanently deletes your site, and its stage site if one exists
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteLiveAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSiteLiveValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSiteLive_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteLive_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSiteLive_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteSiteLive_0(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSiteLive_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete your live site
     * This permanently deletes your site, and its stage site if one exists
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSiteLive_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSiteLive_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete your live site
     * This permanently deletes your site, and its stage site if one exists
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSiteLive_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteSiteLive_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete your live site (asynchronously)
     * This permanently deletes your site, and its stage site if one exists
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteLive_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSiteLive_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSiteStage
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteStageCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/stage"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSiteStageValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteSiteStage(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSiteStageCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete Stage Site
     * Delete your staging site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSiteStage(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSiteStageWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete Stage Site
     * Delete your staging site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSiteStageWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteSiteStageValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Stage Site (asynchronously)
     * Delete your staging site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteStageAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSiteStageValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSiteStage_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteStage_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/stage"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSiteStage_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteSiteStage_0(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSiteStage_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Delete Stage Site
     * Delete your staging site
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSiteStage_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSiteStage_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Delete Stage Site
     * Delete your staging site
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSiteStage_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteSiteStage_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Stage Site (asynchronously)
     * Delete your staging site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteStage_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSiteStage_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTag
     * @param tagId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagCall(String tagId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/tag/{tag_id}"
            .replaceAll("\\{" + "tag_id" + "\\}", localVarApiClient.escapeString(tagId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagValidateBeforeCall(String tagId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling deleteTag(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteTag(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTagCall(tagId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get a tag
     * Get a tag by its ID
     * @param tagId  (required)
     * @param fqdn  (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> deleteTag(String tagId, String fqdn) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = deleteTagWithHttpInfo(tagId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Get a tag
     * Get a tag by its ID
     * @param tagId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> deleteTagWithHttpInfo(String tagId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(tagId, fqdn, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a tag (asynchronously)
     * Get a tag by its ID
     * @param tagId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagAsync(String tagId, String fqdn, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(tagId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTag_0
     * @param tagId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTag_0Call(String tagId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/tag/{tag_id}"
            .replaceAll("\\{" + "tag_id" + "\\}", localVarApiClient.escapeString(tagId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTag_0ValidateBeforeCall(String tagId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling deleteTag_0(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling deleteTag_0(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTag_0Call(tagId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get a tag
     * Get a tag by its ID
     * @param tagId  (required)
     * @param fqdn  (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> deleteTag_0(String tagId, String fqdn) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = deleteTag_0WithHttpInfo(tagId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Get a tag
     * Get a tag by its ID
     * @param tagId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> deleteTag_0WithHttpInfo(String tagId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = deleteTag_0ValidateBeforeCall(tagId, fqdn, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a tag (asynchronously)
     * Get a tag by its ID
     * @param tagId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTag_0Async(String tagId, String fqdn, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTag_0ValidateBeforeCall(tagId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableFirewall
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableFirewallCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/firewall"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableFirewallValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling disableFirewall(Async)");
        }
        

        okhttp3.Call localVarCall = disableFirewallCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Disable the firewall
     * Disable wp-login firewall
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object disableFirewall(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = disableFirewallWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Disable the firewall
     * Disable wp-login firewall
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disableFirewallWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = disableFirewallValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable the firewall (asynchronously)
     * Disable wp-login firewall
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableFirewallAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableFirewallValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableFirewall_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableFirewall_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/firewall"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableFirewall_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling disableFirewall_0(Async)");
        }
        

        okhttp3.Call localVarCall = disableFirewall_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Disable the firewall
     * Disable wp-login firewall
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object disableFirewall_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = disableFirewall_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Disable the firewall
     * Disable wp-login firewall
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disableFirewall_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = disableFirewall_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable the firewall (asynchronously)
     * Disable wp-login firewall
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableFirewall_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableFirewall_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableFirewall
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableFirewallCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/firewall"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableFirewallValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling enableFirewall(Async)");
        }
        

        okhttp3.Call localVarCall = enableFirewallCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Enable the firewall
     * Enable the wp-login firewall
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object enableFirewall(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = enableFirewallWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Enable the firewall
     * Enable the wp-login firewall
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> enableFirewallWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = enableFirewallValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable the firewall (asynchronously)
     * Enable the wp-login firewall
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableFirewallAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableFirewallValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableFirewall_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableFirewall_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/firewall"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableFirewall_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling enableFirewall_0(Async)");
        }
        

        okhttp3.Call localVarCall = enableFirewall_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Enable the firewall
     * Enable the wp-login firewall
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object enableFirewall_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = enableFirewall_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Enable the firewall
     * Enable the wp-login firewall
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> enableFirewall_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = enableFirewall_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable the firewall (asynchronously)
     * Enable the wp-login firewall
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of allowed IPs </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableFirewall_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableFirewall_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDnsRecords
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDnsRecordsCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDnsRecordsValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getDnsRecords(Async)");
        }
        

        okhttp3.Call localVarCall = getDnsRecordsCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get DNS records
     * Get a nameserver configured site&#39;s DNS records
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getDnsRecords(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getDnsRecordsWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get DNS records
     * Get a nameserver configured site&#39;s DNS records
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDnsRecordsWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getDnsRecordsValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DNS records (asynchronously)
     * Get a nameserver configured site&#39;s DNS records
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDnsRecordsAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDnsRecordsValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDnsRecords_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDnsRecords_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDnsRecords_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getDnsRecords_0(Async)");
        }
        

        okhttp3.Call localVarCall = getDnsRecords_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get DNS records
     * Get a nameserver configured site&#39;s DNS records
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getDnsRecords_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getDnsRecords_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get DNS records
     * Get a nameserver configured site&#39;s DNS records
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDnsRecords_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getDnsRecords_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DNS records (asynchronously)
     * Get a nameserver configured site&#39;s DNS records
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDnsRecords_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDnsRecords_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmails
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmailsCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailsValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getEmails(Async)");
        }
        

        okhttp3.Call localVarCall = getEmailsCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get Emails
     * Get all custom email accounts
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getEmails(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getEmailsWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get Emails
     * Get all custom email accounts
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getEmailsWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getEmailsValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Emails (asynchronously)
     * Get all custom email accounts
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmailsAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailsValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmails_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmails_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmails_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getEmails_0(Async)");
        }
        

        okhttp3.Call localVarCall = getEmails_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get Emails
     * Get all custom email accounts
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getEmails_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getEmails_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get Emails
     * Get all custom email accounts
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getEmails_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getEmails_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Emails (asynchronously)
     * Get all custom email accounts
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of UserEmailSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmails_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmails_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExternalPaths
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExternalPathsCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/external-path"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExternalPathsValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getExternalPaths(Async)");
        }
        

        okhttp3.Call localVarCall = getExternalPathsCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get External Paths
     * Get details about your site&#39;s external path configs
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getExternalPaths(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getExternalPathsWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get External Paths
     * Get details about your site&#39;s external path configs
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getExternalPathsWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getExternalPathsValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get External Paths (asynchronously)
     * Get details about your site&#39;s external path configs
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExternalPathsAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExternalPathsValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExternalPaths_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExternalPaths_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/external-path"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExternalPaths_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getExternalPaths_0(Async)");
        }
        

        okhttp3.Call localVarCall = getExternalPaths_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get External Paths
     * Get details about your site&#39;s external path configs
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getExternalPaths_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getExternalPaths_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get External Paths
     * Get details about your site&#39;s external path configs
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getExternalPaths_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getExternalPaths_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get External Paths (asynchronously)
     * Get details about your site&#39;s external path configs
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ExternalPathSchema </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExternalPaths_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExternalPaths_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesAtPoint
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAtPointCall(String fqdn, OffsetDateTime restorePoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/files"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (restorePoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restore_point", restorePoint));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesAtPointValidateBeforeCall(String fqdn, OffsetDateTime restorePoint, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getFilesAtPoint(Async)");
        }
        
        // verify the required parameter 'restorePoint' is set
        if (restorePoint == null) {
            throw new ApiException("Missing the required parameter 'restorePoint' when calling getFilesAtPoint(Async)");
        }
        

        okhttp3.Call localVarCall = getFilesAtPointCall(fqdn, restorePoint, _callback);
        return localVarCall;

    }

    /**
     * PIT Files
     * Get a list of wp-content files at a point in time
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getFilesAtPoint(String fqdn, OffsetDateTime restorePoint) throws ApiException {
        ApiResponse<Object> localVarResp = getFilesAtPointWithHttpInfo(fqdn, restorePoint);
        return localVarResp.getData();
    }

    /**
     * PIT Files
     * Get a list of wp-content files at a point in time
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getFilesAtPointWithHttpInfo(String fqdn, OffsetDateTime restorePoint) throws ApiException {
        okhttp3.Call localVarCall = getFilesAtPointValidateBeforeCall(fqdn, restorePoint, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PIT Files (asynchronously)
     * Get a list of wp-content files at a point in time
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAtPointAsync(String fqdn, OffsetDateTime restorePoint, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesAtPointValidateBeforeCall(fqdn, restorePoint, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesAtPoint_0
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAtPoint_0Call(String fqdn, OffsetDateTime restorePoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/files"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (restorePoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restore_point", restorePoint));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesAtPoint_0ValidateBeforeCall(String fqdn, OffsetDateTime restorePoint, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getFilesAtPoint_0(Async)");
        }
        
        // verify the required parameter 'restorePoint' is set
        if (restorePoint == null) {
            throw new ApiException("Missing the required parameter 'restorePoint' when calling getFilesAtPoint_0(Async)");
        }
        

        okhttp3.Call localVarCall = getFilesAtPoint_0Call(fqdn, restorePoint, _callback);
        return localVarCall;

    }

    /**
     * PIT Files
     * Get a list of wp-content files at a point in time
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getFilesAtPoint_0(String fqdn, OffsetDateTime restorePoint) throws ApiException {
        ApiResponse<Object> localVarResp = getFilesAtPoint_0WithHttpInfo(fqdn, restorePoint);
        return localVarResp.getData();
    }

    /**
     * PIT Files
     * Get a list of wp-content files at a point in time
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getFilesAtPoint_0WithHttpInfo(String fqdn, OffsetDateTime restorePoint) throws ApiException {
        okhttp3.Call localVarCall = getFilesAtPoint_0ValidateBeforeCall(fqdn, restorePoint, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PIT Files (asynchronously)
     * Get a list of wp-content files at a point in time
     * @param fqdn  (required)
     * @param restorePoint  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAtPoint_0Async(String fqdn, OffsetDateTime restorePoint, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesAtPoint_0ValidateBeforeCall(fqdn, restorePoint, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailDns
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailDnsCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailDnsValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getMailDns(Async)");
        }
        

        okhttp3.Call localVarCall = getMailDnsCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get Required mail DNS records
     * Get the required records for our custom email service
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getMailDns(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getMailDnsWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get Required mail DNS records
     * Get the required records for our custom email service
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getMailDnsWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getMailDnsValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Required mail DNS records (asynchronously)
     * Get the required records for our custom email service
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailDnsAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailDnsValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailDns_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailDns_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns/email_dns_records"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailDns_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getMailDns_0(Async)");
        }
        

        okhttp3.Call localVarCall = getMailDns_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get Required mail DNS records
     * Get the required records for our custom email service
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getMailDns_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getMailDns_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get Required mail DNS records
     * Get the required records for our custom email service
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getMailDns_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getMailDns_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Required mail DNS records (asynchronously)
     * Get the required records for our custom email service
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of requisite DNS records </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailDns_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailDns_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPitRestore
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestoreCall(String pitRestoreId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/{pit_restore_id}"
            .replaceAll("\\{" + "pit_restore_id" + "\\}", localVarApiClient.escapeString(pitRestoreId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPitRestoreValidateBeforeCall(String pitRestoreId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pitRestoreId' is set
        if (pitRestoreId == null) {
            throw new ApiException("Missing the required parameter 'pitRestoreId' when calling getPitRestore(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getPitRestore(Async)");
        }
        

        okhttp3.Call localVarCall = getPitRestoreCall(pitRestoreId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get PIT Restore
     * Get the results of a site&#39;s restore to a previous point in time
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getPitRestore(String pitRestoreId, String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getPitRestoreWithHttpInfo(pitRestoreId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Get PIT Restore
     * Get the results of a site&#39;s restore to a previous point in time
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getPitRestoreWithHttpInfo(String pitRestoreId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getPitRestoreValidateBeforeCall(pitRestoreId, fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PIT Restore (asynchronously)
     * Get the results of a site&#39;s restore to a previous point in time
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestoreAsync(String pitRestoreId, String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPitRestoreValidateBeforeCall(pitRestoreId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPitRestore_0
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestore_0Call(String pitRestoreId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore/{pit_restore_id}"
            .replaceAll("\\{" + "pit_restore_id" + "\\}", localVarApiClient.escapeString(pitRestoreId.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPitRestore_0ValidateBeforeCall(String pitRestoreId, String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pitRestoreId' is set
        if (pitRestoreId == null) {
            throw new ApiException("Missing the required parameter 'pitRestoreId' when calling getPitRestore_0(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getPitRestore_0(Async)");
        }
        

        okhttp3.Call localVarCall = getPitRestore_0Call(pitRestoreId, fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get PIT Restore
     * Get the results of a site&#39;s restore to a previous point in time
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getPitRestore_0(String pitRestoreId, String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getPitRestore_0WithHttpInfo(pitRestoreId, fqdn);
        return localVarResp.getData();
    }

    /**
     * Get PIT Restore
     * Get the results of a site&#39;s restore to a previous point in time
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getPitRestore_0WithHttpInfo(String pitRestoreId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getPitRestore_0ValidateBeforeCall(pitRestoreId, fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PIT Restore (asynchronously)
     * Get the results of a site&#39;s restore to a previous point in time
     * @param pitRestoreId  (required)
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestore_0Async(String pitRestoreId, String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPitRestore_0ValidateBeforeCall(pitRestoreId, fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPitRestores
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestoresCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPitRestoresValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getPitRestores(Async)");
        }
        

        okhttp3.Call localVarCall = getPitRestoresCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get PIT Restores
     * Get all the results of a site&#39;s restores to a previous point in time
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getPitRestores(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getPitRestoresWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get PIT Restores
     * Get all the results of a site&#39;s restores to a previous point in time
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getPitRestoresWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getPitRestoresValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PIT Restores (asynchronously)
     * Get all the results of a site&#39;s restores to a previous point in time
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestoresAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPitRestoresValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPitRestores_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestores_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPitRestores_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getPitRestores_0(Async)");
        }
        

        okhttp3.Call localVarCall = getPitRestores_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get PIT Restores
     * Get all the results of a site&#39;s restores to a previous point in time
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getPitRestores_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = getPitRestores_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get PIT Restores
     * Get all the results of a site&#39;s restores to a previous point in time
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getPitRestores_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getPitRestores_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PIT Restores (asynchronously)
     * Get all the results of a site&#39;s restores to a previous point in time
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restores details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPitRestores_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPitRestores_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSiteLive
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteLiveCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteLiveValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getSiteLive(Async)");
        }
        

        okhttp3.Call localVarCall = getSiteLiveCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get your live site
     * Get details about your live site
     * @param fqdn  (required)
     * @return SiteLive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SiteLive getSiteLive(String fqdn) throws ApiException {
        ApiResponse<SiteLive> localVarResp = getSiteLiveWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get your live site
     * Get details about your live site
     * @param fqdn  (required)
     * @return ApiResponse&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLive> getSiteLiveWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getSiteLiveValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your live site (asynchronously)
     * Get details about your live site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteLiveAsync(String fqdn, final ApiCallback<SiteLive> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteLiveValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSiteLive_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteLive_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteLive_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getSiteLive_0(Async)");
        }
        

        okhttp3.Call localVarCall = getSiteLive_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get your live site
     * Get details about your live site
     * @param fqdn  (required)
     * @return SiteLive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SiteLive getSiteLive_0(String fqdn) throws ApiException {
        ApiResponse<SiteLive> localVarResp = getSiteLive_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get your live site
     * Get details about your live site
     * @param fqdn  (required)
     * @return ApiResponse&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLive> getSiteLive_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getSiteLive_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your live site (asynchronously)
     * Get details about your live site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteLive_0Async(String fqdn, final ApiCallback<SiteLive> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteLive_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitePlanUsage
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitePlanUsageCall(String fqdn, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/usage"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitePlanUsageValidateBeforeCall(String fqdn, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getSitePlanUsage(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getSitePlanUsage(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getSitePlanUsage(Async)");
        }
        

        okhttp3.Call localVarCall = getSitePlanUsageCall(fqdn, start, end, _callback);
        return localVarCall;

    }

    /**
     * Get Site Plan Usage
     * Get your visits and storage for a site at a given interval
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getSitePlanUsage(String fqdn, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        ApiResponse<Object> localVarResp = getSitePlanUsageWithHttpInfo(fqdn, start, end);
        return localVarResp.getData();
    }

    /**
     * Get Site Plan Usage
     * Get your visits and storage for a site at a given interval
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSitePlanUsageWithHttpInfo(String fqdn, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = getSitePlanUsageValidateBeforeCall(fqdn, start, end, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Site Plan Usage (asynchronously)
     * Get your visits and storage for a site at a given interval
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitePlanUsageAsync(String fqdn, OffsetDateTime start, OffsetDateTime end, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitePlanUsageValidateBeforeCall(fqdn, start, end, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitePlanUsage_0
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitePlanUsage_0Call(String fqdn, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/usage"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitePlanUsage_0ValidateBeforeCall(String fqdn, OffsetDateTime start, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getSitePlanUsage_0(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getSitePlanUsage_0(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getSitePlanUsage_0(Async)");
        }
        

        okhttp3.Call localVarCall = getSitePlanUsage_0Call(fqdn, start, end, _callback);
        return localVarCall;

    }

    /**
     * Get Site Plan Usage
     * Get your visits and storage for a site at a given interval
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getSitePlanUsage_0(String fqdn, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        ApiResponse<Object> localVarResp = getSitePlanUsage_0WithHttpInfo(fqdn, start, end);
        return localVarResp.getData();
    }

    /**
     * Get Site Plan Usage
     * Get your visits and storage for a site at a given interval
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSitePlanUsage_0WithHttpInfo(String fqdn, OffsetDateTime start, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = getSitePlanUsage_0ValidateBeforeCall(fqdn, start, end, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Site Plan Usage (asynchronously)
     * Get your visits and storage for a site at a given interval
     * @param fqdn  (required)
     * @param start  (required)
     * @param end  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitePlanUsage_0Async(String fqdn, OffsetDateTime start, OffsetDateTime end, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitePlanUsage_0ValidateBeforeCall(fqdn, start, end, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitesLive
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesLiveCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitesLiveValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSitesLiveCall(_callback);
        return localVarCall;

    }

    /**
     * Get your sites
     * Get details about all of your live sites
     * @return List&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public List<SiteLive> getSitesLive() throws ApiException {
        ApiResponse<List<SiteLive>> localVarResp = getSitesLiveWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get your sites
     * Get details about all of your live sites
     * @return ApiResponse&lt;List&lt;SiteLive&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SiteLive>> getSitesLiveWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSitesLiveValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SiteLive>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your sites (asynchronously)
     * Get details about all of your live sites
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesLiveAsync(final ApiCallback<List<SiteLive>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitesLiveValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SiteLive>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitesLive_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesLive_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitesLive_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSitesLive_0Call(_callback);
        return localVarCall;

    }

    /**
     * Get your sites
     * Get details about all of your live sites
     * @return List&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public List<SiteLive> getSitesLive_0() throws ApiException {
        ApiResponse<List<SiteLive>> localVarResp = getSitesLive_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get your sites
     * Get details about all of your live sites
     * @return ApiResponse&lt;List&lt;SiteLive&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SiteLive>> getSitesLive_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSitesLive_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SiteLive>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your sites (asynchronously)
     * Get details about all of your live sites
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesLive_0Async(final ApiCallback<List<SiteLive>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitesLive_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SiteLive>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTags
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/tag"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getTags(Async)");
        }
        

        okhttp3.Call localVarCall = getTagsCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get tags
     * Get all the tags for your site
     * @param fqdn  (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> getTags(String fqdn) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = getTagsWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get tags
     * Get all the tags for your site
     * @param fqdn  (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> getTagsWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getTagsValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags (asynchronously)
     * Get all the tags for your site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsAsync(String fqdn, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTags_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTags_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/tag"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTags_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getTags_0(Async)");
        }
        

        okhttp3.Call localVarCall = getTags_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * Get tags
     * Get all the tags for your site
     * @param fqdn  (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> getTags_0(String fqdn) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = getTags_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * Get tags
     * Get all the tags for your site
     * @param fqdn  (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> getTags_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = getTags_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags (asynchronously)
     * Get all the tags for your site
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTags_0Async(String fqdn, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTags_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyFirewall
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyFirewallCall(String fqdn, String ipAddress, String addOrDel, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/firewall"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addOrDel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("add_or_del", addOrDel));
        }

        if (ipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip_address", ipAddress));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyFirewallValidateBeforeCall(String fqdn, String ipAddress, String addOrDel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling modifyFirewall(Async)");
        }
        
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling modifyFirewall(Async)");
        }
        

        okhttp3.Call localVarCall = modifyFirewallCall(fqdn, ipAddress, addOrDel, _callback);
        return localVarCall;

    }

    /**
     * Modify the firewall
     * Add/Delete an IP from the wp-login firewall
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object modifyFirewall(String fqdn, String ipAddress, String addOrDel) throws ApiException {
        ApiResponse<Object> localVarResp = modifyFirewallWithHttpInfo(fqdn, ipAddress, addOrDel);
        return localVarResp.getData();
    }

    /**
     * Modify the firewall
     * Add/Delete an IP from the wp-login firewall
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modifyFirewallWithHttpInfo(String fqdn, String ipAddress, String addOrDel) throws ApiException {
        okhttp3.Call localVarCall = modifyFirewallValidateBeforeCall(fqdn, ipAddress, addOrDel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the firewall (asynchronously)
     * Add/Delete an IP from the wp-login firewall
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyFirewallAsync(String fqdn, String ipAddress, String addOrDel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyFirewallValidateBeforeCall(fqdn, ipAddress, addOrDel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyFirewall_0
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyFirewall_0Call(String fqdn, String ipAddress, String addOrDel, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/firewall"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addOrDel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("add_or_del", addOrDel));
        }

        if (ipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip_address", ipAddress));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyFirewall_0ValidateBeforeCall(String fqdn, String ipAddress, String addOrDel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling modifyFirewall_0(Async)");
        }
        
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling modifyFirewall_0(Async)");
        }
        

        okhttp3.Call localVarCall = modifyFirewall_0Call(fqdn, ipAddress, addOrDel, _callback);
        return localVarCall;

    }

    /**
     * Modify the firewall
     * Add/Delete an IP from the wp-login firewall
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object modifyFirewall_0(String fqdn, String ipAddress, String addOrDel) throws ApiException {
        ApiResponse<Object> localVarResp = modifyFirewall_0WithHttpInfo(fqdn, ipAddress, addOrDel);
        return localVarResp.getData();
    }

    /**
     * Modify the firewall
     * Add/Delete an IP from the wp-login firewall
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modifyFirewall_0WithHttpInfo(String fqdn, String ipAddress, String addOrDel) throws ApiException {
        okhttp3.Call localVarCall = modifyFirewall_0ValidateBeforeCall(fqdn, ipAddress, addOrDel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the firewall (asynchronously)
     * Add/Delete an IP from the wp-login firewall
     * @param fqdn  (required)
     * @param ipAddress  (required)
     * @param addOrDel  (optional, default to add)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyFirewall_0Async(String fqdn, String ipAddress, String addOrDel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyFirewall_0ValidateBeforeCall(fqdn, ipAddress, addOrDel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreSite
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSiteCall(String fqdn, PITRestoreCreate piTRestoreCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = piTRestoreCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreSiteValidateBeforeCall(String fqdn, PITRestoreCreate piTRestoreCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling restoreSite(Async)");
        }
        
        // verify the required parameter 'piTRestoreCreate' is set
        if (piTRestoreCreate == null) {
            throw new ApiException("Missing the required parameter 'piTRestoreCreate' when calling restoreSite(Async)");
        }
        

        okhttp3.Call localVarCall = restoreSiteCall(fqdn, piTRestoreCreate, _callback);
        return localVarCall;

    }

    /**
     * Create PIT Restore
     * Restore your site to a previous point in time, down to the minute
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object restoreSite(String fqdn, PITRestoreCreate piTRestoreCreate) throws ApiException {
        ApiResponse<Object> localVarResp = restoreSiteWithHttpInfo(fqdn, piTRestoreCreate);
        return localVarResp.getData();
    }

    /**
     * Create PIT Restore
     * Restore your site to a previous point in time, down to the minute
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> restoreSiteWithHttpInfo(String fqdn, PITRestoreCreate piTRestoreCreate) throws ApiException {
        okhttp3.Call localVarCall = restoreSiteValidateBeforeCall(fqdn, piTRestoreCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create PIT Restore (asynchronously)
     * Restore your site to a previous point in time, down to the minute
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSiteAsync(String fqdn, PITRestoreCreate piTRestoreCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreSiteValidateBeforeCall(fqdn, piTRestoreCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreSite_0
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSite_0Call(String fqdn, PITRestoreCreate piTRestoreCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = piTRestoreCreate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/pit-restore"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreSite_0ValidateBeforeCall(String fqdn, PITRestoreCreate piTRestoreCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling restoreSite_0(Async)");
        }
        
        // verify the required parameter 'piTRestoreCreate' is set
        if (piTRestoreCreate == null) {
            throw new ApiException("Missing the required parameter 'piTRestoreCreate' when calling restoreSite_0(Async)");
        }
        

        okhttp3.Call localVarCall = restoreSite_0Call(fqdn, piTRestoreCreate, _callback);
        return localVarCall;

    }

    /**
     * Create PIT Restore
     * Restore your site to a previous point in time, down to the minute
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object restoreSite_0(String fqdn, PITRestoreCreate piTRestoreCreate) throws ApiException {
        ApiResponse<Object> localVarResp = restoreSite_0WithHttpInfo(fqdn, piTRestoreCreate);
        return localVarResp.getData();
    }

    /**
     * Create PIT Restore
     * Restore your site to a previous point in time, down to the minute
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> restoreSite_0WithHttpInfo(String fqdn, PITRestoreCreate piTRestoreCreate) throws ApiException {
        okhttp3.Call localVarCall = restoreSite_0ValidateBeforeCall(fqdn, piTRestoreCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create PIT Restore (asynchronously)
     * Restore your site to a previous point in time, down to the minute
     * @param fqdn  (required)
     * @param piTRestoreCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PIT Restore details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSite_0Async(String fqdn, PITRestoreCreate piTRestoreCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreSite_0ValidateBeforeCall(fqdn, piTRestoreCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shellCmdSiteLive
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shellCmdSiteLiveCall(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/cmd"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cmd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cmd", cmd));
        }

        if (cwd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cwd", cwd));
        }

        if (autoTrackDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auto_track_dir", autoTrackDir));
        }

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shellCmdSiteLiveValidateBeforeCall(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling shellCmdSiteLive(Async)");
        }
        
        // verify the required parameter 'cmd' is set
        if (cmd == null) {
            throw new ApiException("Missing the required parameter 'cmd' when calling shellCmdSiteLive(Async)");
        }
        

        okhttp3.Call localVarCall = shellCmdSiteLiveCall(fqdn, cmd, cwd, autoTrackDir, stage, _callback);
        return localVarCall;

    }

    /**
     * Execute shell command
     * Send a bash shell command to your site, such as a WP-CLI command
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object shellCmdSiteLive(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage) throws ApiException {
        ApiResponse<Object> localVarResp = shellCmdSiteLiveWithHttpInfo(fqdn, cmd, cwd, autoTrackDir, stage);
        return localVarResp.getData();
    }

    /**
     * Execute shell command
     * Send a bash shell command to your site, such as a WP-CLI command
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> shellCmdSiteLiveWithHttpInfo(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage) throws ApiException {
        okhttp3.Call localVarCall = shellCmdSiteLiveValidateBeforeCall(fqdn, cmd, cwd, autoTrackDir, stage, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute shell command (asynchronously)
     * Send a bash shell command to your site, such as a WP-CLI command
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shellCmdSiteLiveAsync(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = shellCmdSiteLiveValidateBeforeCall(fqdn, cmd, cwd, autoTrackDir, stage, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shellCmdSiteLive_0
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shellCmdSiteLive_0Call(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/cmd"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cmd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cmd", cmd));
        }

        if (cwd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cwd", cwd));
        }

        if (autoTrackDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auto_track_dir", autoTrackDir));
        }

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shellCmdSiteLive_0ValidateBeforeCall(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling shellCmdSiteLive_0(Async)");
        }
        
        // verify the required parameter 'cmd' is set
        if (cmd == null) {
            throw new ApiException("Missing the required parameter 'cmd' when calling shellCmdSiteLive_0(Async)");
        }
        

        okhttp3.Call localVarCall = shellCmdSiteLive_0Call(fqdn, cmd, cwd, autoTrackDir, stage, _callback);
        return localVarCall;

    }

    /**
     * Execute shell command
     * Send a bash shell command to your site, such as a WP-CLI command
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object shellCmdSiteLive_0(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage) throws ApiException {
        ApiResponse<Object> localVarResp = shellCmdSiteLive_0WithHttpInfo(fqdn, cmd, cwd, autoTrackDir, stage);
        return localVarResp.getData();
    }

    /**
     * Execute shell command
     * Send a bash shell command to your site, such as a WP-CLI command
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> shellCmdSiteLive_0WithHttpInfo(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage) throws ApiException {
        okhttp3.Call localVarCall = shellCmdSiteLive_0ValidateBeforeCall(fqdn, cmd, cwd, autoTrackDir, stage, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute shell command (asynchronously)
     * Send a bash shell command to your site, such as a WP-CLI command
     * @param fqdn  (required)
     * @param cmd  (required)
     * @param cwd  (optional, default to /bitnami/wordpress/wp-content)
     * @param autoTrackDir  (optional, default to false)
     * @param stage  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shellCmdSiteLive_0Async(String fqdn, String cmd, String cwd, Boolean autoTrackDir, Boolean stage, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = shellCmdSiteLive_0ValidateBeforeCall(fqdn, cmd, cwd, autoTrackDir, stage, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDnsRecord
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDnsRecordCall(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dnsType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_type", dnsType));
        }

        if (dnsHostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_hostname", dnsHostname));
        }

        if (dnsContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_content", dnsContent));
        }

        if (dnsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_id", dnsId));
        }

        if (dnsPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_priority", dnsPriority));
        }

        if (dnsTtl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_ttl", dnsTtl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDnsRecordValidateBeforeCall(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling updateDnsRecord(Async)");
        }
        
        // verify the required parameter 'dnsType' is set
        if (dnsType == null) {
            throw new ApiException("Missing the required parameter 'dnsType' when calling updateDnsRecord(Async)");
        }
        
        // verify the required parameter 'dnsHostname' is set
        if (dnsHostname == null) {
            throw new ApiException("Missing the required parameter 'dnsHostname' when calling updateDnsRecord(Async)");
        }
        
        // verify the required parameter 'dnsContent' is set
        if (dnsContent == null) {
            throw new ApiException("Missing the required parameter 'dnsContent' when calling updateDnsRecord(Async)");
        }
        

        okhttp3.Call localVarCall = updateDnsRecordCall(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, _callback);
        return localVarCall;

    }

    /**
     * Update DNS record
     * Update a DNS record on your Nameserver configured site
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDnsRecord(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl) throws ApiException {
        ApiResponse<Object> localVarResp = updateDnsRecordWithHttpInfo(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
        return localVarResp.getData();
    }

    /**
     * Update DNS record
     * Update a DNS record on your Nameserver configured site
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDnsRecordWithHttpInfo(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl) throws ApiException {
        okhttp3.Call localVarCall = updateDnsRecordValidateBeforeCall(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update DNS record (asynchronously)
     * Update a DNS record on your Nameserver configured site
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDnsRecordAsync(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDnsRecordValidateBeforeCall(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDnsRecord_0
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDnsRecord_0Call(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/dns"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dnsType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_type", dnsType));
        }

        if (dnsHostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_hostname", dnsHostname));
        }

        if (dnsContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_content", dnsContent));
        }

        if (dnsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_id", dnsId));
        }

        if (dnsPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_priority", dnsPriority));
        }

        if (dnsTtl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_ttl", dnsTtl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDnsRecord_0ValidateBeforeCall(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling updateDnsRecord_0(Async)");
        }
        
        // verify the required parameter 'dnsType' is set
        if (dnsType == null) {
            throw new ApiException("Missing the required parameter 'dnsType' when calling updateDnsRecord_0(Async)");
        }
        
        // verify the required parameter 'dnsHostname' is set
        if (dnsHostname == null) {
            throw new ApiException("Missing the required parameter 'dnsHostname' when calling updateDnsRecord_0(Async)");
        }
        
        // verify the required parameter 'dnsContent' is set
        if (dnsContent == null) {
            throw new ApiException("Missing the required parameter 'dnsContent' when calling updateDnsRecord_0(Async)");
        }
        

        okhttp3.Call localVarCall = updateDnsRecord_0Call(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, _callback);
        return localVarCall;

    }

    /**
     * Update DNS record
     * Update a DNS record on your Nameserver configured site
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDnsRecord_0(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl) throws ApiException {
        ApiResponse<Object> localVarResp = updateDnsRecord_0WithHttpInfo(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
        return localVarResp.getData();
    }

    /**
     * Update DNS record
     * Update a DNS record on your Nameserver configured site
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDnsRecord_0WithHttpInfo(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl) throws ApiException {
        okhttp3.Call localVarCall = updateDnsRecord_0ValidateBeforeCall(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update DNS record (asynchronously)
     * Update a DNS record on your Nameserver configured site
     * @param fqdn  (required)
     * @param dnsType  (required)
     * @param dnsHostname  (required)
     * @param dnsContent  (required)
     * @param dnsId  (optional)
     * @param dnsPriority  (optional, default to 0)
     * @param dnsTtl  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDnsRecord_0Async(String fqdn, String dnsType, String dnsHostname, String dnsContent, String dnsId, Integer dnsPriority, Integer dnsTtl, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDnsRecord_0ValidateBeforeCall(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmail
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailCall(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userEmailUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}"
            .replaceAll("\\{" + "user_email_address" + "\\}", localVarApiClient.escapeString(userEmailAddress.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailValidateBeforeCall(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userEmailAddress' is set
        if (userEmailAddress == null) {
            throw new ApiException("Missing the required parameter 'userEmailAddress' when calling updateEmail(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling updateEmail(Async)");
        }
        

        okhttp3.Call localVarCall = updateEmailCall(userEmailAddress, fqdn, userEmailUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update Email
     * Update a custom email account
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateEmail(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate) throws ApiException {
        ApiResponse<Object> localVarResp = updateEmailWithHttpInfo(userEmailAddress, fqdn, userEmailUpdate);
        return localVarResp.getData();
    }

    /**
     * Update Email
     * Update a custom email account
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateEmailWithHttpInfo(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(userEmailAddress, fqdn, userEmailUpdate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Email (asynchronously)
     * Update a custom email account
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmailAsync(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(userEmailAddress, fqdn, userEmailUpdate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmail_0
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmail_0Call(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userEmailUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/email/{user_email_address}"
            .replaceAll("\\{" + "user_email_address" + "\\}", localVarApiClient.escapeString(userEmailAddress.toString()))
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmail_0ValidateBeforeCall(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userEmailAddress' is set
        if (userEmailAddress == null) {
            throw new ApiException("Missing the required parameter 'userEmailAddress' when calling updateEmail_0(Async)");
        }
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling updateEmail_0(Async)");
        }
        

        okhttp3.Call localVarCall = updateEmail_0Call(userEmailAddress, fqdn, userEmailUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update Email
     * Update a custom email account
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateEmail_0(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate) throws ApiException {
        ApiResponse<Object> localVarResp = updateEmail_0WithHttpInfo(userEmailAddress, fqdn, userEmailUpdate);
        return localVarResp.getData();
    }

    /**
     * Update Email
     * Update a custom email account
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateEmail_0WithHttpInfo(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateEmail_0ValidateBeforeCall(userEmailAddress, fqdn, userEmailUpdate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Email (asynchronously)
     * Update a custom email account
     * @param userEmailAddress  (required)
     * @param fqdn  (required)
     * @param userEmailUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmail_0Async(String userEmailAddress, String fqdn, UserEmailUpdate userEmailUpdate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmail_0ValidateBeforeCall(userEmailAddress, fqdn, userEmailUpdate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSiteLive
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSiteLiveCall(String fqdn, SiteLiveUpdate siteLiveUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteLiveUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSiteLiveValidateBeforeCall(String fqdn, SiteLiveUpdate siteLiveUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling updateSiteLive(Async)");
        }
        
        // verify the required parameter 'siteLiveUpdate' is set
        if (siteLiveUpdate == null) {
            throw new ApiException("Missing the required parameter 'siteLiveUpdate' when calling updateSiteLive(Async)");
        }
        

        okhttp3.Call localVarCall = updateSiteLiveCall(fqdn, siteLiveUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update a site
     * Update a site&#39;s details
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @return SiteLive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SiteLive updateSiteLive(String fqdn, SiteLiveUpdate siteLiveUpdate) throws ApiException {
        ApiResponse<SiteLive> localVarResp = updateSiteLiveWithHttpInfo(fqdn, siteLiveUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a site
     * Update a site&#39;s details
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @return ApiResponse&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLive> updateSiteLiveWithHttpInfo(String fqdn, SiteLiveUpdate siteLiveUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateSiteLiveValidateBeforeCall(fqdn, siteLiveUpdate, null);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a site (asynchronously)
     * Update a site&#39;s details
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSiteLiveAsync(String fqdn, SiteLiveUpdate siteLiveUpdate, final ApiCallback<SiteLive> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSiteLiveValidateBeforeCall(fqdn, siteLiveUpdate, _callback);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSiteLive_0
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSiteLive_0Call(String fqdn, SiteLiveUpdate siteLiveUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteLiveUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSiteLive_0ValidateBeforeCall(String fqdn, SiteLiveUpdate siteLiveUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling updateSiteLive_0(Async)");
        }
        
        // verify the required parameter 'siteLiveUpdate' is set
        if (siteLiveUpdate == null) {
            throw new ApiException("Missing the required parameter 'siteLiveUpdate' when calling updateSiteLive_0(Async)");
        }
        

        okhttp3.Call localVarCall = updateSiteLive_0Call(fqdn, siteLiveUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update a site
     * Update a site&#39;s details
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @return SiteLive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SiteLive updateSiteLive_0(String fqdn, SiteLiveUpdate siteLiveUpdate) throws ApiException {
        ApiResponse<SiteLive> localVarResp = updateSiteLive_0WithHttpInfo(fqdn, siteLiveUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a site
     * Update a site&#39;s details
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @return ApiResponse&lt;SiteLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLive> updateSiteLive_0WithHttpInfo(String fqdn, SiteLiveUpdate siteLiveUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateSiteLive_0ValidateBeforeCall(fqdn, siteLiveUpdate, null);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a site (asynchronously)
     * Update a site&#39;s details
     * @param fqdn  (required)
     * @param siteLiveUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your site&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSiteLive_0Async(String fqdn, SiteLiveUpdate siteLiveUpdate, final ApiCallback<SiteLive> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSiteLive_0ValidateBeforeCall(fqdn, siteLiveUpdate, _callback);
        Type localVarReturnType = new TypeToken<SiteLive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateMxRecords
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMxRecordsCall(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/validate_mx_records"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateMxRecordsValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling validateMxRecords(Async)");
        }
        

        okhttp3.Call localVarCall = validateMxRecordsCall(fqdn, _callback);
        return localVarCall;

    }

    /**
     * MX Validation
     * Check if your mail related DNS records are set up correctly
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object validateMxRecords(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = validateMxRecordsWithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * MX Validation
     * Check if your mail related DNS records are set up correctly
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> validateMxRecordsWithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = validateMxRecordsValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * MX Validation (asynchronously)
     * Check if your mail related DNS records are set up correctly
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMxRecordsAsync(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateMxRecordsValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateMxRecords_0
     * @param fqdn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMxRecords_0Call(String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/site_live/{fqdn}/validate_mx_records"
            .replaceAll("\\{" + "fqdn" + "\\}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateMxRecords_0ValidateBeforeCall(String fqdn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling validateMxRecords_0(Async)");
        }
        

        okhttp3.Call localVarCall = validateMxRecords_0Call(fqdn, _callback);
        return localVarCall;

    }

    /**
     * MX Validation
     * Check if your mail related DNS records are set up correctly
     * @param fqdn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object validateMxRecords_0(String fqdn) throws ApiException {
        ApiResponse<Object> localVarResp = validateMxRecords_0WithHttpInfo(fqdn);
        return localVarResp.getData();
    }

    /**
     * MX Validation
     * Check if your mail related DNS records are set up correctly
     * @param fqdn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> validateMxRecords_0WithHttpInfo(String fqdn) throws ApiException {
        okhttp3.Call localVarCall = validateMxRecords_0ValidateBeforeCall(fqdn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * MX Validation (asynchronously)
     * Check if your mail related DNS records are set up correctly
     * @param fqdn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateMxRecords_0Async(String fqdn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateMxRecords_0ValidateBeforeCall(fqdn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
