/*
 * Site Bay
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Migration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MigrationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MigrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MigrationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMigration
     * @param currentUrl  (required)
     * @param wordpressPassword  (required)
     * @param wordpressUser  (required)
     * @param extra  (optional)
     * @param ftpAddress  (optional)
     * @param ftpPassword  (optional)
     * @param ftpUser  (optional)
     * @param host  (optional)
     * @param hostPassword  (optional)
     * @param hostUser  (optional)
     * @param migrationType  (optional)
     * @param zipFile  (optional)
     * @param zipFileName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new migration&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMigrationCall(String currentUrl, String wordpressPassword, String wordpressUser, String extra, String ftpAddress, String ftpPassword, String ftpUser, String host, String hostPassword, String hostUser, String migrationType, File zipFile, String zipFileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentUrl != null) {
            localVarFormParams.put("current_url", currentUrl);
        }

        if (extra != null) {
            localVarFormParams.put("extra", extra);
        }

        if (ftpAddress != null) {
            localVarFormParams.put("ftp_address", ftpAddress);
        }

        if (ftpPassword != null) {
            localVarFormParams.put("ftp_password", ftpPassword);
        }

        if (ftpUser != null) {
            localVarFormParams.put("ftp_user", ftpUser);
        }

        if (host != null) {
            localVarFormParams.put("host", host);
        }

        if (hostPassword != null) {
            localVarFormParams.put("host_password", hostPassword);
        }

        if (hostUser != null) {
            localVarFormParams.put("host_user", hostUser);
        }

        if (migrationType != null) {
            localVarFormParams.put("migration_type", migrationType);
        }

        if (wordpressPassword != null) {
            localVarFormParams.put("wordpress_password", wordpressPassword);
        }

        if (wordpressUser != null) {
            localVarFormParams.put("wordpress_user", wordpressUser);
        }

        if (zipFile != null) {
            localVarFormParams.put("zip_file", zipFile);
        }

        if (zipFileName != null) {
            localVarFormParams.put("zip_file_name", zipFileName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMigrationValidateBeforeCall(String currentUrl, String wordpressPassword, String wordpressUser, String extra, String ftpAddress, String ftpPassword, String ftpUser, String host, String hostPassword, String hostUser, String migrationType, File zipFile, String zipFileName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currentUrl' is set
        if (currentUrl == null) {
            throw new ApiException("Missing the required parameter 'currentUrl' when calling createMigration(Async)");
        }
        
        // verify the required parameter 'wordpressPassword' is set
        if (wordpressPassword == null) {
            throw new ApiException("Missing the required parameter 'wordpressPassword' when calling createMigration(Async)");
        }
        
        // verify the required parameter 'wordpressUser' is set
        if (wordpressUser == null) {
            throw new ApiException("Missing the required parameter 'wordpressUser' when calling createMigration(Async)");
        }
        

        okhttp3.Call localVarCall = createMigrationCall(currentUrl, wordpressPassword, wordpressUser, extra, ftpAddress, ftpPassword, ftpUser, host, hostPassword, hostUser, migrationType, zipFile, zipFileName, _callback);
        return localVarCall;

    }

    /**
     * Create a migration
     * Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
     * @param currentUrl  (required)
     * @param wordpressPassword  (required)
     * @param wordpressUser  (required)
     * @param extra  (optional)
     * @param ftpAddress  (optional)
     * @param ftpPassword  (optional)
     * @param ftpUser  (optional)
     * @param host  (optional)
     * @param hostPassword  (optional)
     * @param hostUser  (optional)
     * @param migrationType  (optional)
     * @param zipFile  (optional)
     * @param zipFileName  (optional)
     * @return Migration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new migration&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Migration createMigration(String currentUrl, String wordpressPassword, String wordpressUser, String extra, String ftpAddress, String ftpPassword, String ftpUser, String host, String hostPassword, String hostUser, String migrationType, File zipFile, String zipFileName) throws ApiException {
        ApiResponse<Migration> localVarResp = createMigrationWithHttpInfo(currentUrl, wordpressPassword, wordpressUser, extra, ftpAddress, ftpPassword, ftpUser, host, hostPassword, hostUser, migrationType, zipFile, zipFileName);
        return localVarResp.getData();
    }

    /**
     * Create a migration
     * Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
     * @param currentUrl  (required)
     * @param wordpressPassword  (required)
     * @param wordpressUser  (required)
     * @param extra  (optional)
     * @param ftpAddress  (optional)
     * @param ftpPassword  (optional)
     * @param ftpUser  (optional)
     * @param host  (optional)
     * @param hostPassword  (optional)
     * @param hostUser  (optional)
     * @param migrationType  (optional)
     * @param zipFile  (optional)
     * @param zipFileName  (optional)
     * @return ApiResponse&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new migration&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Migration> createMigrationWithHttpInfo(String currentUrl, String wordpressPassword, String wordpressUser, String extra, String ftpAddress, String ftpPassword, String ftpUser, String host, String hostPassword, String hostUser, String migrationType, File zipFile, String zipFileName) throws ApiException {
        okhttp3.Call localVarCall = createMigrationValidateBeforeCall(currentUrl, wordpressPassword, wordpressUser, extra, ftpAddress, ftpPassword, ftpUser, host, hostPassword, hostUser, migrationType, zipFile, zipFileName, null);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a migration (asynchronously)
     * Request a new site migration by providing your old host&#39;s domain and your site&#39;s login details
     * @param currentUrl  (required)
     * @param wordpressPassword  (required)
     * @param wordpressUser  (required)
     * @param extra  (optional)
     * @param ftpAddress  (optional)
     * @param ftpPassword  (optional)
     * @param ftpUser  (optional)
     * @param host  (optional)
     * @param hostPassword  (optional)
     * @param hostUser  (optional)
     * @param migrationType  (optional)
     * @param zipFile  (optional)
     * @param zipFileName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Your new migration&#39;s details </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMigrationAsync(String currentUrl, String wordpressPassword, String wordpressUser, String extra, String ftpAddress, String ftpPassword, String ftpUser, String host, String hostPassword, String hostUser, String migrationType, File zipFile, String zipFileName, final ApiCallback<Migration> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMigrationValidateBeforeCall(currentUrl, wordpressPassword, wordpressUser, extra, ftpAddress, ftpPassword, ftpUser, host, hostPassword, hostUser, migrationType, zipFile, zipFileName, _callback);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMigration
     * @param migrationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMigrationCall(Integer migrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migration/{migration_id}"
            .replaceAll("\\{" + "migration_id" + "\\}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMigrationValidateBeforeCall(Integer migrationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling deleteMigration(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMigrationCall(migrationId, _callback);
        return localVarCall;

    }

    /**
     * Delete Migration
     * 
     * @param migrationId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMigration(Integer migrationId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMigrationWithHttpInfo(migrationId);
        return localVarResp.getData();
    }

    /**
     * Delete Migration
     * 
     * @param migrationId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMigrationWithHttpInfo(Integer migrationId) throws ApiException {
        okhttp3.Call localVarCall = deleteMigrationValidateBeforeCall(migrationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Migration (asynchronously)
     * 
     * @param migrationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMigrationAsync(Integer migrationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMigrationValidateBeforeCall(migrationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMigrations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMigrationsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Migrations
     * 
     * @return List&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public List<Migration> getMigrations() throws ApiException {
        ApiResponse<List<Migration>> localVarResp = getMigrationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Migrations
     * 
     * @return ApiResponse&lt;List&lt;Migration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Migration>> getMigrationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMigrationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Migration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Migrations (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationsAsync(final ApiCallback<List<Migration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Migration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
