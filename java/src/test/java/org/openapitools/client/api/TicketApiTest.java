/*
 * Site Bay
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Ticket;
import org.openapitools.client.model.TicketCreate;
import org.openapitools.client.model.TicketReply;
import org.openapitools.client.model.TicketReplyCreate;
import org.openapitools.client.model.TicketUpdate;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TicketApi
 */
@Ignore
public class TicketApiTest {

    private final TicketApi api = new TicketApi();

    
    /**
     * Create Ticket
     *
     * Create a support ticket request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTicketTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
                Ticket response = api.createTicket(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }
    
    /**
     * Create Ticket Reply
     *
     * Reply to a support ticket request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTicketReplyTest() throws ApiException {
        Integer ticketId = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
                TicketReply response = api.createTicketReply(ticketId, UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }
    
    /**
     * Delete Ticket
     *
     * Delete a support ticket request by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTicketTest() throws ApiException {
        Integer ticketId = null;
                Object response = api.deleteTicket(ticketId);
        // TODO: test validations
    }
    
    /**
     * Get Ticket
     *
     * Get a support ticket request by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTicketTest() throws ApiException {
        Integer ticketId = null;
                Ticket response = api.getTicket(ticketId);
        // TODO: test validations
    }
    
    /**
     * Get Tickets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTicketsTest() throws ApiException {
                List<Ticket> response = api.getTickets();
        // TODO: test validations
    }
    
    /**
     * Update Ticket
     *
     * Update a support ticket request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTicketTest() throws ApiException {
        Integer ticketId = null;
        TicketUpdate ticketUpdate = null;
                Ticket response = api.updateTicket(ticketId, ticketUpdate);
        // TODO: test validations
    }
    
}
