/*
 * Site Bay
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExternalPathCreate;
import org.openapitools.client.model.HTTPValidationError;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.PITRestoreCreate;
import org.openapitools.client.model.SiteLive;
import org.openapitools.client.model.SiteLiveCreate;
import org.openapitools.client.model.SiteLiveUpdate;
import org.openapitools.client.model.SiteStageCreate;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagCreate;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.openapitools.client.model.UserEmailCreate;
import org.openapitools.client.model.UserEmailUpdate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SiteLiveApi
 */
@Ignore
public class SiteLiveApiTest {

    private final SiteLiveApi api = new SiteLiveApi();

    
    /**
     * Create Email DNS records
     *
     * Automatically add the DNS records to your Nameserver configured site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMailDnsTest() throws ApiException {
        String fqdn = null;
                Object response = api.addMailDns(fqdn);
        // TODO: test validations
    }
    
    /**
     * Create Email DNS records
     *
     * Automatically add the DNS records to your Nameserver configured site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMailDns_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.addMailDns_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Change HTTP Auth
     *
     * Enable or disable HTTP Basic Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeDevModeTest() throws ApiException {
        String fqdn = null;
        String value = null;
                Object response = api.changeDevMode(fqdn, value);
        // TODO: test validations
    }
    
    /**
     * Change HTTP Auth
     *
     * Enable or disable HTTP Basic Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeDevMode_0Test() throws ApiException {
        String fqdn = null;
        String value = null;
                Object response = api.changeDevMode_0(fqdn, value);
        // TODO: test validations
    }
    
    /**
     * Clear the cache
     *
     * Purges the Cloudflare CDN cache for your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearCacheTest() throws ApiException {
        String fqdn = null;
                Object response = api.clearCache(fqdn);
        // TODO: test validations
    }
    
    /**
     * Clear the cache
     *
     * Purges the Cloudflare CDN cache for your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearCache_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.clearCache_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Commit Stage Site
     *
     * Sync the wp-content and database from your staging site to your live site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commitSiteStageTest() throws ApiException {
        String fqdn = null;
                Object response = api.commitSiteStage(fqdn);
        // TODO: test validations
    }
    
    /**
     * Commit Stage Site
     *
     * Sync the wp-content and database from your staging site to your live site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commitSiteStage_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.commitSiteStage_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Create Email
     *
     * Create a custom email account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmailTest() throws ApiException {
        String fqdn = null;
        UserEmailCreate userEmailCreate = null;
                Object response = api.createEmail(fqdn, userEmailCreate);
        // TODO: test validations
    }
    
    /**
     * Create Email
     *
     * Create a custom email account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmail_0Test() throws ApiException {
        String fqdn = null;
        UserEmailCreate userEmailCreate = null;
                Object response = api.createEmail_0(fqdn, userEmailCreate);
        // TODO: test validations
    }
    
    /**
     * Create External Path
     *
     * Connect an external URL to your site on a subpath
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExternalPathTest() throws ApiException {
        String fqdn = null;
        ExternalPathCreate externalPathCreate = null;
                Object response = api.createExternalPath(fqdn, externalPathCreate);
        // TODO: test validations
    }
    
    /**
     * Create External Path
     *
     * Connect an external URL to your site on a subpath
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExternalPath_0Test() throws ApiException {
        String fqdn = null;
        ExternalPathCreate externalPathCreate = null;
                Object response = api.createExternalPath_0(fqdn, externalPathCreate);
        // TODO: test validations
    }
    
    /**
     * Create a site
     *
     * Create a new site by providing your domain and your site&#39;s WordPress details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSiteLiveTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
                SiteLive response = api.createSiteLive(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }
    
    /**
     * Create a site
     *
     * Create a new site by providing your domain and your site&#39;s WordPress details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSiteLive_0Test() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
                SiteLive response = api.createSiteLive_0(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }
    
    /**
     * Create a Staging site
     *
     * Create a staging site on which you can test changes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSiteStageTest() throws ApiException {
        String fqdn = null;
        SiteStageCreate siteStageCreate = null;
                Object response = api.createSiteStage(fqdn, siteStageCreate);
        // TODO: test validations
    }
    
    /**
     * Create a Staging site
     *
     * Create a staging site on which you can test changes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSiteStage_0Test() throws ApiException {
        String fqdn = null;
        SiteStageCreate siteStageCreate = null;
                Object response = api.createSiteStage_0(fqdn, siteStageCreate);
        // TODO: test validations
    }
    
    /**
     * Create tag
     *
     * Create a tag for organizational purposes for your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        String fqdn = null;
        TagCreate tagCreate = null;
                Tag response = api.createTag(fqdn, tagCreate);
        // TODO: test validations
    }
    
    /**
     * Create tag
     *
     * Create a tag for organizational purposes for your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTag_0Test() throws ApiException {
        String fqdn = null;
        TagCreate tagCreate = null;
                Tag response = api.createTag_0(fqdn, tagCreate);
        // TODO: test validations
    }
    
    /**
     * Delete DNS record
     *
     * Delete a DNS record on your Nameserver configured site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsRecordTest() throws ApiException {
        String dnsId = null;
        String fqdn = null;
                Object response = api.deleteDnsRecord(dnsId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Delete DNS record
     *
     * Delete a DNS record on your Nameserver configured site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnsRecord_0Test() throws ApiException {
        String dnsId = null;
        String fqdn = null;
                Object response = api.deleteDnsRecord_0(dnsId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Delete Email
     *
     * Delete a custom email account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailTest() throws ApiException {
        String fqdn = null;
        String userEmailAddress = null;
                Object response = api.deleteEmail(fqdn, userEmailAddress);
        // TODO: test validations
    }
    
    /**
     * Delete Email
     *
     * Delete a custom email account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmail_0Test() throws ApiException {
        String fqdn = null;
        String userEmailAddress = null;
                Object response = api.deleteEmail_0(fqdn, userEmailAddress);
        // TODO: test validations
    }
    
    /**
     * Delete External Path
     *
     * Delete the link between an external URL and your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalPathTest() throws ApiException {
        String externalPathId = null;
        String fqdn = null;
                Object response = api.deleteExternalPath(externalPathId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Delete External Path
     *
     * Delete the link between an external URL and your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalPath_0Test() throws ApiException {
        String externalPathId = null;
        String fqdn = null;
                Object response = api.deleteExternalPath_0(externalPathId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Delete your live site
     *
     * This permanently deletes your site, and its stage site if one exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSiteLiveTest() throws ApiException {
        String fqdn = null;
                Object response = api.deleteSiteLive(fqdn);
        // TODO: test validations
    }
    
    /**
     * Delete your live site
     *
     * This permanently deletes your site, and its stage site if one exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSiteLive_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.deleteSiteLive_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Delete Stage Site
     *
     * Delete your staging site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSiteStageTest() throws ApiException {
        String fqdn = null;
                Object response = api.deleteSiteStage(fqdn);
        // TODO: test validations
    }
    
    /**
     * Delete Stage Site
     *
     * Delete your staging site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSiteStage_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.deleteSiteStage_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get a tag
     *
     * Get a tag by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        String tagId = null;
        String fqdn = null;
                List<Tag> response = api.deleteTag(tagId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Get a tag
     *
     * Get a tag by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTag_0Test() throws ApiException {
        String tagId = null;
        String fqdn = null;
                List<Tag> response = api.deleteTag_0(tagId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Disable the firewall
     *
     * Disable wp-login firewall
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableFirewallTest() throws ApiException {
        String fqdn = null;
                Object response = api.disableFirewall(fqdn);
        // TODO: test validations
    }
    
    /**
     * Disable the firewall
     *
     * Disable wp-login firewall
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableFirewall_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.disableFirewall_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Enable the firewall
     *
     * Enable the wp-login firewall
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableFirewallTest() throws ApiException {
        String fqdn = null;
                Object response = api.enableFirewall(fqdn);
        // TODO: test validations
    }
    
    /**
     * Enable the firewall
     *
     * Enable the wp-login firewall
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableFirewall_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.enableFirewall_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get DNS records
     *
     * Get a nameserver configured site&#39;s DNS records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsRecordsTest() throws ApiException {
        String fqdn = null;
                Object response = api.getDnsRecords(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get DNS records
     *
     * Get a nameserver configured site&#39;s DNS records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnsRecords_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.getDnsRecords_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get Emails
     *
     * Get all custom email accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsTest() throws ApiException {
        String fqdn = null;
                Object response = api.getEmails(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get Emails
     *
     * Get all custom email accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmails_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.getEmails_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get External Paths
     *
     * Get details about your site&#39;s external path configs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalPathsTest() throws ApiException {
        String fqdn = null;
                Object response = api.getExternalPaths(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get External Paths
     *
     * Get details about your site&#39;s external path configs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalPaths_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.getExternalPaths_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * PIT Files
     *
     * Get a list of wp-content files at a point in time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesAtPointTest() throws ApiException {
        String fqdn = null;
        OffsetDateTime restorePoint = null;
                Object response = api.getFilesAtPoint(fqdn, restorePoint);
        // TODO: test validations
    }
    
    /**
     * PIT Files
     *
     * Get a list of wp-content files at a point in time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesAtPoint_0Test() throws ApiException {
        String fqdn = null;
        OffsetDateTime restorePoint = null;
                Object response = api.getFilesAtPoint_0(fqdn, restorePoint);
        // TODO: test validations
    }
    
    /**
     * Get Required mail DNS records
     *
     * Get the required records for our custom email service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMailDnsTest() throws ApiException {
        String fqdn = null;
                Object response = api.getMailDns(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get Required mail DNS records
     *
     * Get the required records for our custom email service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMailDns_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.getMailDns_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get PIT Restore
     *
     * Get the results of a site&#39;s restore to a previous point in time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPitRestoreTest() throws ApiException {
        String pitRestoreId = null;
        String fqdn = null;
                Object response = api.getPitRestore(pitRestoreId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Get PIT Restore
     *
     * Get the results of a site&#39;s restore to a previous point in time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPitRestore_0Test() throws ApiException {
        String pitRestoreId = null;
        String fqdn = null;
                Object response = api.getPitRestore_0(pitRestoreId, fqdn);
        // TODO: test validations
    }
    
    /**
     * Get PIT Restores
     *
     * Get all the results of a site&#39;s restores to a previous point in time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPitRestoresTest() throws ApiException {
        String fqdn = null;
                Object response = api.getPitRestores(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get PIT Restores
     *
     * Get all the results of a site&#39;s restores to a previous point in time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPitRestores_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.getPitRestores_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get your live site
     *
     * Get details about your live site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSiteLiveTest() throws ApiException {
        String fqdn = null;
                SiteLive response = api.getSiteLive(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get your live site
     *
     * Get details about your live site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSiteLive_0Test() throws ApiException {
        String fqdn = null;
                SiteLive response = api.getSiteLive_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get Site Plan Usage
     *
     * Get your visits and storage for a site at a given interval
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSitePlanUsageTest() throws ApiException {
        String fqdn = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
                Object response = api.getSitePlanUsage(fqdn, start, end);
        // TODO: test validations
    }
    
    /**
     * Get Site Plan Usage
     *
     * Get your visits and storage for a site at a given interval
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSitePlanUsage_0Test() throws ApiException {
        String fqdn = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
                Object response = api.getSitePlanUsage_0(fqdn, start, end);
        // TODO: test validations
    }
    
    /**
     * Get your sites
     *
     * Get details about all of your live sites
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSitesLiveTest() throws ApiException {
                List<SiteLive> response = api.getSitesLive();
        // TODO: test validations
    }
    
    /**
     * Get your sites
     *
     * Get details about all of your live sites
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSitesLive_0Test() throws ApiException {
                List<SiteLive> response = api.getSitesLive_0();
        // TODO: test validations
    }
    
    /**
     * Get tags
     *
     * Get all the tags for your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        String fqdn = null;
                List<Tag> response = api.getTags(fqdn);
        // TODO: test validations
    }
    
    /**
     * Get tags
     *
     * Get all the tags for your site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTags_0Test() throws ApiException {
        String fqdn = null;
                List<Tag> response = api.getTags_0(fqdn);
        // TODO: test validations
    }
    
    /**
     * Modify the firewall
     *
     * Add/Delete an IP from the wp-login firewall
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyFirewallTest() throws ApiException {
        String fqdn = null;
        String ipAddress = null;
        String addOrDel = null;
                Object response = api.modifyFirewall(fqdn, ipAddress, addOrDel);
        // TODO: test validations
    }
    
    /**
     * Modify the firewall
     *
     * Add/Delete an IP from the wp-login firewall
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyFirewall_0Test() throws ApiException {
        String fqdn = null;
        String ipAddress = null;
        String addOrDel = null;
                Object response = api.modifyFirewall_0(fqdn, ipAddress, addOrDel);
        // TODO: test validations
    }
    
    /**
     * Create PIT Restore
     *
     * Restore your site to a previous point in time, down to the minute
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreSiteTest() throws ApiException {
        String fqdn = null;
        PITRestoreCreate piTRestoreCreate = null;
                Object response = api.restoreSite(fqdn, piTRestoreCreate);
        // TODO: test validations
    }
    
    /**
     * Create PIT Restore
     *
     * Restore your site to a previous point in time, down to the minute
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreSite_0Test() throws ApiException {
        String fqdn = null;
        PITRestoreCreate piTRestoreCreate = null;
                Object response = api.restoreSite_0(fqdn, piTRestoreCreate);
        // TODO: test validations
    }
    
    /**
     * Execute shell command
     *
     * Send a bash shell command to your site, such as a WP-CLI command
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shellCmdSiteLiveTest() throws ApiException {
        String fqdn = null;
        String cmd = null;
        String cwd = null;
        Boolean autoTrackDir = null;
        Boolean stage = null;
                Object response = api.shellCmdSiteLive(fqdn, cmd, cwd, autoTrackDir, stage);
        // TODO: test validations
    }
    
    /**
     * Execute shell command
     *
     * Send a bash shell command to your site, such as a WP-CLI command
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shellCmdSiteLive_0Test() throws ApiException {
        String fqdn = null;
        String cmd = null;
        String cwd = null;
        Boolean autoTrackDir = null;
        Boolean stage = null;
                Object response = api.shellCmdSiteLive_0(fqdn, cmd, cwd, autoTrackDir, stage);
        // TODO: test validations
    }
    
    /**
     * Update DNS record
     *
     * Update a DNS record on your Nameserver configured site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDnsRecordTest() throws ApiException {
        String fqdn = null;
        String dnsType = null;
        String dnsHostname = null;
        String dnsContent = null;
        String dnsId = null;
        Integer dnsPriority = null;
        Integer dnsTtl = null;
                Object response = api.updateDnsRecord(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
        // TODO: test validations
    }
    
    /**
     * Update DNS record
     *
     * Update a DNS record on your Nameserver configured site
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDnsRecord_0Test() throws ApiException {
        String fqdn = null;
        String dnsType = null;
        String dnsHostname = null;
        String dnsContent = null;
        String dnsId = null;
        Integer dnsPriority = null;
        Integer dnsTtl = null;
                Object response = api.updateDnsRecord_0(fqdn, dnsType, dnsHostname, dnsContent, dnsId, dnsPriority, dnsTtl);
        // TODO: test validations
    }
    
    /**
     * Update Email
     *
     * Update a custom email account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmailTest() throws ApiException {
        String userEmailAddress = null;
        String fqdn = null;
        UserEmailUpdate userEmailUpdate = null;
                Object response = api.updateEmail(userEmailAddress, fqdn, userEmailUpdate);
        // TODO: test validations
    }
    
    /**
     * Update Email
     *
     * Update a custom email account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmail_0Test() throws ApiException {
        String userEmailAddress = null;
        String fqdn = null;
        UserEmailUpdate userEmailUpdate = null;
                Object response = api.updateEmail_0(userEmailAddress, fqdn, userEmailUpdate);
        // TODO: test validations
    }
    
    /**
     * Update a site
     *
     * Update a site&#39;s details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSiteLiveTest() throws ApiException {
        String fqdn = null;
        SiteLiveUpdate siteLiveUpdate = null;
                SiteLive response = api.updateSiteLive(fqdn, siteLiveUpdate);
        // TODO: test validations
    }
    
    /**
     * Update a site
     *
     * Update a site&#39;s details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSiteLive_0Test() throws ApiException {
        String fqdn = null;
        SiteLiveUpdate siteLiveUpdate = null;
                SiteLive response = api.updateSiteLive_0(fqdn, siteLiveUpdate);
        // TODO: test validations
    }
    
    /**
     * MX Validation
     *
     * Check if your mail related DNS records are set up correctly
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateMxRecordsTest() throws ApiException {
        String fqdn = null;
                Object response = api.validateMxRecords(fqdn);
        // TODO: test validations
    }
    
    /**
     * MX Validation
     *
     * Check if your mail related DNS records are set up correctly
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateMxRecords_0Test() throws ApiException {
        String fqdn = null;
                Object response = api.validateMxRecords_0(fqdn);
        // TODO: test validations
    }
    
}
