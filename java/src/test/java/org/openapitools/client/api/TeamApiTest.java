/*
 * Site Bay
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamMember;
import org.openapitools.client.model.TeamUpdate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamApi
 */
@Ignore
public class TeamApiTest {

    private final TeamApi api = new TeamApi();

    
    /**
     * Get a team
     *
     * Get details about an owned team team by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeamTest() throws ApiException {
        String teamId = null;
                Team response = api.getTeam(teamId);
        // TODO: test validations
    }
    
    /**
     * Get Team Member
     *
     * Get a Team Member by their UUID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeamMemberTest() throws ApiException {
        String teamMemberId = null;
        String teamId = null;
                TeamMember response = api.getTeamMember(teamMemberId, teamId);
        // TODO: test validations
    }
    
    /**
     * Get Team Member
     *
     * Get a Team Member by their UUID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeamMember_0Test() throws ApiException {
        String teamMemberId = null;
        String teamId = null;
                TeamMember response = api.getTeamMember_0(teamMemberId, teamId);
        // TODO: test validations
    }
    
    /**
     * Get a team&#39;s members
     *
     * Get a list of Team Members
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeamMembersTest() throws ApiException {
        String teamId = null;
                List<TeamMember> response = api.getTeamMembers(teamId);
        // TODO: test validations
    }
    
    /**
     * Get a team&#39;s members
     *
     * Get a list of Team Members
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeamMembers_0Test() throws ApiException {
        String teamId = null;
                List<TeamMember> response = api.getTeamMembers_0(teamId);
        // TODO: test validations
    }
    
    /**
     * Get a team
     *
     * Get details about an owned team team by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeam_0Test() throws ApiException {
        String teamId = null;
                Team response = api.getTeam_0(teamId);
        // TODO: test validations
    }
    
    /**
     * Get your owned teams
     *
     * Get details about all of your owned teams
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeamsTest() throws ApiException {
                List<Team> response = api.getTeams();
        // TODO: test validations
    }
    
    /**
     * Get your owned teams
     *
     * Get details about all of your owned teams
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeams_0Test() throws ApiException {
                List<Team> response = api.getTeams_0();
        // TODO: test validations
    }
    
    /**
     * Remove Team Member
     *
     * Remove a team member
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTeamMemberTest() throws ApiException {
        String teamMemberId = null;
        String teamId = null;
                Object response = api.removeTeamMember(teamMemberId, teamId);
        // TODO: test validations
    }
    
    /**
     * Remove Team Member
     *
     * Remove a team member
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTeamMember_0Test() throws ApiException {
        String teamMemberId = null;
        String teamId = null;
                Object response = api.removeTeamMember_0(teamMemberId, teamId);
        // TODO: test validations
    }
    
    /**
     * Update a Team
     *
     * Adjust your team&#39;s settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTeamTest() throws ApiException {
        String teamId = null;
        TeamUpdate teamUpdate = null;
                Team response = api.updateTeam(teamId, teamUpdate);
        // TODO: test validations
    }
    
    /**
     * Update a Team
     *
     * Adjust your team&#39;s settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTeam_0Test() throws ApiException {
        String teamId = null;
        TeamUpdate teamUpdate = null;
                Team response = api.updateTeam_0(teamId, teamUpdate);
        // TODO: test validations
    }
    
}
