/**
 * Site Bay
 *
 * OpenAPI schema for the Agency plan. Access for only $99USD per month! Swagger docs available at https://my.sitebay.org/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.HTTPValidationError
import org.openapitools.client.models.Ticket
import org.openapitools.client.models.TicketCreate
import org.openapitools.client.models.TicketReply
import org.openapitools.client.models.TicketReplyCreate
import org.openapitools.client.models.TicketUpdate
import org.openapitools.client.models.UNKNOWN_BASE_TYPE

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class TicketApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://my.sitebay.org")
        }
    }

    /**
    * Create Ticket
    * Create a support ticket request
    * @param UNKNOWN_BASE_TYPE  (optional)
    * @return Ticket
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTicket(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE?) : Ticket {
        val localVarResponse = createTicketWithHttpInfo(UNKNOWN_BASE_TYPE = UNKNOWN_BASE_TYPE)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Ticket
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create Ticket
    * Create a support ticket request
    * @param UNKNOWN_BASE_TYPE  (optional)
    * @return ApiResponse<Ticket?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTicketWithHttpInfo(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE?) : ApiResponse<Ticket?> {
        val localVariableConfig = createTicketRequestConfig(UNKNOWN_BASE_TYPE = UNKNOWN_BASE_TYPE)

        return request<UNKNOWN_BASE_TYPE, Ticket>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createTicket
    *
    * @param UNKNOWN_BASE_TYPE  (optional)
    * @return RequestConfig
    */
    fun createTicketRequestConfig(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE?) : RequestConfig<UNKNOWN_BASE_TYPE> {
        val localVariableBody = UNKNOWN_BASE_TYPE
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/ticket",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create Ticket Reply
    * Reply to a support ticket request
    * @param ticketId  
    * @param UNKNOWN_BASE_TYPE  (optional)
    * @return TicketReply
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTicketReply(ticketId: kotlin.Int, UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE?) : TicketReply {
        val localVarResponse = createTicketReplyWithHttpInfo(ticketId = ticketId, UNKNOWN_BASE_TYPE = UNKNOWN_BASE_TYPE)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TicketReply
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create Ticket Reply
    * Reply to a support ticket request
    * @param ticketId  
    * @param UNKNOWN_BASE_TYPE  (optional)
    * @return ApiResponse<TicketReply?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTicketReplyWithHttpInfo(ticketId: kotlin.Int, UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE?) : ApiResponse<TicketReply?> {
        val localVariableConfig = createTicketReplyRequestConfig(ticketId = ticketId, UNKNOWN_BASE_TYPE = UNKNOWN_BASE_TYPE)

        return request<UNKNOWN_BASE_TYPE, TicketReply>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createTicketReply
    *
    * @param ticketId  
    * @param UNKNOWN_BASE_TYPE  (optional)
    * @return RequestConfig
    */
    fun createTicketReplyRequestConfig(ticketId: kotlin.Int, UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE?) : RequestConfig<UNKNOWN_BASE_TYPE> {
        val localVariableBody = UNKNOWN_BASE_TYPE
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/ticket/{ticket_id}/reply".replace("{"+"ticket_id"+"}", "$ticketId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete Ticket
    * Delete a support ticket request by its ID
    * @param ticketId  
    * @return kotlin.Any
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTicket(ticketId: kotlin.Int) : kotlin.Any {
        val localVarResponse = deleteTicketWithHttpInfo(ticketId = ticketId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete Ticket
    * Delete a support ticket request by its ID
    * @param ticketId  
    * @return ApiResponse<kotlin.Any?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTicketWithHttpInfo(ticketId: kotlin.Int) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteTicketRequestConfig(ticketId = ticketId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteTicket
    *
    * @param ticketId  
    * @return RequestConfig
    */
    fun deleteTicketRequestConfig(ticketId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/ticket/{ticket_id}".replace("{"+"ticket_id"+"}", "$ticketId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Ticket
    * Get a support ticket request by its ID
    * @param ticketId  
    * @return Ticket
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTicket(ticketId: kotlin.Int) : Ticket {
        val localVarResponse = getTicketWithHttpInfo(ticketId = ticketId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Ticket
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Ticket
    * Get a support ticket request by its ID
    * @param ticketId  
    * @return ApiResponse<Ticket?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTicketWithHttpInfo(ticketId: kotlin.Int) : ApiResponse<Ticket?> {
        val localVariableConfig = getTicketRequestConfig(ticketId = ticketId)

        return request<Unit, Ticket>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getTicket
    *
    * @param ticketId  
    * @return RequestConfig
    */
    fun getTicketRequestConfig(ticketId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/ticket/{ticket_id}".replace("{"+"ticket_id"+"}", "$ticketId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Tickets
    * 
    * @return kotlin.collections.List<Ticket>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTickets() : kotlin.collections.List<Ticket> {
        val localVarResponse = getTicketsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Ticket>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Tickets
    * 
    * @return ApiResponse<kotlin.collections.List<Ticket>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTicketsWithHttpInfo() : ApiResponse<kotlin.collections.List<Ticket>?> {
        val localVariableConfig = getTicketsRequestConfig()

        return request<Unit, kotlin.collections.List<Ticket>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getTickets
    *
    * @return RequestConfig
    */
    fun getTicketsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/ticket",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update Ticket
    * Update a support ticket request
    * @param ticketId  
    * @param ticketUpdate  
    * @return Ticket
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateTicket(ticketId: kotlin.Int, ticketUpdate: TicketUpdate) : Ticket {
        val localVarResponse = updateTicketWithHttpInfo(ticketId = ticketId, ticketUpdate = ticketUpdate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Ticket
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update Ticket
    * Update a support ticket request
    * @param ticketId  
    * @param ticketUpdate  
    * @return ApiResponse<Ticket?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateTicketWithHttpInfo(ticketId: kotlin.Int, ticketUpdate: TicketUpdate) : ApiResponse<Ticket?> {
        val localVariableConfig = updateTicketRequestConfig(ticketId = ticketId, ticketUpdate = ticketUpdate)

        return request<TicketUpdate, Ticket>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation updateTicket
    *
    * @param ticketId  
    * @param ticketUpdate  
    * @return RequestConfig
    */
    fun updateTicketRequestConfig(ticketId: kotlin.Int, ticketUpdate: TicketUpdate) : RequestConfig<TicketUpdate> {
        val localVariableBody = ticketUpdate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/ticket/{ticket_id}".replace("{"+"ticket_id"+"}", "$ticketId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
